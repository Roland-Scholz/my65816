  Tue Jan 26 2021 17:07                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
     7                        ; * mcurses.c - mcurses lib
     8                        ; *
     9                        ; * Copyright (c) 2011-2015 Frank Meyer - frank(at
                    )fli4l.de
    10                        ; *
    11                        ; * This program is free software; you can redistr
                    ibute it and/or modify
    12                        ; * it under the terms of the GNU General Public L
                    icense as published by
    13                        ; * the Free Software Foundation; either version 2
                     of the License, or
    14                        ; * (at your option) any later version.
    15                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
    16                        ; */
    17                        ;#define unix
    18                        ;
    19                        ;#include <stdio.h>
    20                        ;#include <stdlib.h>
    21                        ;#include <string.h>
    22                        ;
    23                        ;#ifdef unix
    24                        ;#include <termio.h>
    25                        ;#include <fcntl.h>
    26                        	code
    27                        	func
    28                        ~~__cmsg_nxthdr:
    29                        	longa	on
    30                        	longi	on
    31 00:0000: 3B           	tsc
    32 00:0001: 38           	sec
    33 00:0002: E9 0C 00     	sbc	#L2
    34 00:0005: 1B           	tcs
    35 00:0006: 0B           	phd
    36 00:0007: 5B           	tcd
    37             00000004   __ctl_0	set	4
    38             00000008   __size_0	set	8
    39             0000000C   __cmsg_0	set	12
    40             00000000   __ptr_1	set	0
    41 00:0008: A9 03 00     	lda	#$3
    42 00:000B: 18           	clc
    43 00:000C: 67 18        	adc	[<L2+__cmsg_0]
    44 00:000E: 85 01        	sta	<R0
  Tue Jan 26 2021 17:07                                                Page 2


    45 00:0010: A9 00 00     	lda	#$0
    46 00:0013: A0 02 00     	ldy	#$2
    47 00:0016: 77 18        	adc	[<L2+__cmsg_0],Y
    48 00:0018: 85 03        	sta	<R0+2
    49 00:001A: A5 01        	lda	<R0
    50 00:001C: 29 FC FF     	and	#<$fffffffc
    51 00:001F: 85 05        	sta	<R1
    52 00:0021: A5 03        	lda	<R0+2
    53 00:0023: 85 07        	sta	<R1+2
    54 00:0025: A5 18        	lda	<L2+__cmsg_0
    55 00:0027: 18           	clc
    56 00:0028: 65 05        	adc	<R1
    57 00:002A: 85 09        	sta	<L3+__ptr_1
    58 00:002C: A5 1A        	lda	<L2+__cmsg_0+2
    59 00:002E: 65 07        	adc	<R1+2
    60 00:0030: 85 0B        	sta	<L3+__ptr_1+2
    61 00:0032: A9 08 00     	lda	#$8
    62 00:0035: 18           	clc
    63 00:0036: 65 09        	adc	<L3+__ptr_1
    64 00:0038: 85 01        	sta	<R0
    65 00:003A: A9 00 00     	lda	#$0
    66 00:003D: 65 0B        	adc	<L3+__ptr_1+2
    67 00:003F: 85 03        	sta	<R0+2
    68 00:0041: 38           	sec
    69 00:0042: A5 01        	lda	<R0
    70 00:0044: E5 10        	sbc	<L2+__ctl_0
    71 00:0046: 85 05        	sta	<R1
    72 00:0048: A5 03        	lda	<R0+2
    73 00:004A: E5 12        	sbc	<L2+__ctl_0+2
    74 00:004C: 85 07        	sta	<R1+2
    75 00:004E: A5 14        	lda	<L2+__size_0
    76 00:0050: C5 05        	cmp	<R1
    77 00:0052: A5 16        	lda	<L2+__size_0+2
    78 00:0054: E5 07        	sbc	<R1+2
    79 00:0056: B0 16        	bcs	L10001
    80 00:0058: A9 00 00     	lda	#$0
    81 00:005B: AA           	tax
    82                        L5:
    83 00:005C: A8           	tay
    84 00:005D: A5 0E        	lda	<L2+2
    85 00:005F: 85 1A        	sta	<L2+2+12
    86 00:0061: A5 0D        	lda	<L2+1
    87 00:0063: 85 19        	sta	<L2+1+12
    88 00:0065: 2B           	pld
    89 00:0066: 3B           	tsc
    90 00:0067: 18           	clc
    91 00:0068: 69 18 00     	adc	#L2+12
    92 00:006B: 1B           	tcs
    93 00:006C: 98           	tya
    94 00:006D: 6B           	rtl
    95                        L10001:
    96 00:006E: A6 0B        	ldx	<L3+__ptr_1+2
    97 00:0070: A5 09        	lda	<L3+__ptr_1
    98 00:0072: 80 E8        	bra	L5
    99             0000000C   L2	equ	12
   100             00000009   L3	equ	9
   101                        	ends
   102                        	efunc
  Tue Jan 26 2021 17:07                                                Page 3


   103                        	code
   104                        	func
   105                        ~~cmsg_nxthdr:
   106                        	longa	on
   107                        	longi	on
   108 00:0074: 3B           	tsc
   109 00:0075: 38           	sec
   110 00:0076: E9 04 00     	sbc	#L6
   111 00:0079: 1B           	tcs
   112 00:007A: 0B           	phd
   113 00:007B: 5B           	tcd
   114             00000004   __msg_0	set	4
   115             00000008   __cmsg_0	set	8
   116 00:007C: D4 0E        	pei	<L6+__cmsg_0+2
   117 00:007E: D4 0C        	pei	<L6+__cmsg_0
   118 00:0080: A0 14 00     	ldy	#$14
   119 00:0083: B7 08        	lda	[<L6+__msg_0],Y
   120 00:0085: 48           	pha
   121 00:0086: 88           	dey
   122 00:0087: 88           	dey
   123 00:0088: B7 08        	lda	[<L6+__msg_0],Y
   124 00:008A: 48           	pha
   125 00:008B: 88           	dey
   126 00:008C: 88           	dey
   127 00:008D: B7 08        	lda	[<L6+__msg_0],Y
   128 00:008F: 48           	pha
   129 00:0090: 88           	dey
   130 00:0091: 88           	dey
   131 00:0092: B7 08        	lda	[<L6+__msg_0],Y
   132 00:0094: 48           	pha
   133 00:0095: 22 xx xx xx  	jsl	~~__cmsg_nxthdr
   134 00:0099: 85 01        	sta	<R0
   135 00:009B: 86 03        	stx	<R0+2
   136 00:009D: A6 03        	ldx	<R0+2
   137 00:009F: A5 01        	lda	<R0
   138 00:00A1: A8           	tay
   139 00:00A2: A5 06        	lda	<L6+2
   140 00:00A4: 85 0E        	sta	<L6+2+8
   141 00:00A6: A5 05        	lda	<L6+1
   142 00:00A8: 85 0D        	sta	<L6+1+8
   143 00:00AA: 2B           	pld
   144 00:00AB: 3B           	tsc
   145 00:00AC: 18           	clc
   146 00:00AD: 69 0C 00     	adc	#L6+8
   147 00:00B0: 1B           	tcs
   148 00:00B1: 98           	tya
   149 00:00B2: 6B           	rtl
   150             00000004   L6	equ	4
   151             00000005   L7	equ	5
   152                        	ends
   153                        	efunc
   154                        ;#define PROGMEM
   155                        ;#define PSTR(x)                                 (
                    x)
   156                        ;#define pgm_read_byte(s)                        (
                    *s)
   157                        ;#elif (defined __SDCC_z80)
   158                        ;#define PROGMEM
  Tue Jan 26 2021 17:07                                                Page 4


   159                        ;#define PSTR(x)                                 (
                    x)
   160                        ;#define pgm_read_byte(s)                        (
                    *s)
   161                        ;
   162                        ;#elif (defined STM32F4XX)
   163                        ;#ifndef HSE_VALUE
   164                        ;#define HSE_VALUE                               (
                    (uint32_t)8000000)         /* STM32F4 discovery uses a 8Mhz 
                    external crystal */
   165                        ;#endif
   166                        ;#include "stm32f4xx.h"
   167                        ;#include "stm32f4xx_gpio.h"
   168                        ;#include "stm32f4xx_usart.h"
   169                        ;#include "stm32f4xx_rcc.h"
   170                        ;#include "misc.h"
   171                        ;#define PROGMEM
   172                        ;#define PSTR(x)                                 (
                    x)
   173                        ;#define pgm_read_byte(s)                        (
                    *s)
   174                        ;
   175                        ;#elif (defined STM32F10X)
   176                        ;#ifndef HSE_VALUE
   177                        ;#define HSE_VALUE                               (
                    (uint32_t)8000000)         /* STM32F4 discovery uses a 8Mhz 
                    external crystal */
   178                        ;#endif
   179                        ;#include "stm32f10x.h"
   180                        ;#include "stm32f10x_gpio.h"
   181                        ;#include "stm32f10x_usart.h"
   182                        ;#include "stm32f10x_rcc.h"
   183                        ;#include "misc.h"
   184                        ;#define PROGMEM
   185                        ;#define PSTR(x)                                 (
                    x)
   186                        ;#define pgm_read_byte(s)                        (
                    *s)
   187                        ;
   188                        ;#else // AVR
   189                        ;#include <avr/io.h>
   190                        ;#include <avr/pgmspace.h>
   191                        ;#include <avr/interrupt.h>
   192                        ;#endif
   193                        ;
   194                        ;#include "mcurses.h"
   195                        ;
   196                        ;#define SEQ_CSI                                 P
                    STR("\033[")                   // code introducer
   197                        ;#define SEQ_CLEAR                               P
                    STR("\033[2J")                 // clear screen
   198                        ;#define SEQ_CLRTOBOT                            P
                    STR("\033[J")                  // clear to bottom
   199                        ;#define SEQ_CLRTOEOL                            P
                    STR("\033[K")                  // clear to end of line
   200                        ;#define SEQ_DELCH                               P
                    STR("\033[P")                  // delete character
   201                        ;#define SEQ_NEXTLINE                            P
  Tue Jan 26 2021 17:07                                                Page 5


                    STR("\033E")                   // goto next line (scroll up 
                    at end of scrolling region)
   202                        ;#define SEQ_INSERTLINE                          P
                    STR("\033[L")                  // insert line
   203                        ;#define SEQ_DELETELINE                          P
                    STR("\033[M")                  // delete line
   204                        ;#define SEQ_ATTRSET                             P
                    STR("\033[0")                  // set attributes, e.g. "\033
                    [0;7;1m"
   205                        ;#define SEQ_ATTRSET_REVERSE                     P
                    STR(";7")                      // reverse
   206                        ;#define SEQ_ATTRSET_UNDERLINE                   P
                    STR(";4")                      // underline
   207                        ;#define SEQ_ATTRSET_BLINK                       P
                    STR(";5")                      // blink
   208                        ;#define SEQ_ATTRSET_BOLD                        P
                    STR(";1")                      // bold
   209                        ;#define SEQ_ATTRSET_DIM                         P
                    STR(";2")                      // dim
   210                        ;#define SEQ_ATTRSET_FCOLOR                      P
                    STR(";3")                      // forground color
   211                        ;#define SEQ_ATTRSET_BCOLOR                      P
                    STR(";4")                      // background color
   212                        ;#define SEQ_INSERT_MODE                         P
                    STR("\033[4h")                 // set insert mode
   213                        ;#define SEQ_REPLACE_MODE                        P
                    STR("\033[4l")                 // set replace mode
   214                        ;#define SEQ_RESET_SCRREG                        P
                    STR("\033[r")                  // reset scrolling region
   215                        ;#define SEQ_LOAD_G1                             P
                    STR("\033)0")                  // load G1 character set
   216                        ;#define SEQ_CURSOR_VIS                          P
                    STR("\033[?25")                // set cursor visible/not vis
                    ible
   217                        ;
   218                        ;static uint_fast8_t                             m
                    curses_scrl_start = 0;         // start of scrolling region,
                     default is 0
   219                        	data
   220                        ~~mcurses_scrl_start:
   221 00:0000: 00           	db	$0
   222 00:0001:              	ends
   223                        ;static uint_fast8_t                             m
                    curses_scrl_end = LINES - 1;   // end of scrolling region, d
                    efault is last line
   224                        	data
   225                        ~~mcurses_scrl_end:
   226 00:0001: 18           	db	$18
   227 00:0002:              	ends
   228                        ;static uint_fast8_t                             m
                    curses_nodelay;                // nodelay flag
   229                        ;static uint_fast8_t                             m
                    curses_halfdelay;              // halfdelay value, in tenths
                     of a second
   230                        ;
   231                        ;uint_fast8_t                                    m
                    curses_is_up = 0;              // flag: mcurses is up
   232                        	data
  Tue Jan 26 2021 17:07                                                Page 6


   233                        	xdef	~~mcurses_is_up
   234                        ~~mcurses_is_up:
   235 00:0002: 00           	db	$0
   236 00:0003:              	ends
   237                        ;uint_fast8_t                                    m
                    curses_cury = 0xff;            // current y position of curs
                    or, public (getyx())
   238                        	data
   239                        	xdef	~~mcurses_cury
   240                        ~~mcurses_cury:
   241 00:0003: FF           	db	$FF
   242 00:0004:              	ends
   243                        ;uint_fast8_t                                    m
                    curses_curx = 0xff;            // current x position of curs
                    or, public (getyx())
   244                        	data
   245                        	xdef	~~mcurses_curx
   246                        ~~mcurses_curx:
   247 00:0004: FF           	db	$FF
   248 00:0005:              	ends
   249                        ;
   250                        ;static void                                     m
                    curses_puts_P (const char *);
   251                        ;
   252                        ;#if defined(unix)
   253                        ;
   254                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   255                        ; * PHYIO: init, done, putc, getc, nodelay, halfde
                    lay, flush for UNIX or LINUX
   256                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   257                        ; */
   258                        ;static struct termio                            m
                    curses_oldmode;
   259                        ;static struct termio                            m
                    curses_newmode;
   260                        ;
   261                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   262                        ; * PHYIO: init (unix/linux)
   263                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   264                        ; */
   265                        ;static uint_fast8_t
   266                        ;mcurses_phyio_init (void)
   267                        ;{
   268                        	code
   269                        	func
   270                        ~~mcurses_phyio_init:
   271                        	longa	on
   272                        	longi	on
   273 00:00B3: 3B           	tsc
   274 00:00B4: 38           	sec
  Tue Jan 26 2021 17:07                                                Page 7


   275 00:00B5: E9 0F 00     	sbc	#L9
   276 00:00B8: 1B           	tcs
   277 00:00B9: 0B           	phd
   278 00:00BA: 5B           	tcd
   279                        ;    uint_fast8_t    rtc = 0;
   280                        ;    int             fd;
   281                        ;
   282                        ;    fd = fileno (stdin);
   283             00000000   rtc_1	set	0
   284             00000001   fd_1	set	1
   285 00:00BB: E2 20        	sep	#$20
   286                        	longa	off
   287 00:00BD: 64 0D        	stz	<L10+rtc_1
   288 00:00BF: C2 20        	rep	#$20
   289                        	longa	on
   290 00:00C1: AD xx xx     	lda	|~~stdin+2
   291 00:00C4: 48           	pha
   292 00:00C5: AD xx xx     	lda	|~~stdin
   293 00:00C8: 48           	pha
   294 00:00C9: 22 xx xx xx  	jsl	~~fileno
   295 00:00CD: 85 0E        	sta	<L10+fd_1
   296                        ;
   297                        ;    if (ioctl (fd, TCGETA, &mcurses_oldmode) >= 0
                     || ioctl (fd, TCGETA, &mcurses_newmode) >= 0)
   298                        ;    {
   299 00:00CF: A9 xx xx     	lda	#<~~mcurses_oldmode
   300 00:00D2: 85 01        	sta	<R0
   301                        	xref	_BEG_DATA
   302 00:00D4: A9 xx xx     	lda	#_BEG_DATA>>16
   303 00:00D7: 48           	pha
   304 00:00D8: D4 01        	pei	<R0
   305 00:00DA: F4 00 00     	pea	#^$5405
   306 00:00DD: F4 05 54     	pea	#<$5405
   307 00:00E0: D4 0E        	pei	<L10+fd_1
   308 00:00E2: F4 0C 00     	pea	#12
   309 00:00E5: 22 xx xx xx  	jsl	~~ioctl
   310 00:00E9: 85 05        	sta	<R1
   311 00:00EB: A5 05        	lda	<R1
   312 00:00ED: 10 20        	bpl	L11
   313 00:00EF: A9 xx xx     	lda	#<~~mcurses_newmode
   314 00:00F2: 85 05        	sta	<R1
   315                        	xref	_BEG_DATA
   316 00:00F4: A9 xx xx     	lda	#_BEG_DATA>>16
   317 00:00F7: 48           	pha
   318 00:00F8: D4 05        	pei	<R1
   319 00:00FA: F4 00 00     	pea	#^$5405
   320 00:00FD: F4 05 54     	pea	#<$5405
   321 00:0100: D4 0E        	pei	<L10+fd_1
   322 00:0102: F4 0C 00     	pea	#12
   323 00:0105: 22 xx xx xx  	jsl	~~ioctl
   324 00:0109: 85 09        	sta	<R2
   325 00:010B: A5 09        	lda	<R2
   326 00:010D: 30 54        	bmi	L10002
   327                        L11:
   328                        ;        mcurses_newmode.c_lflag &= ~ICANON;      
                                                       // switch off canonical i
                    nput
   329 00:010F: A9 02 00     	lda	#$2
  Tue Jan 26 2021 17:07                                                Page 8


   330 00:0112: 1C xx xx     	trb	|~~mcurses_newmode+6
   331                        ;        mcurses_newmode.c_lflag &= ~ECHO;        
                                                       // switch off echo
   332 00:0115: A9 08 00     	lda	#$8
   333 00:0118: 1C xx xx     	trb	|~~mcurses_newmode+6
   334                        ;        mcurses_newmode.c_iflag &= ~ICRNL;       
                                                       // switch off CR->NL mapp
                    ing
   335 00:011B: A9 00 01     	lda	#$100
   336 00:011E: 1C xx xx     	trb	|~~mcurses_newmode
   337                        ;        mcurses_newmode.c_oflag &= ~TAB3;        
                                                       // switch off TAB convers
                    ion
   338 00:0121: A9 00 18     	lda	#$1800
   339 00:0124: 1C xx xx     	trb	|~~mcurses_newmode+2
   340                        ;        mcurses_newmode.c_cc[VINTR] = '\377';    
                                                       // disable VINTR VQUIT
   341 00:0127: E2 20        	sep	#$20
   342                        	longa	off
   343 00:0129: A9 FF        	lda	#$ff
   344 00:012B: 8D xx xx     	sta	|~~mcurses_newmode+9
   345                        ;        mcurses_newmode.c_cc[VQUIT] = '\377';    
                                                       // but don't touch VSWTCH
   346 00:012E: 8D xx xx     	sta	|~~mcurses_newmode+10
   347                        ;        mcurses_newmode.c_cc[VMIN] = 1;          
                                                       // block input:
   348 00:0131: A9 01        	lda	#$1
   349 00:0133: 8D xx xx     	sta	|~~mcurses_newmode+15
   350                        ;        mcurses_newmode.c_cc[VTIME] = 0;         
                                                       // one character
   351 00:0136: 9C xx xx     	stz	|~~mcurses_newmode+14
   352 00:0139: C2 20        	rep	#$20
   353                        	longa	on
   354                        ;
   355                        ;        if (ioctl (fd, TCSETAW, &mcurses_newmode)
                     >= 0)
   356                        ;        {
   357 00:013B: A9 xx xx     	lda	#<~~mcurses_newmode
   358 00:013E: 85 01        	sta	<R0
   359                        	xref	_BEG_DATA
   360 00:0140: A9 xx xx     	lda	#_BEG_DATA>>16
   361 00:0143: 48           	pha
   362 00:0144: D4 01        	pei	<R0
   363 00:0146: F4 00 00     	pea	#^$5407
   364 00:0149: F4 07 54     	pea	#<$5407
   365 00:014C: D4 0E        	pei	<L10+fd_1
   366 00:014E: F4 0C 00     	pea	#12
   367 00:0151: 22 xx xx xx  	jsl	~~ioctl
   368 00:0155: 85 05        	sta	<R1
   369 00:0157: A5 05        	lda	<R1
   370 00:0159: 30 08        	bmi	L10002
   371                        ;            rtc = 1;
   372 00:015B: E2 20        	sep	#$20
   373                        	longa	off
   374 00:015D: A9 01        	lda	#$1
   375 00:015F: 85 0D        	sta	<L10+rtc_1
   376 00:0161: C2 20        	rep	#$20
   377                        	longa	on
  Tue Jan 26 2021 17:07                                                Page 9


   378                        ;        }
   379                        ;    }
   380                        ;
   381                        ;    return rtc;
   382                        L10002:
   383 00:0163: A5 0D        	lda	<L10+rtc_1
   384 00:0165: 29 FF 00     	and	#$ff
   385 00:0168: A8           	tay
   386 00:0169: 2B           	pld
   387 00:016A: 3B           	tsc
   388 00:016B: 18           	clc
   389 00:016C: 69 0F 00     	adc	#L9
   390 00:016F: 1B           	tcs
   391 00:0170: 98           	tya
   392 00:0171: 6B           	rtl
   393                        ;}
   394             0000000F   L9	equ	15
   395             0000000D   L10	equ	13
   396                        	ends
   397                        	efunc
   398                        ;
   399                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   400                        ; * PHYIO: done (unix/linux)
   401                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   402                        ; */
   403                        ;static void
   404                        ;mcurses_phyio_done (void)
   405                        ;{
   406                        	code
   407                        	func
   408                        ~~mcurses_phyio_done:
   409                        	longa	on
   410                        	longi	on
   411 00:0172: 3B           	tsc
   412 00:0173: 38           	sec
   413 00:0174: E9 0A 00     	sbc	#L16
   414 00:0177: 1B           	tcs
   415 00:0178: 0B           	phd
   416 00:0179: 5B           	tcd
   417                        ;    int     fd;
   418                        ;
   419                        ;    fd = fileno (stdin);
   420             00000000   fd_1	set	0
   421 00:017A: AD xx xx     	lda	|~~stdin+2
   422 00:017D: 48           	pha
   423 00:017E: AD xx xx     	lda	|~~stdin
   424 00:0181: 48           	pha
   425 00:0182: 22 xx xx xx  	jsl	~~fileno
   426 00:0186: 85 09        	sta	<L17+fd_1
   427                        ;
   428                        ;    (void) ioctl (fd, TCSETAW, &mcurses_oldmode);
   429 00:0188: A9 xx xx     	lda	#<~~mcurses_oldmode
   430 00:018B: 85 01        	sta	<R0
   431                        	xref	_BEG_DATA
  Tue Jan 26 2021 17:07                                                Page 10


   432 00:018D: A9 xx xx     	lda	#_BEG_DATA>>16
   433 00:0190: 48           	pha
   434 00:0191: D4 01        	pei	<R0
   435 00:0193: F4 00 00     	pea	#^$5407
   436 00:0196: F4 07 54     	pea	#<$5407
   437 00:0199: D4 09        	pei	<L17+fd_1
   438 00:019B: F4 0C 00     	pea	#12
   439 00:019E: 22 xx xx xx  	jsl	~~ioctl
   440                        ;}
   441 00:01A2: 2B           	pld
   442 00:01A3: 3B           	tsc
   443 00:01A4: 18           	clc
   444 00:01A5: 69 0A 00     	adc	#L16
   445 00:01A8: 1B           	tcs
   446 00:01A9: 6B           	rtl
   447             0000000A   L16	equ	10
   448             00000009   L17	equ	9
   449                        	ends
   450                        	efunc
   451                        ;
   452                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   453                        ; * PHYIO: putc (unix/linux)
   454                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   455                        ; */
   456                        ;static void
   457                        ;mcurses_phyio_putc (uint_fast8_t ch)
   458                        ;{
   459                        	code
   460                        	func
   461                        ~~mcurses_phyio_putc:
   462                        	longa	on
   463                        	longi	on
   464 00:01AA: 3B           	tsc
   465 00:01AB: 38           	sec
   466 00:01AC: E9 00 00     	sbc	#L19
   467 00:01AF: 1B           	tcs
   468 00:01B0: 0B           	phd
   469 00:01B1: 5B           	tcd
   470             00000004   ch_0	set	4
   471                        ;    putchar (ch);
   472 00:01B2: AD xx xx     	lda	|~~stdout+2
   473 00:01B5: 48           	pha
   474 00:01B6: AD xx xx     	lda	|~~stdout
   475 00:01B9: 48           	pha
   476 00:01BA: A5 04        	lda	<L19+ch_0
   477 00:01BC: 29 FF 00     	and	#$ff
   478 00:01BF: 48           	pha
   479 00:01C0: 22 xx xx xx  	jsl	~~fputc
   480                        ;}
   481 00:01C4: A5 02        	lda	<L19+2
   482 00:01C6: 85 04        	sta	<L19+2+2
   483 00:01C8: A5 01        	lda	<L19+1
   484 00:01CA: 85 03        	sta	<L19+1+2
   485 00:01CC: 2B           	pld
  Tue Jan 26 2021 17:07                                                Page 11


   486 00:01CD: 3B           	tsc
   487 00:01CE: 18           	clc
   488 00:01CF: 69 02 00     	adc	#L19+2
   489 00:01D2: 1B           	tcs
   490 00:01D3: 6B           	rtl
   491             00000000   L19	equ	0
   492             00000001   L20	equ	1
   493                        	ends
   494                        	efunc
   495                        ;
   496                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   497                        ; * PHYIO: getc (unix/linux)
   498                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   499                        ; */
   500                        ;static uint_fast8_t
   501                        ;mcurses_phyio_getc (void)
   502                        ;{
   503                        	code
   504                        	func
   505                        ~~mcurses_phyio_getc:
   506                        	longa	on
   507                        	longi	on
   508 00:01D4: 3B           	tsc
   509 00:01D5: 38           	sec
   510 00:01D6: E9 01 00     	sbc	#L22
   511 00:01D9: 1B           	tcs
   512 00:01DA: 0B           	phd
   513 00:01DB: 5B           	tcd
   514                        ;    uint_fast8_t ch;
   515                        ;
   516                        ;    ch = getchar ();
   517             00000000   ch_1	set	0
   518 00:01DC: AD xx xx     	lda	|~~stdin+2
   519 00:01DF: 48           	pha
   520 00:01E0: AD xx xx     	lda	|~~stdin
   521 00:01E3: 48           	pha
   522 00:01E4: 22 xx xx xx  	jsl	~~fgetc
   523 00:01E8: E2 20        	sep	#$20
   524                        	longa	off
   525 00:01EA: 85 01        	sta	<L23+ch_1
   526 00:01EC: C2 20        	rep	#$20
   527                        	longa	on
   528                        ;
   529                        ;    return (ch);
   530 00:01EE: A5 01        	lda	<L23+ch_1
   531 00:01F0: 29 FF 00     	and	#$ff
   532 00:01F3: A8           	tay
   533 00:01F4: 2B           	pld
   534 00:01F5: 3B           	tsc
   535 00:01F6: 18           	clc
   536 00:01F7: 69 01 00     	adc	#L22
   537 00:01FA: 1B           	tcs
   538 00:01FB: 98           	tya
   539 00:01FC: 6B           	rtl
  Tue Jan 26 2021 17:07                                                Page 12


   540                        ;}
   541             00000001   L22	equ	1
   542             00000001   L23	equ	1
   543                        	ends
   544                        	efunc
   545                        ;
   546                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   547                        ; * PHYIO: set/reset nodelay (unix/linux)
   548                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   549                        ; */
   550                        ;static void
   551                        ;mcurses_phyio_nodelay (uint_fast8_t flag)
   552                        ;{
   553                        	code
   554                        	func
   555                        ~~mcurses_phyio_nodelay:
   556                        	longa	on
   557                        	longi	on
   558 00:01FD: 3B           	tsc
   559 00:01FE: 38           	sec
   560 00:01FF: E9 08 00     	sbc	#L25
   561 00:0202: 1B           	tcs
   562 00:0203: 0B           	phd
   563 00:0204: 5B           	tcd
   564             00000004   flag_0	set	4
   565                        ;    int     fd;
   566                        ;    int     fl;
   567                        ;
   568                        ;    fd = fileno (stdin);
   569             00000000   fd_1	set	0
   570             00000002   fl_1	set	2
   571 00:0205: AD xx xx     	lda	|~~stdin+2
   572 00:0208: 48           	pha
   573 00:0209: AD xx xx     	lda	|~~stdin
   574 00:020C: 48           	pha
   575 00:020D: 22 xx xx xx  	jsl	~~fileno
   576 00:0211: 85 05        	sta	<L26+fd_1
   577                        ;
   578                        ;    if ((fl = fcntl (fd, F_GETFL, 0)) >= 0)
   579                        ;    {
   580 00:0213: F4 00 00     	pea	#<$0
   581 00:0216: F4 03 00     	pea	#<$3
   582 00:0219: D4 05        	pei	<L26+fd_1
   583 00:021B: F4 08 00     	pea	#8
   584 00:021E: 22 xx xx xx  	jsl	~~fcntl
   585 00:0222: 85 07        	sta	<L26+fl_1
   586 00:0224: A5 07        	lda	<L26+fl_1
   587 00:0226: 30 2A        	bmi	L29
   588                        ;        if (flag)
   589                        ;        {
   590 00:0228: A5 0C        	lda	<L25+flag_0
   591 00:022A: 29 FF 00     	and	#$ff
   592 00:022D: F0 07        	beq	L10005
   593                        ;            fl |= O_NDELAY;
  Tue Jan 26 2021 17:07                                                Page 13


   594 00:022F: A9 00 08     	lda	#$800
   595 00:0232: 04 07        	tsb	<L26+fl_1
   596                        ;        }
   597                        ;        else
   598 00:0234: 80 05        	bra	L10006
   599                        L10005:
   600                        ;        {
   601                        ;            fl &= ~O_NDELAY;
   602 00:0236: A9 00 08     	lda	#$800
   603 00:0239: 14 07        	trb	<L26+fl_1
   604                        ;        }
   605                        L10006:
   606                        ;        (void) fcntl (fd, F_SETFL, fl);
   607 00:023B: D4 07        	pei	<L26+fl_1
   608 00:023D: F4 04 00     	pea	#<$4
   609 00:0240: D4 05        	pei	<L26+fd_1
   610 00:0242: F4 08 00     	pea	#8
   611 00:0245: 22 xx xx xx  	jsl	~~fcntl
   612                        ;        mcurses_nodelay = flag;
   613 00:0249: E2 20        	sep	#$20
   614                        	longa	off
   615 00:024B: A5 0C        	lda	<L25+flag_0
   616 00:024D: 8D xx xx     	sta	|~~mcurses_nodelay
   617 00:0250: C2 20        	rep	#$20
   618                        	longa	on
   619                        ;    }
   620                        ;}
   621                        L29:
   622 00:0252: A5 0A        	lda	<L25+2
   623 00:0254: 85 0C        	sta	<L25+2+2
   624 00:0256: A5 09        	lda	<L25+1
   625 00:0258: 85 0B        	sta	<L25+1+2
   626 00:025A: 2B           	pld
   627 00:025B: 3B           	tsc
   628 00:025C: 18           	clc
   629 00:025D: 69 0A 00     	adc	#L25+2
   630 00:0260: 1B           	tcs
   631 00:0261: 6B           	rtl
   632             00000008   L25	equ	8
   633             00000005   L26	equ	5
   634                        	ends
   635                        	efunc
   636                        ;
   637                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   638                        ; * PHYIO: set/reset halfdelay (unix/linux)
   639                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   640                        ; */
   641                        ;static void
   642                        ;mcurses_phyio_halfdelay (uint_fast8_t tenths)
   643                        ;{
   644                        	code
   645                        	func
   646                        ~~mcurses_phyio_halfdelay:
   647                        	longa	on
  Tue Jan 26 2021 17:07                                                Page 14


   648                        	longi	on
   649 00:0262: 3B           	tsc
   650 00:0263: 38           	sec
   651 00:0264: E9 08 00     	sbc	#L30
   652 00:0267: 1B           	tcs
   653 00:0268: 0B           	phd
   654 00:0269: 5B           	tcd
   655             00000004   tenths_0	set	4
   656                        ;    if (tenths == 0)
   657                        ;    {
   658 00:026A: A5 0C        	lda	<L30+tenths_0
   659 00:026C: 29 FF 00     	and	#$ff
   660 00:026F: D0 0E        	bne	L10007
   661                        ;        mcurses_newmode.c_cc[VMIN] = 1;          
                                  /* block input:     */
   662 00:0271: E2 20        	sep	#$20
   663                        	longa	off
   664 00:0273: A9 01        	lda	#$1
   665 00:0275: 8D xx xx     	sta	|~~mcurses_newmode+15
   666                        ;        mcurses_newmode.c_cc[VTIME] = 0;         
                                  /* one character    */
   667 00:0278: 9C xx xx     	stz	|~~mcurses_newmode+14
   668 00:027B: C2 20        	rep	#$20
   669                        	longa	on
   670                        ;    }
   671                        ;    else
   672 00:027D: 80 0C        	bra	L10008
   673                        L10007:
   674                        ;    {
   675                        ;        mcurses_newmode.c_cc[VMIN] = 0;          
                                  /* set timeout      */
   676 00:027F: E2 20        	sep	#$20
   677                        	longa	off
   678 00:0281: 9C xx xx     	stz	|~~mcurses_newmode+15
   679                        ;        mcurses_newmode.c_cc[VTIME] = tenths;    
                                  /* in tenths of sec */
   680 00:0284: A5 0C        	lda	<L30+tenths_0
   681 00:0286: 8D xx xx     	sta	|~~mcurses_newmode+14
   682 00:0289: C2 20        	rep	#$20
   683                        	longa	on
   684                        ;    }
   685                        L10008:
   686                        ;
   687                        ;    mcurses_halfdelay = tenths;
   688 00:028B: E2 20        	sep	#$20
   689                        	longa	off
   690 00:028D: A5 0C        	lda	<L30+tenths_0
   691 00:028F: 8D xx xx     	sta	|~~mcurses_halfdelay
   692 00:0292: C2 20        	rep	#$20
   693                        	longa	on
   694                        ;
   695                        ;    (void) ioctl (0, TCSETAW, &mcurses_newmode);
   696 00:0294: A9 xx xx     	lda	#<~~mcurses_newmode
   697 00:0297: 85 01        	sta	<R0
   698                        	xref	_BEG_DATA
   699 00:0299: A9 xx xx     	lda	#_BEG_DATA>>16
   700 00:029C: 48           	pha
   701 00:029D: D4 01        	pei	<R0
  Tue Jan 26 2021 17:07                                                Page 15


   702 00:029F: F4 00 00     	pea	#^$5407
   703 00:02A2: F4 07 54     	pea	#<$5407
   704 00:02A5: F4 00 00     	pea	#<$0
   705 00:02A8: F4 0C 00     	pea	#12
   706 00:02AB: 22 xx xx xx  	jsl	~~ioctl
   707                        ;}
   708 00:02AF: A5 0A        	lda	<L30+2
   709 00:02B1: 85 0C        	sta	<L30+2+2
   710 00:02B3: A5 09        	lda	<L30+1
   711 00:02B5: 85 0B        	sta	<L30+1+2
   712 00:02B7: 2B           	pld
   713 00:02B8: 3B           	tsc
   714 00:02B9: 18           	clc
   715 00:02BA: 69 0A 00     	adc	#L30+2
   716 00:02BD: 1B           	tcs
   717 00:02BE: 6B           	rtl
   718             00000008   L30	equ	8
   719             00000009   L31	equ	9
   720                        	ends
   721                        	efunc
   722                        ;
   723                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   724                        ; * PHYIO: flush output (unix/linux)
   725                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   726                        ; */
   727                        ;static void
   728                        ;mcurses_phyio_flush_output ()
   729                        ;{
   730                        	code
   731                        	func
   732                        ~~mcurses_phyio_flush_output:
   733                        	longa	on
   734                        	longi	on
   735                        ;    fflush (stdout);
   736 00:02BF: AD xx xx     	lda	|~~stdout+2
   737 00:02C2: 48           	pha
   738 00:02C3: AD xx xx     	lda	|~~stdout
   739 00:02C6: 48           	pha
   740 00:02C7: 22 xx xx xx  	jsl	~~fflush
   741                        ;}
   742 00:02CB: 6B           	rtl
   743             00000000   L34	equ	0
   744             00000001   L35	equ	1
   745                        	ends
   746                        	efunc
   747                        ;
   748                        ;#elif defined (__SDCC_z80)
   749                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   750                        ; * PHYIO: init (SDCC Z80)
   751                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  Tue Jan 26 2021 17:07                                                Page 16


   752                        ; */
   753                        ;static uint_fast8_t
   754                        ;mcurses_phyio_init (void)
   755                        ;{
   756                        ;    return 1;
   757                        ;}
   758                        ;
   759                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   760                        ; * PHYIO: done (SDCC Z80)
   761                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   762                        ; */
   763                        ;static void
   764                        ;mcurses_phyio_done (void)
   765                        ;{
   766                        ;}
   767                        ;
   768                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   769                        ; * PHYIO: putc (SDCC Z80)
   770                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   771                        ; */
   772                        ;static void
   773                        ;mcurses_phyio_putc (uint_fast8_t ch)
   774                        ;{
   775                        ;    putchar (ch);
   776                        ;}
   777                        ;
   778                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   779                        ; * PHYIO: getc (SDCC Z80)
   780                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   781                        ; */
   782                        ;static uint_fast8_t
   783                        ;mcurses_phyio_getc (void)
   784                        ;{
   785                        ;    uint_fast8_t    ch;
   786                        ;
   787                        ;    ch = getchar ();
   788                        ;    return (ch);
   789                        ;}
   790                        ;
   791                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   792                        ; * PHYIO: set/reset nodelay (SDCC Z80)
   793                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  Tue Jan 26 2021 17:07                                                Page 17


   794                        ; */
   795                        ;static void
   796                        ;mcurses_phyio_nodelay (uint_fast8_t flag)
   797                        ;{
   798                        ;    mcurses_nodelay = flag;
   799                        ;}
   800                        ;
   801                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   802                        ; * PHYIO: set/reset halfdelay (SDCC Z80)
   803                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   804                        ; */
   805                        ;static void
   806                        ;mcurses_phyio_halfdelay (uint_fast8_t tenths)
   807                        ;{
   808                        ;    mcurses_halfdelay = tenths;
   809                        ;}
   810                        ;
   811                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   812                        ; * PHYIO: flush output (SDCC Z80)
   813                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   814                        ; */
   815                        ;static void
   816                        ;mcurses_phyio_flush_output ()
   817                        ;{
   818                        ;}
   819                        ;
   820                        ;#elif defined(STM32F4XX) || defined(STM32F10X)
   821                        ;
   822                        ;#if MCURSES_UART_NUMBER == 0        // USB
   823                        ;
   824                        ;#include "stm32f4xx_exti.h"
   825                        ;#include "usbd_cdc_core.h"
   826                        ;#include "usbd_usr.h"
   827                        ;#include "usbd_desc.h"
   828                        ;#include "usbd_cdc_vcp.h"
   829                        ;#include "usb_dcd_int.h"
   830                        ;
   831                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   832                        ; * PHYIO: init, done, putc, getc, nodelay, halfde
                    lay, flush for STM32F4XX USB
   833                        ; *
   834                        ; * The USB data must be 4 byte aligned if DMA is 
                    enabled. This macro handles
   835                        ; * the alignment, if necessary (it's actually mag
                    ic, but don't tell anyone).
   836                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  Tue Jan 26 2021 17:07                                                Page 18


   837                        ; */
   838                        ;__ALIGN_BEGIN USB_OTG_CORE_HANDLE  USB_OTG_dev __
                    ALIGN_END;
   839                        ;
   840                        ;void SysTick_Handler(void);
   841                        ;void NMI_Handler(void);
   842                        ;void HardFault_Handler(void);
   843                        ;void MemManage_Handler(void);
   844                        ;void BusFault_Handler(void);
   845                        ;void UsageFault_Handler(void);
   846                        ;void SVC_Handler(void);
   847                        ;void DebugMon_Handler(void);
   848                        ;void PendSV_Handler(void);
   849                        ;void OTG_FS_IRQHandler(void);
   850                        ;void OTG_FS_WKUP_IRQHandler(void);
   851                        ;
   852                        ;static volatile uint32_t halfdelay_counter;
   853                        ;
   854                        ;void SysTick_Handler(void)
   855                        ;{
   856                        ;    if (halfdelay_counter > 0)
   857                        ;    {
   858                        ;        halfdelay_counter--;
   859                        ;    }
   860                        ;}
   861                        ;
   862                        ;static void
   863                        ;die(void)
   864                        ;{
   865                        ;    while (1)
   866                        ;    {
   867                        ;        ;
   868                        ;    }
   869                        ;}
   870                        ;
   871                        ;void NMI_Handler(void)       {}
   872                        ;void HardFault_Handler(void) { die(); }
   873                        ;void MemManage_Handler(void) { die(); }
   874                        ;void BusFault_Handler(void)  { die(); }
   875                        ;void UsageFault_Handler(void){ die(); }
   876                        ;void SVC_Handler(void)       {}
   877                        ;void DebugMon_Handler(void)  {}
   878                        ;void PendSV_Handler(void)    {}
   879                        ;
   880                        ;void OTG_FS_IRQHandler(void)
   881                        ;{
   882                        ;    USBD_OTG_ISR_Handler (&USB_OTG_dev);
   883                        ;}
   884                        ;
   885                        ;void OTG_FS_WKUP_IRQHandler(void)
   886                        ;{
   887                        ;    if(USB_OTG_dev.cfg.low_power)
   888                        ;    {
   889                        ;        *(uint32_t *)(0xE000ED10) &= 0xFFFFFFF9 ;
   890                        ;        SystemInit();
   891                        ;        USB_OTG_UngateClock(&USB_OTG_dev);
   892                        ;    }
   893                        ;    EXTI_ClearITPendingBit(EXTI_Line18);
  Tue Jan 26 2021 17:07                                                Page 19


   894                        ;}
   895                        ;
   896                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   897                        ; * PHYIO: init (STM32F4XX USB)
   898                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   899                        ; */
   900                        ;static uint_fast8_t
   901                        ;mcurses_phyio_init (void)
   902                        ;{
   903                        ;    static uint_fast8_t already_called = 0;
   904                        ;    uint_fast8_t        rtc = 1;
   905                        ;    uint_fast8_t        cnt = 0;
   906                        ;    uint8_t             ch;
   907                        ;
   908                        ;    if (! already_called)
   909                        ;    {
   910                        ;        SysTick_Config(SystemCoreClock / 1000);
   911                        ;        USBD_Init(&USB_OTG_dev, USB_OTG_FS_CORE_I
                    D, &USR_desc, &USBD_CDC_cb, &USR_cb);
   912                        ;        already_called = 1;
   913                        ;    }
   914                        ;
   915                        ;    halfdelay_counter = 1000;
   916                        ;
   917                        ;    while (! VCP_get_char (&ch))                 
                                   // wait until character available
   918                        ;    {
   919                        ;        if (halfdelay_counter == 0)
   920                        ;        {
   921                        ;            mcurses_puts_P ("Press any key to sta
                    rt...\r\n");
   922                        ;
   923                        ;            cnt++;
   924                        ;
   925                        ;            if (cnt > 10)                        
                                       // after 10 seconds timeout
   926                        ;            {
   927                        ;                rtc = 0;
   928                        ;                break;
   929                        ;            }
   930                        ;
   931                        ;            halfdelay_counter = 1000;
   932                        ;        }
   933                        ;    }
   934                        ;
   935                        ;    halfdelay_counter = 0;
   936                        ;    return rtc;
   937                        ;}
   938                        ;
   939                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   940                        ; * PHYIO: done (STM32F4XX USB)
   941                        ; *-----------------------------------------------
  Tue Jan 26 2021 17:07                                                Page 20


                    ------------------------------------------------------------
                    ----------------------------------------
   942                        ; */
   943                        ;static void
   944                        ;mcurses_phyio_done (void)
   945                        ;{
   946                        ;}
   947                        ;
   948                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   949                        ; * PHYIO: putc (STM32F4XX USB)
   950                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   951                        ; */
   952                        ;static void
   953                        ;mcurses_phyio_putc (uint_fast8_t ch)
   954                        ;{
   955                        ;    VCP_put_char(ch);
   956                        ;}
   957                        ;
   958                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   959                        ; * PHYIO: getc (STM32F4XX USB)
   960                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   961                        ; */
   962                        ;static uint_fast8_t
   963                        ;mcurses_phyio_getc (void)
   964                        ;{
   965                        ;    uint8_t ch;
   966                        ;
   967                        ;    if (mcurses_halfdelay)
   968                        ;    {
   969                        ;        halfdelay_counter = 100 * mcurses_halfdel
                    ay;
   970                        ;    }
   971                        ;
   972                        ;    while (! VCP_get_char (&ch))                 
                                   // wait until character available
   973                        ;    {
   974                        ;        if (mcurses_nodelay)
   975                        ;        {                                        
                                   // if nodelay set, return ERR
   976                        ;            return (ERR);
   977                        ;        }
   978                        ;
   979                        ;        if (mcurses_halfdelay && halfdelay_counte
                    r == 0)
   980                        ;        {
   981                        ;            return (ERR);
   982                        ;        }
   983                        ;    }
   984                        ;
   985                        ;    return ch;
  Tue Jan 26 2021 17:07                                                Page 21


   986                        ;}
   987                        ;
   988                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   989                        ; * PHYIO: set/reset nodelay (STM32F4XX USB)
   990                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   991                        ; */
   992                        ;static void
   993                        ;mcurses_phyio_nodelay (uint_fast8_t flag)
   994                        ;{
   995                        ;    mcurses_nodelay = flag;
   996                        ;}
   997                        ;
   998                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
   999                        ; * PHYIO: set/reset halfdelay (STM32FXX USB)
  1000                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1001                        ; */
  1002                        ;static void
  1003                        ;mcurses_phyio_halfdelay (uint_fast8_t tenths)
  1004                        ;{
  1005                        ;    mcurses_halfdelay = tenths;
  1006                        ;}
  1007                        ;
  1008                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1009                        ; * PHYIO: flush output (STM32F4XX USB)
  1010                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1011                        ; */
  1012                        ;static void
  1013                        ;mcurses_phyio_flush_output ()
  1014                        ;{
  1015                        ;}
  1016                        ;
  1017                        ;#else // MCURSES_UART_NUMBER != 0
  1018                        ;
  1019                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1020                        ; * PHYIO: init, done, putc, getc, nodelay, halfde
                    lay, flush for STM32F4XX UART
  1021                        ; *
  1022                        ; *            UART1 : TX:[PA9,PB6] RX:[PA10,PB7]
  1023                        ; *            UART2 : TX:[PA2,PD5] RX:[PA3,PD6]
  1024                        ; *            UART3 : TX:[PB10,PC10,PD8] RX:[PB11
                    ,PC11,PD9]
  1025                        ; *            UART4 : TX:[PA0,PC10] RX:[PA1,PC11]
  1026                        ; *            UART5 : TX:[PC12] RX:[PD2]
  1027                        ; *            UART6 : TX:[PC6,PG14] RX:[PC7,PG9]
  Tue Jan 26 2021 17:07                                                Page 22


  1028                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1029                        ; */
  1030                        ;
  1031                        ;
  1032                        ;#define UART_TXBUFLEN                           6
                    4                              // 64 Bytes ringbuffer for UA
                    RT
  1033                        ;#define UART_RXBUFLEN                           1
                    6                              // 16 Bytes ringbuffer for UA
                    RT
  1034                        ;
  1035                        ;static volatile uint_fast8_t    uart_txbuf[UART_T
                    XBUFLEN];                      // tx ringbuffer
  1036                        ;static volatile uint_fast8_t    uart_txsize = 0; 
                                                   // tx size
  1037                        ;static volatile uint_fast8_t    uart_rxbuf[UART_R
                    XBUFLEN];                      // rx ringbuffer
  1038                        ;static volatile uint_fast8_t    uart_rxsize = 0; 
                                                   // rx size
  1039                        ;
  1040                        ;#define UART_NUMBER             MCURSES_UART_NUMB
                    ER
  1041                        ;#define BAUD                    MCURSES_BAUD
  1042                        ;
  1043                        ;#define _CONCAT(a,b)            a##b
  1044                        ;#define CONCAT(a,b)             _CONCAT(a,b)
  1045                        ;
  1046                        ;#if defined(STM32F4XX)
  1047                        ;
  1048                        ;#if UART_NUMBER == 1
  1049                        ;
  1050                        ;#define UART_TX_PORT_LETTER         A       // A9
                    /A10 or B6/B7
  1051                        ;#define UART_TX_PIN_NUMBER          9
  1052                        ;#define UART_RX_PORT_LETTER         A
  1053                        ;#define UART_RX_PIN_NUMBER          10
  1054                        ;#define UART_GPIO_CLOCK_CMD         RCC_AHB2Perip
                    hClockCmd
  1055                        ;#define UART_GPIO                   RCC_AHB2Perip
                    h_GPIO
  1056                        ;
  1057                        ;#define UART_NAME                   USART1
  1058                        ;#define UART_USART_CLOCK_CMD        RCC_APB2Perip
                    hClockCmd
  1059                        ;#define UART_USART_CLOCK            RCC_APB2Perip
                    h_USART1
  1060                        ;#define UART_GPIO_AF_UART           GPIO_AF_USART
                    1
  1061                        ;#define UART_IRQ_HANDLER            USART1_IRQHan
                    dler
  1062                        ;#define UART_IRQ_CHANNEL            USART1_IRQn
  1063                        ;
  1064                        ;#elif UART_NUMBER == 2
  1065                        ;
  1066                        ;#define UART_TX_PORT_LETTER         A       // A2
                    /A3 or D5/D6
  Tue Jan 26 2021 17:07                                                Page 23


  1067                        ;#define UART_TX_PIN_NUMBER          2
  1068                        ;#define UART_RX_PORT_LETTER         A
  1069                        ;#define UART_RX_PIN_NUMBER          3
  1070                        ;#define UART_GPIO_CLOCK_CMD         RCC_AHB1Perip
                    hClockCmd
  1071                        ;#define UART_GPIO                   RCC_AHB1Perip
                    h_GPIO
  1072                        ;
  1073                        ;#define UART_NAME                   USART2
  1074                        ;#define UART_USART_CLOCK_CMD        RCC_APB1Perip
                    hClockCmd
  1075                        ;#define UART_USART_CLOCK            RCC_APB1Perip
                    h_USART2
  1076                        ;#define UART_GPIO_AF_UART           GPIO_AF_USART
                    2
  1077                        ;#define UART_IRQ_HANDLER            USART2_IRQHan
                    dler
  1078                        ;#define UART_IRQ_CHANNEL            USART2_IRQn
  1079                        ;
  1080                        ;#elif UART_NUMBER == 3
  1081                        ;
  1082                        ;#define UART_TX_PORT_LETTER         D       // D8
                    /D9 or B10/B11 or C10/C11
  1083                        ;#define UART_TX_PIN_NUMBER          8
  1084                        ;#define UART_RX_PORT_LETTER         D
  1085                        ;#define UART_RX_PIN_NUMBER          9
  1086                        ;#define UART_GPIO_CLOCK_CMD         RCC_AHB1Perip
                    hClockCmd
  1087                        ;#define UART_GPIO                   RCC_AHB1Perip
                    h_GPIO
  1088                        ;
  1089                        ;#define UART_NAME                   USART3
  1090                        ;#define UART_USART_CLOCK_CMD        RCC_APB1Perip
                    hClockCmd
  1091                        ;#define UART_USART_CLOCK            RCC_APB1Perip
                    h_USART3
  1092                        ;#define UART_GPIO_AF_UART           GPIO_AF_USART
                    3
  1093                        ;#define UART_IRQ_HANDLER            USART3_IRQHan
                    dler
  1094                        ;#define UART_IRQ_CHANNEL            USART3_IRQn
  1095                        ;
  1096                        ;#elif UART_NUMBER == 4
  1097                        ;
  1098                        ;#define UART_TX_PORT_LETTER         A       // A0
                    /A1 or C10/C11
  1099                        ;#define UART_TX_PIN_NUMBER          0
  1100                        ;#define UART_RX_PORT_LETTER         A
  1101                        ;#define UART_RX_PIN_NUMBER          1
  1102                        ;#define UART_GPIO_CLOCK_CMD         RCC_AHB1Perip
                    hClockCmd
  1103                        ;#define UART_GPIO                   RCC_AHB1Perip
                    h_GPIO
  1104                        ;
  1105                        ;#define UART_NAME                   USART4
  1106                        ;#define UART_USART_CLOCK_CMD        RCC_APB1Perip
                    hClockCmd
  1107                        ;#define UART_USART_CLOCK            RCC_APB1Perip
  Tue Jan 26 2021 17:07                                                Page 24


                    h_USART4
  1108                        ;#define UART_GPIO_AF_UART           GPIO_AF_USART
                    4
  1109                        ;#define UART_IRQ_HANDLER            USART4_IRQHan
                    dler
  1110                        ;#define UART_IRQ_CHANNEL            USART4_IRQn
  1111                        ;
  1112                        ;#elif UART_NUMBER == 5
  1113                        ;
  1114                        ;#define UART_TX_PORT_LETTER         C       // C1
                    2/D2
  1115                        ;#define UART_TX_PIN_NUMBER          12
  1116                        ;#define UART_RX_PORT_LETTER         D
  1117                        ;#define UART_RX_PIN_NUMBER          2
  1118                        ;#define UART_GPIO_CLOCK_CMD         RCC_AHB1Perip
                    hClockCmd
  1119                        ;#define UART_GPIO                   RCC_AHB1Perip
                    h_GPIO
  1120                        ;
  1121                        ;#define UART_NAME                   USART5
  1122                        ;#define UART_USART_CLOCK_CMD        RCC_APB1Perip
                    hClockCmd
  1123                        ;#define UART_USART_CLOCK            RCC_APB1Perip
                    h_USART5
  1124                        ;#define UART_GPIO_AF_UART           GPIO_AF_USART
                    5
  1125                        ;#define UART_IRQ_HANDLER            USART5_IRQHan
                    dler
  1126                        ;#define UART_IRQ_CHANNEL            USART5_IRQn
  1127                        ;
  1128                        ;#elif UART_NUMBER == 6
  1129                        ;
  1130                        ;#define UART_TX_PORT_LETTER         C       // C6
                    /C7 or G14/G9
  1131                        ;#define UART_TX_PIN_NUMBER          6
  1132                        ;#define UART_RX_PORT_LETTER         C
  1133                        ;#define UART_RX_PIN_NUMBER          7
  1134                        ;#define UART_GPIO_CLOCK_CMD         RCC_AHB2Perip
                    hClockCmd
  1135                        ;#define UART_GPIO                   RCC_AHB2Perip
                    h_GPIO
  1136                        ;
  1137                        ;#define UART_NAME                   USART6
  1138                        ;#define UART_USART_CLOCK_CMD        RCC_APB2Perip
                    hClockCmd
  1139                        ;#define UART_USART_CLOCK            RCC_APB2Perip
                    h_USART6
  1140                        ;#define UART_GPIO_AF_UART           GPIO_AF_USART
                    6
  1141                        ;#define UART_IRQ_HANDLER            USART6_IRQHan
                    dler
  1142                        ;#define UART_IRQ_CHANNEL            USART6_IRQn
  1143                        ;
  1144                        ;#else
  1145                        ;#error wrong number for UART_NUMBER, choose 1-6
  1146                        ;#endif
  1147                        ;
  1148                        ;#elif defined(STM32F10X)
  Tue Jan 26 2021 17:07                                                Page 25


  1149                        ;
  1150                        ;#if UART_NUMBER == 1
  1151                        ;
  1152                        ;#define UART_TX_PORT_LETTER     A
  1153                        ;#define UART_TX_PIN_NUMBER      9
  1154                        ;#define UART_RX_PORT_LETTER     A
  1155                        ;#define UART_RX_PIN_NUMBER      10
  1156                        ;#define UART_GPIO_CLOCK_CMD     RCC_APB2PeriphClo
                    ckCmd
  1157                        ;#define UART_GPIO               RCC_APB2Periph_GP
                    IO
  1158                        ;
  1159                        ;#define UART_NAME               USART1
  1160                        ;#define UART_USART_CLOCK_CMD    RCC_APB2PeriphClo
                    ckCmd
  1161                        ;#define UART_USART_CLOCK        RCC_APB2Periph_US
                    ART1
  1162                        ;#define UART_GPIO_AF_UART       GPIO_AF_USART1
  1163                        ;#define UART_IRQ_HANDLER        USART1_IRQHandler
  1164                        ;#define UART_IRQ_CHANNEL        USART1_IRQn
  1165                        ;
  1166                        ;#elif UART_NUMBER == 2
  1167                        ;
  1168                        ;#define UART_TX_PORT_LETTER     A
  1169                        ;#define UART_TX_PIN_NUMBER      2
  1170                        ;#define UART_RX_PORT_LETTER     A
  1171                        ;#define UART_RX_PIN_NUMBER      3
  1172                        ;#define UART_GPIO_CLOCK_CMD     RCC_APB2PeriphClo
                    ckCmd
  1173                        ;#define UART_GPIO               RCC_APB2Periph_GP
                    IO
  1174                        ;
  1175                        ;#define UART_NAME               USART2
  1176                        ;#define UART_USART_CLOCK_CMD    RCC_APB1PeriphClo
                    ckCmd
  1177                        ;#define UART_USART_CLOCK        RCC_APB1Periph_US
                    ART2
  1178                        ;#define UART_GPIO_AF_UART       GPIO_AF_USART2
  1179                        ;#define UART_IRQ_HANDLER        USART2_IRQHandler
  1180                        ;#define UART_IRQ_CHANNEL        USART2_IRQn
  1181                        ;
  1182                        ;#elif UART_NUMBER == 3
  1183                        ;
  1184                        ;#define UART_TX_PORT_LETTER     B
  1185                        ;#define UART_TX_PIN_NUMBER      10
  1186                        ;#define UART_RX_PORT_LETTER     B
  1187                        ;#define UART_RX_PIN_NUMBER      11
  1188                        ;#define UART_GPIO_CLOCK_CMD     RCC_APB2PeriphClo
                    ckCmd
  1189                        ;#define UART_GPIO               RCC_APB2Periph_GP
                    IO
  1190                        ;
  1191                        ;#define UART_NAME               USART3
  1192                        ;#define UART_USART_CLOCK_CMD    RCC_APB1PeriphClo
                    ckCmd
  1193                        ;#define UART_USART_CLOCK        RCC_APB1Periph_US
                    ART3
  1194                        ;#define UART_GPIO_AF_UART       GPIO_AF_USART3
  Tue Jan 26 2021 17:07                                                Page 26


  1195                        ;#define UART_IRQ_HANDLER        USART3_IRQHandler
  1196                        ;#define UART_IRQ_CHANNEL        USART3_IRQn
  1197                        ;
  1198                        ;#else
  1199                        ;#error wrong number for UART_NUMBER, choose 1-3
  1200                        ;#endif
  1201                        ;
  1202                        ;#endif
  1203                        ;
  1204                        ;#define UART_TX_PORT                CONCAT(GPIO, 
                    UART_TX_PORT_LETTER)
  1205                        ;#define UART_TX_GPIO_CLOCK          CONCAT(UART_G
                    PIO, UART_TX_PORT_LETTER)
  1206                        ;#define UART_TX_PIN                 CONCAT(GPIO_P
                    in_, UART_TX_PIN_NUMBER)
  1207                        ;#define UART_TX_PINSOURCE           CONCAT(GPIO_P
                    inSource,  UART_TX_PIN_NUMBER)
  1208                        ;#define UART_RX_PORT                CONCAT(GPIO, 
                    UART_RX_PORT_LETTER)
  1209                        ;#define UART_RX_GPIO_CLOCK          CONCAT(UART_G
                    PIO, UART_RX_PORT_LETTER)
  1210                        ;#define UART_RX_PIN                 CONCAT(GPIO_P
                    in_, UART_RX_PIN_NUMBER)
  1211                        ;#define UART_RX_PINSOURCE           CONCAT(GPIO_P
                    inSource, UART_RX_PIN_NUMBER)
  1212                        ;
  1213                        ;
  1214                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1215                        ; * PHYIO: init (STM32F4XX UART)
  1216                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1217                        ; */
  1218                        ;static uint_fast8_t
  1219                        ;mcurses_phyio_init (void)
  1220                        ;{
  1221                        ;    static uint_fast8_t already_called = 0;
  1222                        ;
  1223                        ;    if (! already_called)
  1224                        ;    {
  1225                        ;        already_called = 1;
  1226                        ;
  1227                        ;        GPIO_InitTypeDef    gpio;
  1228                        ;        USART_InitTypeDef   uart;
  1229                        ;        NVIC_InitTypeDef    nvic;
  1230                        ;
  1231                        ;        UART_GPIO_CLOCK_CMD (UART_TX_GPIO_CLOCK, 
                    ENABLE);
  1232                        ;        UART_GPIO_CLOCK_CMD (UART_RX_GPIO_CLOCK, 
                    ENABLE);
  1233                        ;
  1234                        ;        UART_USART_CLOCK_CMD (UART_USART_CLOCK, E
                    NABLE);
  1235                        ;
  1236                        ;        // connect UART functions with IO-Pins
  1237                        ;#if defined (STM32F4XX)
  Tue Jan 26 2021 17:07                                                Page 27


  1238                        ;        GPIO_PinAFConfig (UART_TX_PORT, UART_TX_P
                    INSOURCE, UART_GPIO_AF_UART);      // TX
  1239                        ;        GPIO_PinAFConfig (UART_RX_PORT, UART_RX_P
                    INSOURCE, UART_GPIO_AF_UART);      // RX
  1240                        ;
  1241                        ;        // UART as alternate function with PushPu
                    ll
  1242                        ;        gpio.GPIO_Mode  = GPIO_Mode_AF;
  1243                        ;        gpio.GPIO_Speed = GPIO_Speed_100MHz;
  1244                        ;        gpio.GPIO_OType = GPIO_OType_PP;
  1245                        ;        gpio.GPIO_PuPd  = GPIO_PuPd_UP;          
                                                       // fm: perhaps better: GP
                    IO_PuPd_NOPULL
  1246                        ;
  1247                        ;        gpio.GPIO_Pin = UART_TX_PIN;
  1248                        ;        GPIO_Init(UART_TX_PORT, &gpio);
  1249                        ;
  1250                        ;        gpio.GPIO_Pin = UART_RX_PIN;
  1251                        ;        GPIO_Init(UART_RX_PORT, &gpio);
  1252                        ;
  1253                        ;#elif defined (STM32F10X)
  1254                        ;
  1255                        ;        /* TX Pin */
  1256                        ;        gpio.GPIO_Pin = UART_TX_PIN;
  1257                        ;        gpio.GPIO_Mode = GPIO_Mode_AF_PP;
  1258                        ;        gpio.GPIO_Speed = GPIO_Speed_50MHz;
  1259                        ;        GPIO_Init(GPIOA, &gpio);
  1260                        ;
  1261                        ;        /* RX Pin */
  1262                        ;        gpio.GPIO_Pin = UART_RX_PIN;
  1263                        ;        gpio.GPIO_Mode = GPIO_Mode_IPU;
  1264                        ;        gpio.GPIO_Speed = GPIO_Speed_50MHz;
  1265                        ;        GPIO_Init(GPIOA, &gpio);
  1266                        ;
  1267                        ;#endif
  1268                        ;
  1269                        ;        USART_OverSampling8Cmd(UART_NAME, ENABLE)
                    ;
  1270                        ;
  1271                        ;        // 8 bits, 1 stop bit, no parity, no RTS+
                    CTS
  1272                        ;        uart.USART_BaudRate             = MCURSES
                    _BAUD;
  1273                        ;        uart.USART_WordLength           = USART_W
                    ordLength_8b;
  1274                        ;        uart.USART_StopBits             = USART_S
                    topBits_1;
  1275                        ;        uart.USART_Parity               = USART_P
                    arity_No;
  1276                        ;        uart.USART_HardwareFlowControl  = USART_H
                    ardwareFlowControl_None;
  1277                        ;        uart.USART_Mode                 = USART_M
                    ode_Rx | USART_Mode_Tx;
  1278                        ;
  1279                        ;        USART_Init(UART_NAME, &uart);
  1280                        ;
  1281                        ;        // UART enable
  1282                        ;        USART_Cmd(UART_NAME, ENABLE);
  Tue Jan 26 2021 17:07                                                Page 28


  1283                        ;
  1284                        ;        // RX-Interrupt enable
  1285                        ;        USART_ITConfig(UART_NAME, USART_IT_RXNE, 
                    ENABLE);
  1286                        ;
  1287                        ;        // enable UART Interrupt-Vector
  1288                        ;        nvic.NVIC_IRQChannel                    =
                     UART_IRQ_CHANNEL;
  1289                        ;        nvic.NVIC_IRQChannelPreemptionPriority  =
                     0;
  1290                        ;        nvic.NVIC_IRQChannelSubPriority         =
                     0;
  1291                        ;        nvic.NVIC_IRQChannelCmd                 =
                     ENABLE;
  1292                        ;        NVIC_Init (&nvic);
  1293                        ;    }
  1294                        ;    return 1;
  1295                        ;}
  1296                        ;
  1297                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1298                        ; * PHYIO: done (STM32F4XX UART)
  1299                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1300                        ; */
  1301                        ;static void
  1302                        ;mcurses_phyio_done (void)
  1303                        ;{
  1304                        ;}
  1305                        ;
  1306                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1307                        ; * PHYIO: putc (STM32F4XX UART)
  1308                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1309                        ; */
  1310                        ;static void
  1311                        ;mcurses_phyio_putc (uint_fast8_t ch)
  1312                        ;{
  1313                        ;    static uint_fast8_t uart_txstop  = 0;        
                                                   // tail
  1314                        ;
  1315                        ;    while (uart_txsize >= UART_TXBUFLEN)         
                                                   // buffer full?
  1316                        ;    {                                            
                                                   // yes
  1317                        ;        ;                                        
                                                   // wait
  1318                        ;    }
  1319                        ;
  1320                        ;    uart_txbuf[uart_txstop++] = ch;              
                                                   // store character
  1321                        ;
  1322                        ;    if (uart_txstop >= UART_TXBUFLEN)            
  Tue Jan 26 2021 17:07                                                Page 29


                                                   // at end of ringbuffer?
  1323                        ;    {                                            
                                                   // yes
  1324                        ;        uart_txstop = 0;                         
                                                   // reset to beginning
  1325                        ;    }
  1326                        ;
  1327                        ;    __disable_irq();
  1328                        ;    uart_txsize++;                               
                                                   // increment used size
  1329                        ;    __enable_irq();
  1330                        ;
  1331                        ;    USART_ITConfig(UART_NAME, USART_IT_TXE, ENABL
                    E);                           // enable TXE interrupt
  1332                        ;}
  1333                        ;
  1334                        ;#if 0
  1335                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1336                        ; * PHYIO: putc - non-interrupt version (STM32F4XX
                     UART)
  1337                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1338                        ; */
  1339                        ;static void
  1340                        ;mcurses_phyio_putc (uint_fast8_t ch)
  1341                        ;{
  1342                        ;    while (USART_GetFlagStatus(UART_NAME, USART_F
                    LAG_TXE) == RESET)
  1343                        ;    {
  1344                        ;         ;
  1345                        ;    }
  1346                        ;    USART_SendData(UART_NAME, ch);
  1347                        ;}
  1348                        ;#endif
  1349                        ;
  1350                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1351                        ; * PHYIO: getc (STM32F4XX UART)
  1352                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1353                        ; */
  1354                        ;static uint_fast8_t
  1355                        ;mcurses_phyio_getc (void)
  1356                        ;{
  1357                        ;    static uint_fast8_t  uart_rxstart = 0;       
                                                   // head
  1358                        ;    uint_fast8_t         ch;
  1359                        ;
  1360                        ;    while (uart_rxsize == 0)                     
                                                   // rx buffer empty?
  1361                        ;    {                                            
                                                   // yes, wait
  1362                        ;        if (mcurses_nodelay)
  Tue Jan 26 2021 17:07                                                Page 30


  1363                        ;        {                                        
                                                   // or if nodelay set, return 
                    ERR
  1364                        ;            return (ERR);
  1365                        ;        }
  1366                        ;    }
  1367                        ;
  1368                        ;    ch = uart_rxbuf[uart_rxstart++];             
                                                   // get character from ringbuf
                    fer
  1369                        ;
  1370                        ;    if (uart_rxstart == UART_RXBUFLEN)           
                                                   // at end of rx buffer?
  1371                        ;    {                                            
                                                   // yes
  1372                        ;        uart_rxstart = 0;                        
                                                   // reset to beginning
  1373                        ;    }
  1374                        ;
  1375                        ;    __disable_irq();
  1376                        ;    uart_rxsize--;                               
                                                   // decrement size
  1377                        ;    __enable_irq();
  1378                        ;
  1379                        ;    return (ch);
  1380                        ;}
  1381                        ;
  1382                        ;#if 0
  1383                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1384                        ; * PHYIO: getc - non-interrupt version (STM32F4XX
                     UART)
  1385                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1386                        ; */
  1387                        ;static uint_fast8_t
  1388                        ;mcurses_phyio_getc (void)
  1389                        ;{
  1390                        ;    uint_fast8_t ch;
  1391                        ;
  1392                        ;    while (USART_GetFlagStatus(UART_NAME, USART_F
                    LAG_RXNE) == RESET)            // wait until character avail
                    able
  1393                        ;    {
  1394                        ;        if (mcurses_nodelay)
  1395                        ;        {                                        
                                                   // if nodelay set, return ERR
  1396                        ;            return (ERR);
  1397                        ;        }
  1398                        ;    }
  1399                        ;    ch = USART_ReceiveData(USART1);
  1400                        ;    return ch;
  1401                        ;}
  1402                        ;#endif
  1403                        ;
  1404                        ;
  Tue Jan 26 2021 17:07                                                Page 31


  1405                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1406                        ; * PHYIO: set/reset nodelay (STM32F4XX UART)
  1407                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1408                        ; */
  1409                        ;static void
  1410                        ;mcurses_phyio_nodelay (uint_fast8_t flag)
  1411                        ;{
  1412                        ;    mcurses_nodelay = flag;
  1413                        ;}
  1414                        ;
  1415                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1416                        ; * PHYIO: set/reset halfdelay (STM32FXX UART)
  1417                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1418                        ; */
  1419                        ;static void
  1420                        ;mcurses_phyio_halfdelay (uint_fast8_t tenths)
  1421                        ;{
  1422                        ;    mcurses_halfdelay = tenths;
  1423                        ;}
  1424                        ;
  1425                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1426                        ; * PHYIO: flush output (STM32F4XX UART)
  1427                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1428                        ; */
  1429                        ;static void
  1430                        ;mcurses_phyio_flush_output ()
  1431                        ;{
  1432                        ;    while (uart_txsize > 0)                      
                                                   // tx buffer empty?
  1433                        ;    {
  1434                        ;        ;                                        
                                                   // no, wait
  1435                        ;    }
  1436                        ;}
  1437                        ;
  1438                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1439                        ; * PHYIO: UART RX/TX interrupt (STM32F4XX UART)
  1440                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1441                        ; */
  1442                        ;void UART_IRQ_HANDLER (void)
  1443                        ;{
  1444                        ;    static uint_fast8_t     uart_rxstop  = 0;    
  Tue Jan 26 2021 17:07                                                Page 32


                                                   // tail
  1445                        ;    uint16_t                value;
  1446                        ;    uint_fast8_t            ch;
  1447                        ;
  1448                        ;    if (USART_GetITStatus (UART_NAME, USART_IT_RX
                    NE) != RESET)
  1449                        ;    {
  1450                        ;        USART_ClearITPendingBit (UART_NAME, USART
                    _IT_RXNE);
  1451                        ;        value = USART_ReceiveData (UART_NAME);
  1452                        ;
  1453                        ;        ch = value & 0xFF;
  1454                        ;
  1455                        ;        if (uart_rxsize < UART_RXBUFLEN)         
                                                   // buffer full?
  1456                        ;        {                                        
                                                   // no
  1457                        ;            uart_rxbuf[uart_rxstop++] = ch;      
                                                   // store character
  1458                        ;
  1459                        ;            if (uart_rxstop >= UART_RXBUFLEN)    
                                                   // at end of ringbuffer?
  1460                        ;            {                                    
                                                   // yes
  1461                        ;                uart_rxstop = 0;                 
                                                   // reset to beginning
  1462                        ;            }
  1463                        ;
  1464                        ;            uart_rxsize++;                       
                                                   // increment used size
  1465                        ;        }
  1466                        ;    }
  1467                        ;
  1468                        ;    if (USART_GetITStatus (UART_NAME, USART_IT_TX
                    E) != RESET)
  1469                        ;    {
  1470                        ;        static uint_fast8_t  uart_txstart = 0;   
                                                   // head
  1471                        ;        uint_fast8_t         ch;
  1472                        ;
  1473                        ;        USART_ClearITPendingBit (UART_NAME, USART
                    _IT_TXE);
  1474                        ;
  1475                        ;        if (uart_txsize > 0)                     
                                                   // tx buffer empty?
  1476                        ;        {                                        
                                                   // no
  1477                        ;            ch = uart_txbuf[uart_txstart++];     
                                                   // get character to send, inc
                    rement offset
  1478                        ;
  1479                        ;            if (uart_txstart == UART_TXBUFLEN)   
                                                   // at end of tx buffer?
  1480                        ;            {                                    
                                                   // yes
  1481                        ;                uart_txstart = 0;                
                                                   // reset to beginning
  1482                        ;            }
  Tue Jan 26 2021 17:07                                                Page 33


  1483                        ;
  1484                        ;            uart_txsize--;                       
                                                   // decrement size
  1485                        ;
  1486                        ;            USART_SendData(UART_NAME, ch);
  1487                        ;        }
  1488                        ;        else
  1489                        ;        {
  1490                        ;            USART_ITConfig(UART_NAME, USART_IT_TX
                    E, DISABLE);                   // disable TXE interrupt
  1491                        ;        }
  1492                        ;    }
  1493                        ;    else
  1494                        ;    {
  1495                        ;        ;
  1496                        ;    }
  1497                        ;USART_ITConfig(UART_NAME, USART_IT_RXNE, ENABLE);
  1498                        ;}
  1499                        ;#endif // UART_NUMBER == 0
  1500                        ;
  1501                        ;#else // AVR
  1502                        ;
  1503                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1504                        ; * PHYIO: init, done, putc, getc for AVR
  1505                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1506                        ; */
  1507                        ;
  1508                        ;#define BAUD                                    M
                    CURSES_BAUD
  1509                        ;#include <util/setbaud.h>
  1510                        ;
  1511                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1512                        ; * Newer ATmegas, e.g. ATmega88, ATmega168
  1513                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1514                        ; */
  1515                        ;#ifdef UBRR0H
  1516                        ;
  1517                        ;#define UART0_UBRRH                             U
                    BRR0H
  1518                        ;#define UART0_UBRRL                             U
                    BRR0L
  1519                        ;#define UART0_UCSRA                             U
                    CSR0A
  1520                        ;#define UART0_UCSRB                             U
                    CSR0B
  1521                        ;#define UART0_UCSRC                             U
                    CSR0C
  1522                        ;#define UART0_UDRE_BIT_VALUE                    (
                    1<<UDRE0)
  1523                        ;#define UART0_UCSZ1_BIT_VALUE                   (
  Tue Jan 26 2021 17:07                                                Page 34


                    1<<UCSZ01)
  1524                        ;#define UART0_UCSZ0_BIT_VALUE                   (
                    1<<UCSZ00)
  1525                        ;#ifdef URSEL0
  1526                        ;#define UART0_URSEL_BIT_VALUE                   (
                    1<<URSEL0)
  1527                        ;#else
  1528                        ;#define UART0_URSEL_BIT_VALUE                   (
                    0)
  1529                        ;#endif
  1530                        ;#define UART0_TXEN_BIT_VALUE                    (
                    1<<TXEN0)
  1531                        ;#define UART0_RXEN_BIT_VALUE                    (
                    1<<RXEN0)
  1532                        ;#define UART0_RXCIE_BIT_VALUE                   (
                    1<<RXCIE0)
  1533                        ;#define UART0_UDR                               U
                    DR0
  1534                        ;#define UART0_U2X                               U
                    2X0
  1535                        ;#define UART0_RXC                               R
                    XC0
  1536                        ;
  1537                        ;#ifdef USART0_TXC_vect                           
                                           // e.g. ATmega162 with 2 UARTs
  1538                        ;#define UART0_TXC_vect                          U
                    SART0_TXC_vect
  1539                        ;#define UART0_RXC_vect                          U
                    SART0_RXC_vect
  1540                        ;#define UART0_UDRE_vect                         U
                    SART0_UDRE_vect
  1541                        ;#elif defined(USART0_TX_vect)                    
                                           // e.g. ATmega644 with 2 UARTs
  1542                        ;#define UART0_TXC_vect                          U
                    SART0_TX_vect
  1543                        ;#define UART0_RXC_vect                          U
                    SART0_RX_vect
  1544                        ;#define UART0_UDRE_vect                         U
                    SART0_UDRE_vect
  1545                        ;#else                                            
                                           // e.g. ATmega168 with 1 UART
  1546                        ;#define UART0_TXC_vect                          U
                    SART_TX_vect
  1547                        ;#define UART0_RXC_vect                          U
                    SART_RX_vect
  1548                        ;#define UART0_UDRE_vect                         U
                    SART_UDRE_vect
  1549                        ;#endif
  1550                        ;
  1551                        ;#define UART0_UDRIE                             U
                    DRIE0
  1552                        ;
  1553                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1554                        ; * ATmegas with 2nd UART, e.g. ATmega162
  1555                        ; *-----------------------------------------------
                    ------------------------------------------------------------
  Tue Jan 26 2021 17:07                                                Page 35


                    ----------------------------------------
  1556                        ; */
  1557                        ;#ifdef UBRR1H
  1558                        ;#define UART1_UBRRH                             U
                    BRR1H
  1559                        ;#define UART1_UBRRL                             U
                    BRR1L
  1560                        ;#define UART1_UCSRA                             U
                    CSR1A
  1561                        ;#define UART1_UCSRB                             U
                    CSR1B
  1562                        ;#define UART1_UCSRC                             U
                    CSR1C
  1563                        ;#define UART1_UDRE_BIT_VALUE                    (
                    1<<UDRE1)
  1564                        ;#define UART1_UCSZ1_BIT_VALUE                   (
                    1<<UCSZ11)
  1565                        ;#define UART1_UCSZ0_BIT_VALUE                   (
                    1<<UCSZ10)
  1566                        ;#ifdef URSEL1
  1567                        ;#define UART1_URSEL_BIT_VALUE                   (
                    1<<URSEL1)
  1568                        ;#else
  1569                        ;#define UART1_URSEL_BIT_VALUE                   (
                    0)
  1570                        ;#endif
  1571                        ;#define UART1_TXEN_BIT_VALUE                    (
                    1<<TXEN1)
  1572                        ;#define UART1_RXEN_BIT_VALUE                    (
                    1<<RXEN1)
  1573                        ;#define UART1_RXCIE_BIT_VALUE                   (
                    1<<RXCIE1)
  1574                        ;#define UART1_UDR                               U
                    DR1
  1575                        ;#define UART1_U2X                               U
                    2X1
  1576                        ;#define UART1_RXC                               R
                    XC1
  1577                        ;
  1578                        ;#ifdef USART1_TXC_vect                           
                                           // e.g. ATmega162 with 2 UARTs
  1579                        ;#define UART1_TXC_vect                          U
                    SART1_TXC_vect
  1580                        ;#define UART1_RXC_vect                          U
                    SART1_RXC_vect
  1581                        ;#define UART1_UDRE_vect                         U
                    SART1_UDRE_vect
  1582                        ;#else                                            
                                           // e.g. ATmega644 with 2 UARTs
  1583                        ;#define UART1_TXC_vect                          U
                    SART1_TX_vect
  1584                        ;#define UART1_RXC_vect                          U
                    SART1_RX_vect
  1585                        ;#define UART1_UDRE_vect                         U
                    SART1_UDRE_vect
  1586                        ;#endif
  1587                        ;
  1588                        ;#define UART1_UDRIE                             U
  Tue Jan 26 2021 17:07                                                Page 36


                    DRIE1
  1589                        ;#endif // UBRR1H
  1590                        ;
  1591                        ;#else
  1592                        ;
  1593                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1594                        ; * older ATmegas, e.g. ATmega8, ATmega16
  1595                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1596                        ; */
  1597                        ;#define UART0_UBRRH                             U
                    BRRH
  1598                        ;#define UART0_UBRRL                             U
                    BRRL
  1599                        ;#define UART0_UCSRA                             U
                    CSRA
  1600                        ;#define UART0_UCSRB                             U
                    CSRB
  1601                        ;#define UART0_UCSRC                             U
                    CSRC
  1602                        ;#define UART0_UDRE_BIT_VALUE                    (
                    1<<UDRE)
  1603                        ;#define UART0_UCSZ1_BIT_VALUE                   (
                    1<<UCSZ1)
  1604                        ;#define UART0_UCSZ0_BIT_VALUE                   (
                    1<<UCSZ0)
  1605                        ;#ifdef URSEL
  1606                        ;#define UART0_URSEL_BIT_VALUE                   (
                    1<<URSEL)
  1607                        ;#else
  1608                        ;#define UART0_URSEL_BIT_VALUE                   (
                    0)
  1609                        ;#endif
  1610                        ;#define UART0_TXEN_BIT_VALUE                    (
                    1<<TXEN)
  1611                        ;#define UART0_RXEN_BIT_VALUE                    (
                    1<<RXEN)
  1612                        ;#define UART0_RXCIE_BIT_VALUE                   (
                    1<<RXCIE)
  1613                        ;#define UART0_UDR                               U
                    DR
  1614                        ;#define UART0_U2X                               U
                    2X
  1615                        ;#define UART0_RXC                               R
                    XC
  1616                        ;#define UART0_UDRE_vect                         U
                    SART_UDRE_vect
  1617                        ;#define UART0_TXC_vect                          U
                    SART_TXC_vect
  1618                        ;#define UART0_RXC_vect                          U
                    SART_RXC_vect
  1619                        ;#define UART0_UDRIE                             U
                    DRIE
  1620                        ;
  1621                        ;#endif
  Tue Jan 26 2021 17:07                                                Page 37


  1622                        ;
  1623                        ;#define UART_TXBUFLEN                           6
                    4                              // 64 Bytes ringbuffer for UA
                    RT
  1624                        ;#define UART_RXBUFLEN                           1
                    6                              // 16 Bytes ringbuffer for UA
                    RT
  1625                        ;
  1626                        ;static volatile uint_fast8_t uart_txbuf[UART_TXBU
                    FLEN];                         // tx ringbuffer
  1627                        ;static volatile uint_fast8_t uart_txsize = 0;    
                                                   // tx size
  1628                        ;static volatile uint_fast8_t uart_rxbuf[UART_RXBU
                    FLEN];                         // rx ringbuffer
  1629                        ;static volatile uint_fast8_t uart_rxsize = 0;    
                                                   // rx size
  1630                        ;
  1631                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1632                        ; * PHYIO: init (AVR)
  1633                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1634                        ; */
  1635                        ;static uint_fast8_t
  1636                        ;mcurses_phyio_init (void)
  1637                        ;{
  1638                        ;    UART0_UBRRH = UBRRH_VALUE;                   
                                                   // set baud rate
  1639                        ;    UART0_UBRRL = UBRRL_VALUE;
  1640                        ;
  1641                        ;#if USE_2X
  1642                        ;    UART0_UCSRA |= (1<<UART0_U2X);
  1643                        ;#else
  1644                        ;    UART0_UCSRA &= ~(1<<UART0_U2X);
  1645                        ;#endif
  1646                        ;
  1647                        ;    UART0_UCSRC = UART0_UCSZ1_BIT_VALUE | UART0_U
                    CSZ0_BIT_VALUE | UART0_URSEL_BIT_VALUE;    // 8 bit, no pari
                    ty
  1648                        ;    UART0_UCSRB |= UART0_TXEN_BIT_VALUE | UART0_R
                    XEN_BIT_VALUE | UART0_RXCIE_BIT_VALUE;     // enable UART TX
                    , RX, and RX interrupt
  1649                        ;
  1650                        ;    return 1;
  1651                        ;}
  1652                        ;
  1653                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1654                        ; * PHYIO: done (AVR)
  1655                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1656                        ; */
  1657                        ;static void
  1658                        ;mcurses_phyio_done (void)
  Tue Jan 26 2021 17:07                                                Page 38


  1659                        ;{
  1660                        ;}
  1661                        ;
  1662                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1663                        ; * PHYIO: putc (AVR)
  1664                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1665                        ; */
  1666                        ;static void
  1667                        ;mcurses_phyio_putc (uint_fast8_t ch)
  1668                        ;{
  1669                        ;    static uint_fast8_t uart_txstop  = 0;        
                                                   // tail
  1670                        ;
  1671                        ;    while (uart_txsize >= UART_TXBUFLEN)         
                                                   // buffer full?
  1672                        ;    {                                            
                                                   // yes
  1673                        ;        ;                                        
                                                   // wait
  1674                        ;    }
  1675                        ;
  1676                        ;    uart_txbuf[uart_txstop++] = ch;              
                                                   // store character
  1677                        ;
  1678                        ;    if (uart_txstop >= UART_TXBUFLEN)            
                                                   // at end of ringbuffer?
  1679                        ;    {                                            
                                                   // yes
  1680                        ;        uart_txstop = 0;                         
                                                   // reset to beginning
  1681                        ;    }
  1682                        ;
  1683                        ;    cli();
  1684                        ;    uart_txsize++;                               
                                                   // increment used size
  1685                        ;    sei();
  1686                        ;
  1687                        ;    UART0_UCSRB |= (1 << UART0_UDRIE);           
                                                   // enable UDRE interrupt
  1688                        ;
  1689                        ;#if 0
  1690                        ;    while (!(UART0_UCSRA & UART0_UDRE_BIT_VALUE))
  1691                        ;    {
  1692                        ;        ;
  1693                        ;    }
  1694                        ;
  1695                        ;    UART0_UDR = ch;
  1696                        ;#endif
  1697                        ;}
  1698                        ;
  1699                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1700                        ; * PHYIO: getc (AVR)
  Tue Jan 26 2021 17:07                                                Page 39


  1701                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1702                        ; */
  1703                        ;static uint_fast8_t
  1704                        ;mcurses_phyio_getc (void)
  1705                        ;{
  1706                        ;    static uint_fast8_t  uart_rxstart = 0;       
                                                   // head
  1707                        ;    uint_fast8_t         ch;
  1708                        ;
  1709                        ;    while (uart_rxsize == 0)                     
                                                   // rx buffer empty?
  1710                        ;    {                                            
                                                   // yes, wait
  1711                        ;        if (mcurses_nodelay)
  1712                        ;        {                                        
                                                   // or if nodelay set, return 
                    ERR
  1713                        ;            return (ERR);
  1714                        ;        }
  1715                        ;    }
  1716                        ;
  1717                        ;    ch = uart_rxbuf[uart_rxstart++];             
                                                   // get character from ringbuf
                    fer
  1718                        ;
  1719                        ;    if (uart_rxstart == UART_RXBUFLEN)           
                                                   // at end of rx buffer?
  1720                        ;    {                                            
                                                   // yes
  1721                        ;        uart_rxstart = 0;                        
                                                   // reset to beginning
  1722                        ;    }
  1723                        ;
  1724                        ;    cli();
  1725                        ;    uart_rxsize--;                               
                                                   // decrement size
  1726                        ;    sei();
  1727                        ;
  1728                        ;#if 0
  1729                        ;    while (!(UART0_UCSRA & (1<<UART0_RXC)))      
                                                   // character available?
  1730                        ;    {                                            
                                                   // no
  1731                        ;        if (mcurses_nodelay)
  1732                        ;        {                                        
                                                   // if nodelay set, return ERR
  1733                        ;            return (ERR);
  1734                        ;        }
  1735                        ;    }
  1736                        ;
  1737                        ;    ch = UART0_UDR;                              
                                                   // read character from UDRx
  1738                        ;#endif
  1739                        ;    return (ch);
  1740                        ;}
  1741                        ;
  Tue Jan 26 2021 17:07                                                Page 40


  1742                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1743                        ; * PHYIO: set/reset nodelay (AVR)
  1744                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1745                        ; */
  1746                        ;static void
  1747                        ;mcurses_phyio_nodelay (uint_fast8_t flag)
  1748                        ;{
  1749                        ;    mcurses_nodelay = flag;
  1750                        ;}
  1751                        ;
  1752                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1753                        ; * PHYIO: set/reset halfdelay (AVR)
  1754                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1755                        ; */
  1756                        ;static void
  1757                        ;mcurses_phyio_halfdelay (uint_fast8_t tenths)
  1758                        ;{
  1759                        ;    mcurses_halfdelay = tenths;
  1760                        ;}
  1761                        ;
  1762                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1763                        ; * PHYIO: flush output (AVR)
  1764                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1765                        ; */
  1766                        ;static void
  1767                        ;mcurses_phyio_flush_output ()
  1768                        ;{
  1769                        ;    while (uart_txsize > 0)                      
                                                   // tx buffer empty?
  1770                        ;    {
  1771                        ;        ;                                        
                                                   // no, wait
  1772                        ;    }
  1773                        ;}
  1774                        ;
  1775                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1776                        ; * PHYIO: UART interrupt handler, called if UART 
                    has received a character (AVR)
  1777                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1778                        ; */
  1779                        ;ISR(UART0_RXC_vect)
  1780                        ;{
  Tue Jan 26 2021 17:07                                                Page 41


  1781                        ;    static uint_fast8_t  uart_rxstop  = 0;       
                                                   // tail
  1782                        ;    uint_fast8_t         ch;
  1783                        ;
  1784                        ;    ch = UART0_UDR;
  1785                        ;
  1786                        ;    if (uart_rxsize < UART_RXBUFLEN)             
                                                   // buffer full?
  1787                        ;    {                                            
                                                   // no
  1788                        ;        uart_rxbuf[uart_rxstop++] = ch;          
                                                   // store character
  1789                        ;
  1790                        ;        if (uart_rxstop >= UART_RXBUFLEN)        
                                                   // at end of ringbuffer?
  1791                        ;        {                                        
                                                   // yes
  1792                        ;            uart_rxstop = 0;                     
                                                   // reset to beginning
  1793                        ;        }
  1794                        ;
  1795                        ;        uart_rxsize++;                           
                                                   // increment used size
  1796                        ;    }
  1797                        ;}
  1798                        ;
  1799                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1800                        ; * PHYIO: UART interrupt handler, called if UART 
                    is ready to send a character (AVR)
  1801                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1802                        ; */
  1803                        ;ISR(UART0_UDRE_vect)
  1804                        ;{
  1805                        ;    static uint_fast8_t  uart_txstart = 0;       
                                                   // head
  1806                        ;    uint_fast8_t         ch;
  1807                        ;
  1808                        ;    if (uart_txsize > 0)                         
                                                   // tx buffer empty?
  1809                        ;    {                                            
                                                   // no
  1810                        ;        ch = uart_txbuf[uart_txstart++];         
                                                   // get character to send, inc
                    rement offset
  1811                        ;
  1812                        ;        if (uart_txstart == UART_TXBUFLEN)       
                                                   // at end of tx buffer?
  1813                        ;        {                                        
                                                   // yes
  1814                        ;            uart_txstart = 0;                    
                                                   // reset to beginning
  1815                        ;        }
  1816                        ;
  1817                        ;        uart_txsize--;                           
  Tue Jan 26 2021 17:07                                                Page 42


                                                   // decrement size
  1818                        ;
  1819                        ;        UART0_UDR = ch;                          
                                                   // write character, don't wai
                    t
  1820                        ;    }
  1821                        ;    else
  1822                        ;    {
  1823                        ;        UART0_UCSRB &= ~(1 << UART0_UDRIE);      
                                                   // tx buffer empty, disable U
                    DRE interrupt
  1824                        ;    }
  1825                        ;}
  1826                        ;
  1827                        ;#endif // !unix
  1828                        ;
  1829                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1830                        ; * INTERN: put a character (raw)
  1831                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1832                        ; */
  1833                        ;static void
  1834                        ;mcurses_putc (uint_fast8_t ch)
  1835                        ;{
  1836                        	code
  1837                        	func
  1838                        ~~mcurses_putc:
  1839                        	longa	on
  1840                        	longi	on
  1841 00:02CC: 3B           	tsc
  1842 00:02CD: 38           	sec
  1843 00:02CE: E9 00 00     	sbc	#L37
  1844 00:02D1: 1B           	tcs
  1845 00:02D2: 0B           	phd
  1846 00:02D3: 5B           	tcd
  1847             00000004   ch_0	set	4
  1848                        ;    mcurses_phyio_putc (ch);
  1849 00:02D4: D4 04        	pei	<L37+ch_0
  1850 00:02D6: 22 xx xx xx  	jsl	~~mcurses_phyio_putc
  1851                        ;}
  1852 00:02DA: A5 02        	lda	<L37+2
  1853 00:02DC: 85 04        	sta	<L37+2+2
  1854 00:02DE: A5 01        	lda	<L37+1
  1855 00:02E0: 85 03        	sta	<L37+1+2
  1856 00:02E2: 2B           	pld
  1857 00:02E3: 3B           	tsc
  1858 00:02E4: 18           	clc
  1859 00:02E5: 69 02 00     	adc	#L37+2
  1860 00:02E8: 1B           	tcs
  1861 00:02E9: 6B           	rtl
  1862             00000000   L37	equ	0
  1863             00000001   L38	equ	1
  1864                        	ends
  1865                        	efunc
  1866                        ;
  Tue Jan 26 2021 17:07                                                Page 43


  1867                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1868                        ; * INTERN: put a string from flash (raw)
  1869                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1870                        ; */
  1871                        ;static void
  1872                        ;mcurses_puts_P (const char * str)
  1873                        ;{
  1874                        	code
  1875                        	func
  1876                        ~~mcurses_puts_P:
  1877                        	longa	on
  1878                        	longi	on
  1879 00:02EA: 3B           	tsc
  1880 00:02EB: 38           	sec
  1881 00:02EC: E9 01 00     	sbc	#L40
  1882 00:02EF: 1B           	tcs
  1883 00:02F0: 0B           	phd
  1884 00:02F1: 5B           	tcd
  1885             00000004   str_0	set	4
  1886                        ;    uint_fast8_t ch;
  1887                        ;
  1888                        ;    while ((ch = pgm_read_byte(str)) != '\0')
  1889             00000000   ch_1	set	0
  1890 00:02F2: 80 0C        	bra	L10009
  1891                        L20001:
  1892                        ;    {
  1893                        ;        mcurses_putc (ch);
  1894 00:02F4: D4 01        	pei	<L41+ch_1
  1895 00:02F6: 22 xx xx xx  	jsl	~~mcurses_putc
  1896                        ;        str++;
  1897 00:02FA: E6 05        	inc	<L40+str_0
  1898 00:02FC: D0 02        	bne	L10009
  1899 00:02FE: E6 07        	inc	<L40+str_0+2
  1900                        ;    }
  1901                        L10009:
  1902 00:0300: E2 20        	sep	#$20
  1903                        	longa	off
  1904 00:0302: A7 05        	lda	[<L40+str_0]
  1905 00:0304: 85 01        	sta	<L41+ch_1
  1906 00:0306: C2 20        	rep	#$20
  1907                        	longa	on
  1908 00:0308: A5 01        	lda	<L41+ch_1
  1909 00:030A: 29 FF 00     	and	#$ff
  1910 00:030D: D0 E5        	bne	L20001
  1911                        ;}
  1912 00:030F: A5 03        	lda	<L40+2
  1913 00:0311: 85 07        	sta	<L40+2+4
  1914 00:0313: A5 02        	lda	<L40+1
  1915 00:0315: 85 06        	sta	<L40+1+4
  1916 00:0317: 2B           	pld
  1917 00:0318: 3B           	tsc
  1918 00:0319: 18           	clc
  1919 00:031A: 69 05 00     	adc	#L40+4
  1920 00:031D: 1B           	tcs
  Tue Jan 26 2021 17:07                                                Page 44


  1921 00:031E: 6B           	rtl
  1922             00000001   L40	equ	1
  1923             00000001   L41	equ	1
  1924                        	ends
  1925                        	efunc
  1926                        ;
  1927                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1928                        ; * INTERN: put a 3/2/1 digit integer number (raw)
  1929                        ; *
  1930                        ; * Here we don't want to use sprintf (too big on 
                    AVR/Z80) or itoa (not available on Z80)
  1931                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  1932                        ; */
  1933                        ;static void
  1934                        ;mcurses_puti (uint_fast8_t i)
  1935                        ;{
  1936                        	code
  1937                        	func
  1938                        ~~mcurses_puti:
  1939                        	longa	on
  1940                        	longi	on
  1941 00:031F: 3B           	tsc
  1942 00:0320: 38           	sec
  1943 00:0321: E9 0D 00     	sbc	#L45
  1944 00:0324: 1B           	tcs
  1945 00:0325: 0B           	phd
  1946 00:0326: 5B           	tcd
  1947             00000004   i_0	set	4
  1948                        ;    uint_fast8_t ii;
  1949                        ;
  1950                        ;    if (i >= 10)
  1951             00000000   ii_1	set	0
  1952                        ;    {
  1953 00:0327: E2 20        	sep	#$20
  1954                        	longa	off
  1955 00:0329: A5 11        	lda	<L45+i_0
  1956 00:032B: C9 0A        	cmp	#<$a
  1957 00:032D: C2 20        	rep	#$20
  1958                        	longa	on
  1959 00:032F: B0 03        	bcs	*+5
  1960 00:0331: 82 82 00     	brl	L10011
  1961                        ;        if (i >= 100)
  1962                        ;        {
  1963 00:0334: E2 20        	sep	#$20
  1964                        	longa	off
  1965 00:0336: A5 11        	lda	<L45+i_0
  1966 00:0338: C9 64        	cmp	#<$64
  1967 00:033A: C2 20        	rep	#$20
  1968                        	longa	on
  1969 00:033C: 90 3C        	bcc	L10012
  1970                        ;            ii = i / 100;
  1971 00:033E: A5 11        	lda	<L45+i_0
  1972 00:0340: 29 FF 00     	and	#$ff
  1973 00:0343: A2 64 00     	ldx	#<$64
  Tue Jan 26 2021 17:07                                                Page 45


  1974                        	xref	~~~div
  1975 00:0346: 22 xx xx xx  	jsl	~~~div
  1976 00:034A: E2 20        	sep	#$20
  1977                        	longa	off
  1978 00:034C: 85 0D        	sta	<L46+ii_1
  1979 00:034E: C2 20        	rep	#$20
  1980                        	longa	on
  1981                        ;            mcurses_putc (ii + '0');
  1982 00:0350: A5 0D        	lda	<L46+ii_1
  1983 00:0352: 29 FF 00     	and	#$ff
  1984 00:0355: 18           	clc
  1985 00:0356: 69 30 00     	adc	#$30
  1986 00:0359: 48           	pha
  1987 00:035A: 22 xx xx xx  	jsl	~~mcurses_putc
  1988                        ;            i -= 100 * ii;
  1989 00:035E: A5 0D        	lda	<L46+ii_1
  1990 00:0360: 29 FF 00     	and	#$ff
  1991 00:0363: A2 64 00     	ldx	#<$64
  1992                        	xref	~~~mul
  1993 00:0366: 22 xx xx xx  	jsl	~~~mul
  1994 00:036A: 85 01        	sta	<R0
  1995 00:036C: A5 11        	lda	<L45+i_0
  1996 00:036E: 29 FF 00     	and	#$ff
  1997 00:0371: 38           	sec
  1998 00:0372: E5 01        	sbc	<R0
  1999 00:0374: E2 20        	sep	#$20
  2000                        	longa	off
  2001 00:0376: 85 11        	sta	<L45+i_0
  2002 00:0378: C2 20        	rep	#$20
  2003                        	longa	on
  2004                        ;        }
  2005                        ;
  2006                        ;        ii = i / 10;
  2007                        L10012:
  2008 00:037A: A5 11        	lda	<L45+i_0
  2009 00:037C: 29 FF 00     	and	#$ff
  2010 00:037F: A2 0A 00     	ldx	#<$a
  2011                        	xref	~~~div
  2012 00:0382: 22 xx xx xx  	jsl	~~~div
  2013 00:0386: E2 20        	sep	#$20
  2014                        	longa	off
  2015 00:0388: 85 0D        	sta	<L46+ii_1
  2016 00:038A: C2 20        	rep	#$20
  2017                        	longa	on
  2018                        ;        mcurses_putc (ii + '0');
  2019 00:038C: A5 0D        	lda	<L46+ii_1
  2020 00:038E: 29 FF 00     	and	#$ff
  2021 00:0391: 18           	clc
  2022 00:0392: 69 30 00     	adc	#$30
  2023 00:0395: 48           	pha
  2024 00:0396: 22 xx xx xx  	jsl	~~mcurses_putc
  2025                        ;        i -= 10 * ii;
  2026 00:039A: A5 0D        	lda	<L46+ii_1
  2027 00:039C: 29 FF 00     	and	#$ff
  2028 00:039F: 85 01        	sta	<R0
  2029 00:03A1: 0A           	asl	A
  2030 00:03A2: 0A           	asl	A
  2031 00:03A3: 65 01        	adc	<R0
  Tue Jan 26 2021 17:07                                                Page 46


  2032 00:03A5: 0A           	asl	A
  2033 00:03A6: 85 01        	sta	<R0
  2034 00:03A8: A5 11        	lda	<L45+i_0
  2035 00:03AA: 29 FF 00     	and	#$ff
  2036 00:03AD: 38           	sec
  2037 00:03AE: E5 01        	sbc	<R0
  2038 00:03B0: E2 20        	sep	#$20
  2039                        	longa	off
  2040 00:03B2: 85 11        	sta	<L45+i_0
  2041 00:03B4: C2 20        	rep	#$20
  2042                        	longa	on
  2043                        ;    }
  2044                        ;
  2045                        ;    mcurses_putc (i + '0');
  2046                        L10011:
  2047 00:03B6: A5 11        	lda	<L45+i_0
  2048 00:03B8: 29 FF 00     	and	#$ff
  2049 00:03BB: 18           	clc
  2050 00:03BC: 69 30 00     	adc	#$30
  2051 00:03BF: 48           	pha
  2052 00:03C0: 22 xx xx xx  	jsl	~~mcurses_putc
  2053                        ;}
  2054 00:03C4: A5 0F        	lda	<L45+2
  2055 00:03C6: 85 11        	sta	<L45+2+2
  2056 00:03C8: A5 0E        	lda	<L45+1
  2057 00:03CA: 85 10        	sta	<L45+1+2
  2058 00:03CC: 2B           	pld
  2059 00:03CD: 3B           	tsc
  2060 00:03CE: 18           	clc
  2061 00:03CF: 69 0F 00     	adc	#L45+2
  2062 00:03D2: 1B           	tcs
  2063 00:03D3: 6B           	rtl
  2064             0000000D   L45	equ	13
  2065             0000000D   L46	equ	13
  2066                        	ends
  2067                        	efunc
  2068                        ;
  2069                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2070                        ; * INTERN: addch or insch a character
  2071                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2072                        ; */
  2073                        ;#define CHARSET_G0      0
  2074                        ;#define CHARSET_G1      1
  2075                        ;
  2076                        ;static void
  2077                        ;mcurses_addch_or_insch (uint_fast8_t ch, uint_fas
                    t8_t insert)
  2078                        ;{
  2079                        	code
  2080                        	func
  2081                        ~~mcurses_addch_or_insch:
  2082                        	longa	on
  2083                        	longi	on
  2084 00:03D4: 3B           	tsc
  Tue Jan 26 2021 17:07                                                Page 47


  2085 00:03D5: 38           	sec
  2086 00:03D6: E9 08 00     	sbc	#L50
  2087 00:03D9: 1B           	tcs
  2088 00:03DA: 0B           	phd
  2089 00:03DB: 5B           	tcd
  2090             00000004   ch_0	set	4
  2091             00000006   insert_0	set	6
  2092                        ;    static uint_fast8_t  charset = 0xff;
  2093                        ;    static uint_fast8_t  insert_mode = FALSE;
  2094                        ;
  2095                        ;    if (ch >= 0x80 && ch <= 0x9F)
  2096                        ;    {
  2097 00:03DC: E2 20        	sep	#$20
  2098                        	longa	off
  2099 00:03DE: A5 0C        	lda	<L50+ch_0
  2100 00:03E0: C9 80        	cmp	#<$80
  2101 00:03E2: C2 20        	rep	#$20
  2102                        	longa	on
  2103 00:03E4: 90 36        	bcc	L10013
  2104 00:03E6: E2 20        	sep	#$20
  2105                        	longa	off
  2106 00:03E8: A9 9F        	lda	#$9f
  2107 00:03EA: C5 0C        	cmp	<L50+ch_0
  2108 00:03EC: C2 20        	rep	#$20
  2109                        	longa	on
  2110 00:03EE: 90 2C        	bcc	L10013
  2111                        ;        if (charset != CHARSET_G1)
  2112                        ;        {
  2113 00:03F0: E2 20        	sep	#$20
  2114                        	longa	off
  2115 00:03F2: AD xx xx     	lda	|L52
  2116 00:03F5: C9 01        	cmp	#<$1
  2117 00:03F7: C2 20        	rep	#$20
  2118                        	longa	on
  2119 00:03F9: F0 10        	beq	L10014
  2120                        ;            mcurses_putc ('\016');               
                                                   // switch to G1 set
  2121 00:03FB: F4 0E 00     	pea	#<$e
  2122 00:03FE: 22 xx xx xx  	jsl	~~mcurses_putc
  2123                        ;            charset = CHARSET_G1;
  2124 00:0402: E2 20        	sep	#$20
  2125                        	longa	off
  2126 00:0404: A9 01        	lda	#$1
  2127 00:0406: 8D xx xx     	sta	|L52
  2128 00:0409: C2 20        	rep	#$20
  2129                        	longa	on
  2130                        ;        }
  2131                        ;        ch -= 0x20;                              
                                                   // subtract offset to G1 char
                    acters
  2132                        L10014:
  2133 00:040B: A5 0C        	lda	<L50+ch_0
  2134 00:040D: 29 FF 00     	and	#$ff
  2135 00:0410: 18           	clc
  2136 00:0411: 69 E0 FF     	adc	#$ffe0
  2137 00:0414: E2 20        	sep	#$20
  2138                        	longa	off
  2139 00:0416: 85 0C        	sta	<L50+ch_0
  Tue Jan 26 2021 17:07                                                Page 48


  2140 00:0418: C2 20        	rep	#$20
  2141                        	longa	on
  2142                        ;    }
  2143                        ;    else
  2144 00:041A: 80 16        	bra	L10015
  2145                        L10013:
  2146                        ;    {
  2147                        ;        if (charset != CHARSET_G0)
  2148                        ;        {
  2149 00:041C: AD xx xx     	lda	|L52
  2150 00:041F: 29 FF 00     	and	#$ff
  2151 00:0422: F0 0E        	beq	L10015
  2152                        ;            mcurses_putc ('\017');               
                                                   // switch to G0 set
  2153 00:0424: F4 0F 00     	pea	#<$f
  2154 00:0427: 22 xx xx xx  	jsl	~~mcurses_putc
  2155                        ;            charset = CHARSET_G0;
  2156 00:042B: E2 20        	sep	#$20
  2157                        	longa	off
  2158 00:042D: 9C xx xx     	stz	|L52
  2159 00:0430: C2 20        	rep	#$20
  2160                        	longa	on
  2161                        ;        }
  2162                        ;    }
  2163                        L10015:
  2164                        ;
  2165                        ;    if (insert)
  2166                        ;    {
  2167 00:0432: A5 0E        	lda	<L50+insert_0
  2168 00:0434: 29 FF 00     	and	#$ff
  2169 00:0437: F0 1D        	beq	L10017
  2170                        ;        if (! insert_mode)
  2171                        ;        {
  2172 00:0439: AD xx xx     	lda	|L53
  2173 00:043C: 29 FF 00     	and	#$ff
  2174 00:043F: D0 2E        	bne	L10019
  2175                        ;            mcurses_puts_P (SEQ_INSERT_MODE);
  2176 00:0441: F4 xx xx     	pea	#^L1
  2177 00:0444: F4 xx xx     	pea	#<L1
  2178 00:0447: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2179                        ;            insert_mode = TRUE;
  2180 00:044B: E2 20        	sep	#$20
  2181                        	longa	off
  2182 00:044D: A9 01        	lda	#$1
  2183 00:044F: 8D xx xx     	sta	|L53
  2184 00:0452: C2 20        	rep	#$20
  2185                        	longa	on
  2186                        ;        }
  2187                        ;    }
  2188                        ;    else
  2189 00:0454: 80 19        	bra	L10019
  2190                        L10017:
  2191                        ;    {
  2192                        ;        if (insert_mode)
  2193                        ;        {
  2194 00:0456: AD xx xx     	lda	|L53
  2195 00:0459: 29 FF 00     	and	#$ff
  2196 00:045C: F0 11        	beq	L10019
  Tue Jan 26 2021 17:07                                                Page 49


  2197                        ;            mcurses_puts_P (SEQ_REPLACE_MODE);
  2198 00:045E: F4 xx xx     	pea	#^L1+5
  2199 00:0461: F4 xx xx     	pea	#<L1+5
  2200 00:0464: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2201                        ;            insert_mode = FALSE;
  2202 00:0468: E2 20        	sep	#$20
  2203                        	longa	off
  2204 00:046A: 9C xx xx     	stz	|L53
  2205 00:046D: C2 20        	rep	#$20
  2206                        	longa	on
  2207                        ;        }
  2208                        ;    }
  2209                        L10019:
  2210                        ;
  2211                        ;    mcurses_putc (ch);
  2212 00:046F: D4 0C        	pei	<L50+ch_0
  2213 00:0471: 22 xx xx xx  	jsl	~~mcurses_putc
  2214                        ;    mcurses_curx++;
  2215 00:0475: E2 20        	sep	#$20
  2216                        	longa	off
  2217 00:0477: EE xx xx     	inc	|~~mcurses_curx
  2218 00:047A: C2 20        	rep	#$20
  2219                        	longa	on
  2220                        ;}
  2221 00:047C: A5 0A        	lda	<L50+2
  2222 00:047E: 85 0E        	sta	<L50+2+4
  2223 00:0480: A5 09        	lda	<L50+1
  2224 00:0482: 85 0D        	sta	<L50+1+4
  2225 00:0484: 2B           	pld
  2226 00:0485: 3B           	tsc
  2227 00:0486: 18           	clc
  2228 00:0487: 69 0C 00     	adc	#L50+4
  2229 00:048A: 1B           	tcs
  2230 00:048B: 6B           	rtl
  2231             00000008   L50	equ	8
  2232             00000009   L51	equ	9
  2233                        	ends
  2234                        	efunc
  2235                        	data
  2236                        L52:
  2237 00:0005: FF           	db	$FF
  2238 00:0006:              	ends
  2239                        	data
  2240                        L53:
  2241 00:0006: 00           	db	$0
  2242 00:0007:              	ends
  2243                        	data
  2244                        L1:
  2245 00:0007: 1B 5B 34 68  	db	$1B,$5B,$34,$68,$00,$1B,$5B,$34,$6C,$00
       00:000B: 00 1B 5B 34 
       00:000F: 6C 00 
  2246 00:0011:              	ends
  2247                        ;
  2248                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2249                        ; * INTERN: set scrolling region (raw)
  2250                        ; *-----------------------------------------------
  Tue Jan 26 2021 17:07                                                Page 50


                    ------------------------------------------------------------
                    ----------------------------------------
  2251                        ; */
  2252                        ;static void
  2253                        ;mysetscrreg (uint_fast8_t top, uint_fast8_t botto
                    m)
  2254                        ;{
  2255                        	code
  2256                        	func
  2257                        ~~mysetscrreg:
  2258                        	longa	on
  2259                        	longi	on
  2260 00:048C: 3B           	tsc
  2261 00:048D: 38           	sec
  2262 00:048E: E9 04 00     	sbc	#L63
  2263 00:0491: 1B           	tcs
  2264 00:0492: 0B           	phd
  2265 00:0493: 5B           	tcd
  2266             00000004   top_0	set	4
  2267             00000006   bottom_0	set	6
  2268                        ;    if (top == bottom)
  2269                        ;    {
  2270 00:0494: E2 20        	sep	#$20
  2271                        	longa	off
  2272 00:0496: A5 08        	lda	<L63+top_0
  2273 00:0498: C5 0A        	cmp	<L63+bottom_0
  2274 00:049A: C2 20        	rep	#$20
  2275                        	longa	on
  2276 00:049C: D0 0C        	bne	L10021
  2277                        ;        mcurses_puts_P (SEQ_RESET_SCRREG);       
                                                   // reset scrolling region
  2278 00:049E: F4 xx xx     	pea	#^L62
  2279 00:04A1: F4 xx xx     	pea	#<L62
  2280 00:04A4: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2281                        ;    }
  2282                        ;    else
  2283 00:04A8: 80 2E        	bra	L66
  2284                        L10021:
  2285                        ;    {
  2286                        ;        mcurses_puts_P (SEQ_CSI);
  2287 00:04AA: F4 xx xx     	pea	#^L62+4
  2288 00:04AD: F4 xx xx     	pea	#<L62+4
  2289 00:04B0: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2290                        ;        mcurses_puti (top + 1);
  2291 00:04B4: A5 08        	lda	<L63+top_0
  2292 00:04B6: 29 FF 00     	and	#$ff
  2293 00:04B9: 1A           	ina
  2294 00:04BA: 48           	pha
  2295 00:04BB: 22 xx xx xx  	jsl	~~mcurses_puti
  2296                        ;        mcurses_putc (';');
  2297 00:04BF: F4 3B 00     	pea	#<$3b
  2298 00:04C2: 22 xx xx xx  	jsl	~~mcurses_putc
  2299                        ;        mcurses_puti (bottom + 1);
  2300 00:04C6: A5 0A        	lda	<L63+bottom_0
  2301 00:04C8: 29 FF 00     	and	#$ff
  2302 00:04CB: 1A           	ina
  2303 00:04CC: 48           	pha
  2304 00:04CD: 22 xx xx xx  	jsl	~~mcurses_puti
  Tue Jan 26 2021 17:07                                                Page 51


  2305                        ;        mcurses_putc ('r');
  2306 00:04D1: F4 72 00     	pea	#<$72
  2307 00:04D4: 22 xx xx xx  	jsl	~~mcurses_putc
  2308                        ;    }
  2309                        ;}
  2310                        L66:
  2311 00:04D8: A5 06        	lda	<L63+2
  2312 00:04DA: 85 0A        	sta	<L63+2+4
  2313 00:04DC: A5 05        	lda	<L63+1
  2314 00:04DE: 85 09        	sta	<L63+1+4
  2315 00:04E0: 2B           	pld
  2316 00:04E1: 3B           	tsc
  2317 00:04E2: 18           	clc
  2318 00:04E3: 69 08 00     	adc	#L63+4
  2319 00:04E6: 1B           	tcs
  2320 00:04E7: 6B           	rtl
  2321             00000004   L63	equ	4
  2322             00000005   L64	equ	5
  2323                        	ends
  2324                        	efunc
  2325                        	data
  2326                        L62:
  2327 00:0011: 1B 5B 72 00  	db	$1B,$5B,$72,$00,$1B,$5B,$00
       00:0015: 1B 5B 00 
  2328 00:0018:              	ends
  2329                        ;
  2330                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2331                        ; * move cursor (raw)
  2332                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2333                        ; */
  2334                        ;static void
  2335                        ;mymove (uint_fast8_t y, uint_fast8_t x)
  2336                        ;{
  2337                        	code
  2338                        	func
  2339                        ~~mymove:
  2340                        	longa	on
  2341                        	longi	on
  2342 00:04E8: 3B           	tsc
  2343 00:04E9: 38           	sec
  2344 00:04EA: E9 04 00     	sbc	#L68
  2345 00:04ED: 1B           	tcs
  2346 00:04EE: 0B           	phd
  2347 00:04EF: 5B           	tcd
  2348             00000004   y_0	set	4
  2349             00000006   x_0	set	6
  2350                        ;    mcurses_puts_P (SEQ_CSI);
  2351 00:04F0: F4 xx xx     	pea	#^L67
  2352 00:04F3: F4 xx xx     	pea	#<L67
  2353 00:04F6: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2354                        ;    mcurses_puti (y + 1);
  2355 00:04FA: A5 08        	lda	<L68+y_0
  2356 00:04FC: 29 FF 00     	and	#$ff
  2357 00:04FF: 1A           	ina
  Tue Jan 26 2021 17:07                                                Page 52


  2358 00:0500: 48           	pha
  2359 00:0501: 22 xx xx xx  	jsl	~~mcurses_puti
  2360                        ;    mcurses_putc (';');
  2361 00:0505: F4 3B 00     	pea	#<$3b
  2362 00:0508: 22 xx xx xx  	jsl	~~mcurses_putc
  2363                        ;    mcurses_puti (x + 1);
  2364 00:050C: A5 0A        	lda	<L68+x_0
  2365 00:050E: 29 FF 00     	and	#$ff
  2366 00:0511: 1A           	ina
  2367 00:0512: 48           	pha
  2368 00:0513: 22 xx xx xx  	jsl	~~mcurses_puti
  2369                        ;    mcurses_putc ('H');
  2370 00:0517: F4 48 00     	pea	#<$48
  2371 00:051A: 22 xx xx xx  	jsl	~~mcurses_putc
  2372                        ;}
  2373 00:051E: A5 06        	lda	<L68+2
  2374 00:0520: 85 0A        	sta	<L68+2+4
  2375 00:0522: A5 05        	lda	<L68+1
  2376 00:0524: 85 09        	sta	<L68+1+4
  2377 00:0526: 2B           	pld
  2378 00:0527: 3B           	tsc
  2379 00:0528: 18           	clc
  2380 00:0529: 69 08 00     	adc	#L68+4
  2381 00:052C: 1B           	tcs
  2382 00:052D: 6B           	rtl
  2383             00000004   L68	equ	4
  2384             00000005   L69	equ	5
  2385                        	ends
  2386                        	efunc
  2387                        	data
  2388                        L67:
  2389 00:0018: 1B 5B 00     	db	$1B,$5B,$00
  2390 00:001B:              	ends
  2391                        ;
  2392                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2393                        ; * MCURSES: initialize
  2394                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2395                        ; */
  2396                        ;uint_fast8_t
  2397                        ;initscr (void)
  2398                        ;{
  2399                        	code
  2400                        	xdef	~~initscr
  2401                        	func
  2402                        ~~initscr:
  2403                        	longa	on
  2404                        	longi	on
  2405 00:052E: 3B           	tsc
  2406 00:052F: 38           	sec
  2407 00:0530: E9 01 00     	sbc	#L72
  2408 00:0533: 1B           	tcs
  2409 00:0534: 0B           	phd
  2410 00:0535: 5B           	tcd
  2411                        ;    uint_fast8_t rtc;
  Tue Jan 26 2021 17:07                                                Page 53


  2412                        ;
  2413                        ;    if (mcurses_phyio_init ())
  2414             00000000   rtc_1	set	0
  2415                        ;    {
  2416 00:0536: 22 xx xx xx  	jsl	~~mcurses_phyio_init
  2417 00:053A: 29 FF 00     	and	#$ff
  2418 00:053D: F0 2F        	beq	L10023
  2419                        ;        mcurses_puts_P (SEQ_LOAD_G1);            
                                                       // load graphic charset i
                    nto G1
  2420 00:053F: F4 xx xx     	pea	#^L71
  2421 00:0542: F4 xx xx     	pea	#<L71
  2422 00:0545: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2423                        ;        attrset (A_NORMAL);
  2424 00:0549: F4 00 00     	pea	#^$0
  2425 00:054C: F4 00 00     	pea	#<$0
  2426 00:054F: 22 xx xx xx  	jsl	~~attrset
  2427                        ;        clear ();
  2428 00:0553: 22 xx xx xx  	jsl	~~clear
  2429                        ;        move (0, 0);
  2430 00:0557: F4 00 00     	pea	#<$0
  2431 00:055A: F4 00 00     	pea	#<$0
  2432 00:055D: 22 xx xx xx  	jsl	~~move
  2433                        ;        mcurses_is_up = 1;
  2434 00:0561: E2 20        	sep	#$20
  2435                        	longa	off
  2436 00:0563: A9 01        	lda	#$1
  2437 00:0565: 8D xx xx     	sta	|~~mcurses_is_up
  2438                        ;        rtc = OK;
  2439 00:0568: 64 01        	stz	<L73+rtc_1
  2440 00:056A: C2 20        	rep	#$20
  2441                        	longa	on
  2442                        ;    }
  2443                        ;    else
  2444 00:056C: 80 08        	bra	L10024
  2445                        L10023:
  2446                        ;    {
  2447                        ;        rtc = ERR;
  2448 00:056E: E2 20        	sep	#$20
  2449                        	longa	off
  2450 00:0570: A9 FF        	lda	#$ff
  2451 00:0572: 85 01        	sta	<L73+rtc_1
  2452 00:0574: C2 20        	rep	#$20
  2453                        	longa	on
  2454                        ;    }
  2455                        L10024:
  2456                        ;    return rtc;
  2457 00:0576: A5 01        	lda	<L73+rtc_1
  2458 00:0578: 29 FF 00     	and	#$ff
  2459 00:057B: A8           	tay
  2460 00:057C: 2B           	pld
  2461 00:057D: 3B           	tsc
  2462 00:057E: 18           	clc
  2463 00:057F: 69 01 00     	adc	#L72
  2464 00:0582: 1B           	tcs
  2465 00:0583: 98           	tya
  2466 00:0584: 6B           	rtl
  2467                        ;}
  Tue Jan 26 2021 17:07                                                Page 54


  2468             00000001   L72	equ	1
  2469             00000001   L73	equ	1
  2470                        	ends
  2471                        	efunc
  2472                        	data
  2473                        L71:
  2474 00:001B: 1B 29 30 00  	db	$1B,$29,$30,$00
  2475 00:001F:              	ends
  2476                        ;
  2477                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2478                        ; * MCURSES: add character
  2479                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2480                        ; */
  2481                        ;void
  2482                        ;addch (uint_fast8_t ch)
  2483                        ;{
  2484                        	code
  2485                        	xdef	~~addch
  2486                        	func
  2487                        ~~addch:
  2488                        	longa	on
  2489                        	longi	on
  2490 00:0585: 3B           	tsc
  2491 00:0586: 38           	sec
  2492 00:0587: E9 00 00     	sbc	#L77
  2493 00:058A: 1B           	tcs
  2494 00:058B: 0B           	phd
  2495 00:058C: 5B           	tcd
  2496             00000004   ch_0	set	4
  2497                        ;    mcurses_addch_or_insch (ch, FALSE);
  2498 00:058D: F4 00 00     	pea	#<$0
  2499 00:0590: D4 04        	pei	<L77+ch_0
  2500 00:0592: 22 xx xx xx  	jsl	~~mcurses_addch_or_insch
  2501                        ;}
  2502 00:0596: A5 02        	lda	<L77+2
  2503 00:0598: 85 04        	sta	<L77+2+2
  2504 00:059A: A5 01        	lda	<L77+1
  2505 00:059C: 85 03        	sta	<L77+1+2
  2506 00:059E: 2B           	pld
  2507 00:059F: 3B           	tsc
  2508 00:05A0: 18           	clc
  2509 00:05A1: 69 02 00     	adc	#L77+2
  2510 00:05A4: 1B           	tcs
  2511 00:05A5: 6B           	rtl
  2512             00000000   L77	equ	0
  2513             00000001   L78	equ	1
  2514                        	ends
  2515                        	efunc
  2516                        ;
  2517                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2518                        ; * MCURSES: add string
  2519                        ; *-----------------------------------------------
  Tue Jan 26 2021 17:07                                                Page 55


                    ------------------------------------------------------------
                    ----------------------------------------
  2520                        ; */
  2521                        ;void
  2522                        ;addstr (const char * str)
  2523                        ;{
  2524                        	code
  2525                        	xdef	~~addstr
  2526                        	func
  2527                        ~~addstr:
  2528                        	longa	on
  2529                        	longi	on
  2530 00:05A6: 3B           	tsc
  2531 00:05A7: 38           	sec
  2532 00:05A8: E9 04 00     	sbc	#L80
  2533 00:05AB: 1B           	tcs
  2534 00:05AC: 0B           	phd
  2535 00:05AD: 5B           	tcd
  2536             00000004   str_0	set	4
  2537                        ;    while (*str)
  2538 00:05AE: 80 18        	bra	L10025
  2539                        L20003:
  2540                        ;    {
  2541                        ;        mcurses_addch_or_insch (*str++, FALSE);
  2542 00:05B0: F4 00 00     	pea	#<$0
  2543 00:05B3: A5 08        	lda	<L80+str_0
  2544 00:05B5: 85 01        	sta	<R0
  2545 00:05B7: A5 0A        	lda	<L80+str_0+2
  2546 00:05B9: 85 03        	sta	<R0+2
  2547 00:05BB: E6 08        	inc	<L80+str_0
  2548 00:05BD: D0 02        	bne	L83
  2549 00:05BF: E6 0A        	inc	<L80+str_0+2
  2550                        L83:
  2551 00:05C1: A7 01        	lda	[<R0]
  2552 00:05C3: 48           	pha
  2553 00:05C4: 22 xx xx xx  	jsl	~~mcurses_addch_or_insch
  2554                        ;    }
  2555                        L10025:
  2556 00:05C8: A7 08        	lda	[<L80+str_0]
  2557 00:05CA: 29 FF 00     	and	#$ff
  2558 00:05CD: D0 E1        	bne	L20003
  2559                        ;}
  2560 00:05CF: A5 06        	lda	<L80+2
  2561 00:05D1: 85 0A        	sta	<L80+2+4
  2562 00:05D3: A5 05        	lda	<L80+1
  2563 00:05D5: 85 09        	sta	<L80+1+4
  2564 00:05D7: 2B           	pld
  2565 00:05D8: 3B           	tsc
  2566 00:05D9: 18           	clc
  2567 00:05DA: 69 08 00     	adc	#L80+4
  2568 00:05DD: 1B           	tcs
  2569 00:05DE: 6B           	rtl
  2570             00000004   L80	equ	4
  2571             00000005   L81	equ	5
  2572                        	ends
  2573                        	efunc
  2574                        ;
  2575                        ;/*-----------------------------------------------
  Tue Jan 26 2021 17:07                                                Page 56


                    ------------------------------------------------------------
                    ----------------------------------------
  2576                        ; * MCURSES: add string
  2577                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2578                        ; */
  2579                        ;void
  2580                        ;addstr_P (const char * str)
  2581                        ;{
  2582                        	code
  2583                        	xdef	~~addstr_P
  2584                        	func
  2585                        ~~addstr_P:
  2586                        	longa	on
  2587                        	longi	on
  2588 00:05DF: 3B           	tsc
  2589 00:05E0: 38           	sec
  2590 00:05E1: E9 01 00     	sbc	#L85
  2591 00:05E4: 1B           	tcs
  2592 00:05E5: 0B           	phd
  2593 00:05E6: 5B           	tcd
  2594             00000004   str_0	set	4
  2595                        ;    uint_fast8_t ch;
  2596                        ;
  2597                        ;    while ((ch = pgm_read_byte(str)) != '\0')
  2598             00000000   ch_1	set	0
  2599 00:05E7: 80 0F        	bra	L10027
  2600                        L20005:
  2601                        ;    {
  2602                        ;        mcurses_addch_or_insch (ch, FALSE);
  2603 00:05E9: F4 00 00     	pea	#<$0
  2604 00:05EC: D4 01        	pei	<L86+ch_1
  2605 00:05EE: 22 xx xx xx  	jsl	~~mcurses_addch_or_insch
  2606                        ;        str++;
  2607 00:05F2: E6 05        	inc	<L85+str_0
  2608 00:05F4: D0 02        	bne	L10027
  2609 00:05F6: E6 07        	inc	<L85+str_0+2
  2610                        ;    }
  2611                        L10027:
  2612 00:05F8: E2 20        	sep	#$20
  2613                        	longa	off
  2614 00:05FA: A7 05        	lda	[<L85+str_0]
  2615 00:05FC: 85 01        	sta	<L86+ch_1
  2616 00:05FE: C2 20        	rep	#$20
  2617                        	longa	on
  2618 00:0600: A5 01        	lda	<L86+ch_1
  2619 00:0602: 29 FF 00     	and	#$ff
  2620 00:0605: D0 E2        	bne	L20005
  2621                        ;}
  2622 00:0607: A5 03        	lda	<L85+2
  2623 00:0609: 85 07        	sta	<L85+2+4
  2624 00:060B: A5 02        	lda	<L85+1
  2625 00:060D: 85 06        	sta	<L85+1+4
  2626 00:060F: 2B           	pld
  2627 00:0610: 3B           	tsc
  2628 00:0611: 18           	clc
  2629 00:0612: 69 05 00     	adc	#L85+4
  Tue Jan 26 2021 17:07                                                Page 57


  2630 00:0615: 1B           	tcs
  2631 00:0616: 6B           	rtl
  2632             00000001   L85	equ	1
  2633             00000001   L86	equ	1
  2634                        	ends
  2635                        	efunc
  2636                        ;
  2637                        ;#if defined(unix) || defined(STM32F4XX) || define
                    d(STM32F10X)
  2638                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2639                        ; *  MCURSES: add formatted string (va_list)
  2640                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2641                        ; */
  2642                        ;void
  2643                        ;vprintw (const char * fmt, va_list ap)
  2644                        ;{
  2645                        	code
  2646                        	xdef	~~vprintw
  2647                        	func
  2648                        ~~vprintw:
  2649                        	longa	on
  2650                        	longi	on
  2651 00:0617: 3B           	tsc
  2652 00:0618: 38           	sec
  2653 00:0619: E9 08 00     	sbc	#L90
  2654 00:061C: 1B           	tcs
  2655 00:061D: 0B           	phd
  2656 00:061E: 5B           	tcd
  2657             00000004   fmt_0	set	4
  2658             00000008   ap_0	set	8
  2659                        ;    static char str_buf[256];
  2660                        ;
  2661                        ;    (void) vsprintf ((char *) str_buf, fmt, ap);
  2662 00:061F: D4 12        	pei	<L90+ap_0+2
  2663 00:0621: D4 10        	pei	<L90+ap_0
  2664 00:0623: D4 0E        	pei	<L90+fmt_0+2
  2665 00:0625: D4 0C        	pei	<L90+fmt_0
  2666 00:0627: A9 xx xx     	lda	#<L10029
  2667 00:062A: 85 01        	sta	<R0
  2668                        	xref	_BEG_DATA
  2669 00:062C: A9 xx xx     	lda	#_BEG_DATA>>16
  2670 00:062F: 48           	pha
  2671 00:0630: D4 01        	pei	<R0
  2672 00:0632: 22 xx xx xx  	jsl	~~vsprintf
  2673                        ;    (void) addstr (str_buf);
  2674 00:0636: A9 xx xx     	lda	#<L10029
  2675 00:0639: 85 01        	sta	<R0
  2676                        	xref	_BEG_DATA
  2677 00:063B: A9 xx xx     	lda	#_BEG_DATA>>16
  2678 00:063E: 48           	pha
  2679 00:063F: D4 01        	pei	<R0
  2680 00:0641: 22 xx xx xx  	jsl	~~addstr
  2681                        ;} /* vprintw (fmt, ap) */
  2682 00:0645: A5 0A        	lda	<L90+2
  Tue Jan 26 2021 17:07                                                Page 58


  2683 00:0647: 85 12        	sta	<L90+2+8
  2684 00:0649: A5 09        	lda	<L90+1
  2685 00:064B: 85 11        	sta	<L90+1+8
  2686 00:064D: 2B           	pld
  2687 00:064E: 3B           	tsc
  2688 00:064F: 18           	clc
  2689 00:0650: 69 10 00     	adc	#L90+8
  2690 00:0653: 1B           	tcs
  2691 00:0654: 6B           	rtl
  2692             00000008   L90	equ	8
  2693             00000009   L91	equ	9
  2694                        	ends
  2695                        	efunc
  2696                        	udata
  2697                        L10029:
  2698 00:0000:              	ds	256
  2699 00:0100:              	ends
  2700                        ;
  2701                        ;
  2702                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2703                        ; *  MCURSES: add formatted string (variable numbe
                    r of arguments)
  2704                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2705                        ; */
  2706                        ;void
  2707                        ;printw (const char * fmt, ...)
  2708                        ;{
  2709                        	code
  2710                        	xdef	~~printw
  2711                        	func
  2712                        ~~printw:
  2713                        	longa	on
  2714                        	longi	on
  2715 00:0655: 3B           	tsc
  2716 00:0656: 38           	sec
  2717 00:0657: E9 04 00     	sbc	#L93
  2718 00:065A: 1B           	tcs
  2719 00:065B: 0B           	phd
  2720 00:065C: 5B           	tcd
  2721             00000006   fmt_0	set	6
  2722                        ;    va_list ap;
  2723                        ;
  2724                        ;    va_start (ap, fmt);
  2725             00000000   ap_1	set	0
  2726 00:065D: 18           	clc
  2727 00:065E: 7B           	tdc
  2728 00:065F: 69 0E 00     	adc	#<L93+fmt_0+4
  2729 00:0662: 85 01        	sta	<L94+ap_1
  2730 00:0664: A9 00 00     	lda	#$0
  2731 00:0667: 85 03        	sta	<L94+ap_1+2
  2732                        ;    vprintw (fmt, ap);
  2733 00:0669: 48           	pha
  2734 00:066A: D4 01        	pei	<L94+ap_1
  2735 00:066C: D4 0C        	pei	<L93+fmt_0+2
  Tue Jan 26 2021 17:07                                                Page 59


  2736 00:066E: D4 0A        	pei	<L93+fmt_0
  2737 00:0670: 22 xx xx xx  	jsl	~~vprintw
  2738                        ;    va_end (ap);
  2739                        ;} /* printw (fmt, ...) */
  2740 00:0674: DA           	phx
  2741 00:0675: A6 08        	ldx	<L93+4
  2742 00:0677: A5 06        	lda	<L93+2
  2743 00:0679: 95 06        	sta	<L93+2,X
  2744 00:067B: A5 05        	lda	<L93+1
  2745 00:067D: 95 05        	sta	<L93+1,X
  2746 00:067F: 8A           	txa
  2747 00:0680: FA           	plx
  2748 00:0681: 2B           	pld
  2749 00:0682: 48           	pha
  2750 00:0683: 3B           	tsc
  2751 00:0684: 18           	clc
  2752 00:0685: 69 06 00     	adc	#L93+2
  2753 00:0688: 63 01        	adc	<1,s
  2754 00:068A: 1B           	tcs
  2755 00:068B: 6B           	rtl
  2756             00000004   L93	equ	4
  2757             00000001   L94	equ	1
  2758                        	ends
  2759                        	efunc
  2760                        ;
  2761                        ;#if defined(STM32F4XX)
  2762                        ;// (v)sprintf needs it
  2763                        ;caddr_t _sbrk(int increment)
  2764                        ;{
  2765                        ;    extern char end asm("end");
  2766                        ;    register char * pStack asm("sp");
  2767                        ;    static char *   s_pHeapEnd;
  2768                        ;
  2769                        ;    if (!s_pHeapEnd)
  2770                        ;    {
  2771                        ;        s_pHeapEnd = &end;
  2772                        ;    }
  2773                        ;
  2774                        ;    if (s_pHeapEnd + increment > pStack)
  2775                        ;    {
  2776                        ;        return (caddr_t) -1;
  2777                        ;    }
  2778                        ;
  2779                        ;    char * pOldHeapEnd = s_pHeapEnd;
  2780                        ;    s_pHeapEnd += increment;
  2781                        ;    return (caddr_t) pOldHeapEnd;
  2782                        ;}
  2783                        ;#endif
  2784                        ;#endif
  2785                        ;
  2786                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2787                        ; * MCURSES: set attribute(s)
  2788                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  2789                        ; */
  Tue Jan 26 2021 17:07                                                Page 60


  2790                        ;void
  2791                        ;attrset (uint_fast16_t attr)
  2792                        ;{
  2793                        	code
  2794                        	xdef	~~attrset
  2795                        	func
  2796                        ~~attrset:
  2797                        	longa	on
  2798                        	longi	on
  2799 00:068C: 3B           	tsc
  2800 00:068D: 38           	sec
  2801 00:068E: E9 09 00     	sbc	#L96
  2802 00:0691: 1B           	tcs
  2803 00:0692: 0B           	phd
  2804 00:0693: 5B           	tcd
  2805             00000004   attr_0	set	4
  2806                        ;    static uint_fast8_t mcurses_attr = 0xff;     
                                   // current attributes
  2807                        ;    uint_fast8_t        idx;
  2808                        ;
  2809                        ;    if (attr != mcurses_attr)
  2810             00000000   idx_1	set	0
  2811                        ;    {
  2812 00:0694: AD xx xx     	lda	|L98
  2813 00:0697: 29 FF 00     	and	#$ff
  2814 00:069A: 85 01        	sta	<R0
  2815 00:069C: 64 03        	stz	<R0+2
  2816 00:069E: A5 01        	lda	<R0
  2817 00:06A0: C5 0D        	cmp	<L96+attr_0
  2818 00:06A2: D0 04        	bne	L99
  2819 00:06A4: A5 03        	lda	<R0+2
  2820 00:06A6: C5 0F        	cmp	<L96+attr_0+2
  2821                        L99:
  2822 00:06A8: D0 03        	bne	*+5
  2823 00:06AA: 82 FB 00     	brl	L110
  2824                        ;        mcurses_puts_P (SEQ_ATTRSET);
  2825 00:06AD: F4 xx xx     	pea	#^L76
  2826 00:06B0: F4 xx xx     	pea	#<L76
  2827 00:06B3: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2828                        ;
  2829                        ;        idx = (attr & F_COLOR) >> 8;
  2830 00:06B7: A5 0D        	lda	<L96+attr_0
  2831 00:06B9: 29 00 0F     	and	#<$f00
  2832 00:06BC: 85 05        	sta	<R1
  2833 00:06BE: 64 07        	stz	<R1+2
  2834 00:06C0: D4 07        	pei	<R1+2
  2835 00:06C2: D4 05        	pei	<R1
  2836 00:06C4: A9 08 00     	lda	#$8
  2837                        	xref	~~~llsr
  2838 00:06C7: 22 xx xx xx  	jsl	~~~llsr
  2839 00:06CB: 85 01        	sta	<R0
  2840 00:06CD: 86 03        	stx	<R0+2
  2841 00:06CF: E2 20        	sep	#$20
  2842                        	longa	off
  2843 00:06D1: A5 01        	lda	<R0
  2844 00:06D3: 85 09        	sta	<L97+idx_1
  2845                        ;
  2846                        ;        if (idx >= 1 && idx <= 8)
  Tue Jan 26 2021 17:07                                                Page 61


  2847                        ;        {
  2848 00:06D5: C9 01        	cmp	#<$1
  2849 00:06D7: C2 20        	rep	#$20
  2850                        	longa	on
  2851 00:06D9: 90 22        	bcc	L10031
  2852 00:06DB: E2 20        	sep	#$20
  2853                        	longa	off
  2854 00:06DD: A9 08        	lda	#$8
  2855 00:06DF: C5 09        	cmp	<L97+idx_1
  2856 00:06E1: C2 20        	rep	#$20
  2857                        	longa	on
  2858 00:06E3: 90 18        	bcc	L10031
  2859                        ;            mcurses_puts_P (SEQ_ATTRSET_FCOLOR);
  2860 00:06E5: F4 xx xx     	pea	#^L76+4
  2861 00:06E8: F4 xx xx     	pea	#<L76+4
  2862 00:06EB: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2863                        ;            mcurses_putc (idx - 1 + '0');
  2864 00:06EF: A5 09        	lda	<L97+idx_1
  2865 00:06F1: 29 FF 00     	and	#$ff
  2866 00:06F4: 18           	clc
  2867 00:06F5: 69 2F 00     	adc	#$2f
  2868 00:06F8: 48           	pha
  2869 00:06F9: 22 xx xx xx  	jsl	~~mcurses_putc
  2870                        ;        }
  2871                        ;
  2872                        ;        idx = (attr & B_COLOR) >> 12;
  2873                        L10031:
  2874 00:06FD: A5 0D        	lda	<L96+attr_0
  2875 00:06FF: 29 00 F0     	and	#<$f000
  2876 00:0702: 85 05        	sta	<R1
  2877 00:0704: 64 07        	stz	<R1+2
  2878 00:0706: D4 07        	pei	<R1+2
  2879 00:0708: D4 05        	pei	<R1
  2880 00:070A: A9 0C 00     	lda	#$c
  2881                        	xref	~~~llsr
  2882 00:070D: 22 xx xx xx  	jsl	~~~llsr
  2883 00:0711: 85 01        	sta	<R0
  2884 00:0713: 86 03        	stx	<R0+2
  2885 00:0715: E2 20        	sep	#$20
  2886                        	longa	off
  2887 00:0717: A5 01        	lda	<R0
  2888 00:0719: 85 09        	sta	<L97+idx_1
  2889                        ;
  2890                        ;        if (idx >= 1 && idx <= 8)
  2891                        ;        {
  2892 00:071B: C9 01        	cmp	#<$1
  2893 00:071D: C2 20        	rep	#$20
  2894                        	longa	on
  2895 00:071F: 90 22        	bcc	L10032
  2896 00:0721: E2 20        	sep	#$20
  2897                        	longa	off
  2898 00:0723: A9 08        	lda	#$8
  2899 00:0725: C5 09        	cmp	<L97+idx_1
  2900 00:0727: C2 20        	rep	#$20
  2901                        	longa	on
  2902 00:0729: 90 18        	bcc	L10032
  2903                        ;            mcurses_puts_P (SEQ_ATTRSET_BCOLOR);
  2904 00:072B: F4 xx xx     	pea	#^L76+7
  Tue Jan 26 2021 17:07                                                Page 62


  2905 00:072E: F4 xx xx     	pea	#<L76+7
  2906 00:0731: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2907                        ;            mcurses_putc (idx - 1 + '0');
  2908 00:0735: A5 09        	lda	<L97+idx_1
  2909 00:0737: 29 FF 00     	and	#$ff
  2910 00:073A: 18           	clc
  2911 00:073B: 69 2F 00     	adc	#$2f
  2912 00:073E: 48           	pha
  2913 00:073F: 22 xx xx xx  	jsl	~~mcurses_putc
  2914                        ;        }
  2915                        ;
  2916                        ;        if (attr & A_REVERSE)
  2917                        L10032:
  2918                        ;        {
  2919 00:0743: A5 0D        	lda	<L96+attr_0
  2920 00:0745: 29 02 00     	and	#<$2
  2921 00:0748: F0 0A        	beq	L10033
  2922                        ;            mcurses_puts_P (SEQ_ATTRSET_REVERSE);
  2923 00:074A: F4 xx xx     	pea	#^L76+10
  2924 00:074D: F4 xx xx     	pea	#<L76+10
  2925 00:0750: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2926                        ;        }
  2927                        ;        if (attr & A_UNDERLINE)
  2928                        L10033:
  2929                        ;        {
  2930 00:0754: A5 0D        	lda	<L96+attr_0
  2931 00:0756: 29 01 00     	and	#<$1
  2932 00:0759: F0 0A        	beq	L10034
  2933                        ;            mcurses_puts_P (SEQ_ATTRSET_UNDERLINE
                    );
  2934 00:075B: F4 xx xx     	pea	#^L76+13
  2935 00:075E: F4 xx xx     	pea	#<L76+13
  2936 00:0761: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2937                        ;        }
  2938                        ;        if (attr & A_BLINK)
  2939                        L10034:
  2940                        ;        {
  2941 00:0765: A5 0D        	lda	<L96+attr_0
  2942 00:0767: 29 04 00     	and	#<$4
  2943 00:076A: F0 0A        	beq	L10035
  2944                        ;            mcurses_puts_P (SEQ_ATTRSET_BLINK);
  2945 00:076C: F4 xx xx     	pea	#^L76+16
  2946 00:076F: F4 xx xx     	pea	#<L76+16
  2947 00:0772: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2948                        ;        }
  2949                        ;        if (attr & A_BOLD)
  2950                        L10035:
  2951                        ;        {
  2952 00:0776: A5 0D        	lda	<L96+attr_0
  2953 00:0778: 29 08 00     	and	#<$8
  2954 00:077B: F0 0A        	beq	L10036
  2955                        ;            mcurses_puts_P (SEQ_ATTRSET_BOLD);
  2956 00:077D: F4 xx xx     	pea	#^L76+19
  2957 00:0780: F4 xx xx     	pea	#<L76+19
  2958 00:0783: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2959                        ;        }
  2960                        ;        if (attr & A_DIM)
  2961                        L10036:
  Tue Jan 26 2021 17:07                                                Page 63


  2962                        ;        {
  2963 00:0787: A5 0D        	lda	<L96+attr_0
  2964 00:0789: 29 10 00     	and	#<$10
  2965 00:078C: F0 0A        	beq	L10037
  2966                        ;            mcurses_puts_P (SEQ_ATTRSET_DIM);
  2967 00:078E: F4 xx xx     	pea	#^L76+22
  2968 00:0791: F4 xx xx     	pea	#<L76+22
  2969 00:0794: 22 xx xx xx  	jsl	~~mcurses_puts_P
  2970                        ;        }
  2971                        ;        mcurses_putc ('m');
  2972                        L10037:
  2973 00:0798: F4 6D 00     	pea	#<$6d
  2974 00:079B: 22 xx xx xx  	jsl	~~mcurses_putc
  2975                        ;        mcurses_attr = attr;
  2976 00:079F: E2 20        	sep	#$20
  2977                        	longa	off
  2978 00:07A1: A5 0D        	lda	<L96+attr_0
  2979 00:07A3: 8D xx xx     	sta	|L98
  2980 00:07A6: C2 20        	rep	#$20
  2981                        	longa	on
  2982                        ;    }
  2983                        ;}
  2984                        L110:
  2985 00:07A8: A5 0B        	lda	<L96+2
  2986 00:07AA: 85 0F        	sta	<L96+2+4
  2987 00:07AC: A5 0A        	lda	<L96+1
  2988 00:07AE: 85 0E        	sta	<L96+1+4
  2989 00:07B0: 2B           	pld
  2990 00:07B1: 3B           	tsc
  2991 00:07B2: 18           	clc
  2992 00:07B3: 69 0D 00     	adc	#L96+4
  2993 00:07B6: 1B           	tcs
  2994 00:07B7: 6B           	rtl
  2995             00000009   L96	equ	9
  2996             00000009   L97	equ	9
  2997                        	ends
  2998                        	efunc
  2999                        	data
  3000                        L98:
  3001 00:001F: FF           	db	$FF
  3002 00:0020:              	ends
  3003                        	data
  3004                        L76:
  3005 00:0020: 1B 5B 30 00  	db	$1B,$5B,$30,$00,$3B,$33,$00,$3B,$34,$00,
                    $3B,$37,$00,$3B,$34
       00:0024: 3B 33 00 3B 
       00:0028: 34 00 3B 37 
       00:002C: 00 3B 34 
  3006 00:002F: 00 3B 35 00  	db	$00,$3B,$35,$00,$3B,$31,$00,$3B,$32,$00
       00:0033: 3B 31 00 3B 
       00:0037: 32 00 
  3007 00:0039:              	ends
  3008                        ;
  3009                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3010                        ; * MCURSES: move cursor
  3011                        ; *-----------------------------------------------
  Tue Jan 26 2021 17:07                                                Page 64


                    ------------------------------------------------------------
                    ----------------------------------------
  3012                        ; */
  3013                        ;void
  3014                        ;move (uint_fast8_t y, uint_fast8_t x)
  3015                        ;{
  3016                        	code
  3017                        	xdef	~~move
  3018                        	func
  3019                        ~~move:
  3020                        	longa	on
  3021                        	longi	on
  3022 00:07B8: 3B           	tsc
  3023 00:07B9: 38           	sec
  3024 00:07BA: E9 00 00     	sbc	#L112
  3025 00:07BD: 1B           	tcs
  3026 00:07BE: 0B           	phd
  3027 00:07BF: 5B           	tcd
  3028             00000004   y_0	set	4
  3029             00000006   x_0	set	6
  3030                        ;    if (mcurses_cury != y || mcurses_curx != x)
  3031                        ;    {
  3032 00:07C0: E2 20        	sep	#$20
  3033                        	longa	off
  3034 00:07C2: AD xx xx     	lda	|~~mcurses_cury
  3035 00:07C5: C5 04        	cmp	<L112+y_0
  3036 00:07C7: C2 20        	rep	#$20
  3037                        	longa	on
  3038 00:07C9: D0 0B        	bne	L114
  3039 00:07CB: E2 20        	sep	#$20
  3040                        	longa	off
  3041 00:07CD: AD xx xx     	lda	|~~mcurses_curx
  3042 00:07D0: C5 06        	cmp	<L112+x_0
  3043 00:07D2: C2 20        	rep	#$20
  3044                        	longa	on
  3045 00:07D4: F0 16        	beq	L117
  3046                        L114:
  3047                        ;        mcurses_cury = y;
  3048 00:07D6: E2 20        	sep	#$20
  3049                        	longa	off
  3050 00:07D8: A5 04        	lda	<L112+y_0
  3051 00:07DA: 8D xx xx     	sta	|~~mcurses_cury
  3052                        ;        mcurses_curx = x;
  3053 00:07DD: A5 06        	lda	<L112+x_0
  3054 00:07DF: 8D xx xx     	sta	|~~mcurses_curx
  3055 00:07E2: C2 20        	rep	#$20
  3056                        	longa	on
  3057                        ;        mymove (y, x);
  3058 00:07E4: D4 06        	pei	<L112+x_0
  3059 00:07E6: D4 04        	pei	<L112+y_0
  3060 00:07E8: 22 xx xx xx  	jsl	~~mymove
  3061                        ;    }
  3062                        ;}
  3063                        L117:
  3064 00:07EC: A5 02        	lda	<L112+2
  3065 00:07EE: 85 06        	sta	<L112+2+4
  3066 00:07F0: A5 01        	lda	<L112+1
  3067 00:07F2: 85 05        	sta	<L112+1+4
  Tue Jan 26 2021 17:07                                                Page 65


  3068 00:07F4: 2B           	pld
  3069 00:07F5: 3B           	tsc
  3070 00:07F6: 18           	clc
  3071 00:07F7: 69 04 00     	adc	#L112+4
  3072 00:07FA: 1B           	tcs
  3073 00:07FB: 6B           	rtl
  3074             00000000   L112	equ	0
  3075             00000001   L113	equ	1
  3076                        	ends
  3077                        	efunc
  3078                        ;
  3079                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3080                        ; * MCURSES: delete line
  3081                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3082                        ; */
  3083                        ;void
  3084                        ;deleteln (void)
  3085                        ;{
  3086                        	code
  3087                        	xdef	~~deleteln
  3088                        	func
  3089                        ~~deleteln:
  3090                        	longa	on
  3091                        	longi	on
  3092                        ;    mysetscrreg (mcurses_scrl_start, mcurses_scrl
                    _end);                         // set scrolling region
  3093 00:07FC: AD xx xx     	lda	|~~mcurses_scrl_end
  3094 00:07FF: 48           	pha
  3095 00:0800: AD xx xx     	lda	|~~mcurses_scrl_start
  3096 00:0803: 48           	pha
  3097 00:0804: 22 xx xx xx  	jsl	~~mysetscrreg
  3098                        ;    mymove (mcurses_cury, 0);                    
                                                   // goto to current line
  3099 00:0808: F4 00 00     	pea	#<$0
  3100 00:080B: AD xx xx     	lda	|~~mcurses_cury
  3101 00:080E: 48           	pha
  3102 00:080F: 22 xx xx xx  	jsl	~~mymove
  3103                        ;    mcurses_puts_P (SEQ_DELETELINE);             
                                                   // delete line
  3104 00:0813: F4 xx xx     	pea	#^L111
  3105 00:0816: F4 xx xx     	pea	#<L111
  3106 00:0819: 22 xx xx xx  	jsl	~~mcurses_puts_P
  3107                        ;    mysetscrreg (0, 0);                          
                                                   // reset scrolling region
  3108 00:081D: F4 00 00     	pea	#<$0
  3109 00:0820: F4 00 00     	pea	#<$0
  3110 00:0823: 22 xx xx xx  	jsl	~~mysetscrreg
  3111                        ;    mymove (mcurses_cury, mcurses_curx);         
                                                   // restore position
  3112 00:0827: AD xx xx     	lda	|~~mcurses_curx
  3113 00:082A: 48           	pha
  3114 00:082B: AD xx xx     	lda	|~~mcurses_cury
  3115 00:082E: 48           	pha
  3116 00:082F: 22 xx xx xx  	jsl	~~mymove
  Tue Jan 26 2021 17:07                                                Page 66


  3117                        ;}
  3118 00:0833: 6B           	rtl
  3119             00000000   L118	equ	0
  3120             00000001   L119	equ	1
  3121                        	ends
  3122                        	efunc
  3123                        	data
  3124                        L111:
  3125 00:0039: 1B 5B 4D 00  	db	$1B,$5B,$4D,$00
  3126 00:003D:              	ends
  3127                        ;
  3128                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3129                        ; * MCURSES: insert line
  3130                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3131                        ; */
  3132                        ;void
  3133                        ;insertln (void)
  3134                        ;{
  3135                        	code
  3136                        	xdef	~~insertln
  3137                        	func
  3138                        ~~insertln:
  3139                        	longa	on
  3140                        	longi	on
  3141                        ;    mysetscrreg (mcurses_cury, mcurses_scrl_end);
                                                   // set scrolling region
  3142 00:0834: AD xx xx     	lda	|~~mcurses_scrl_end
  3143 00:0837: 48           	pha
  3144 00:0838: AD xx xx     	lda	|~~mcurses_cury
  3145 00:083B: 48           	pha
  3146 00:083C: 22 xx xx xx  	jsl	~~mysetscrreg
  3147                        ;    mymove (mcurses_cury, 0);                    
                                                   // goto to current line
  3148 00:0840: F4 00 00     	pea	#<$0
  3149 00:0843: AD xx xx     	lda	|~~mcurses_cury
  3150 00:0846: 48           	pha
  3151 00:0847: 22 xx xx xx  	jsl	~~mymove
  3152                        ;    mcurses_puts_P (SEQ_INSERTLINE);             
                                                   // insert line
  3153 00:084B: F4 xx xx     	pea	#^L121
  3154 00:084E: F4 xx xx     	pea	#<L121
  3155 00:0851: 22 xx xx xx  	jsl	~~mcurses_puts_P
  3156                        ;    mysetscrreg (0, 0);                          
                                                   // reset scrolling region
  3157 00:0855: F4 00 00     	pea	#<$0
  3158 00:0858: F4 00 00     	pea	#<$0
  3159 00:085B: 22 xx xx xx  	jsl	~~mysetscrreg
  3160                        ;    mymove (mcurses_cury, mcurses_curx);         
                                                   // restore position
  3161 00:085F: AD xx xx     	lda	|~~mcurses_curx
  3162 00:0862: 48           	pha
  3163 00:0863: AD xx xx     	lda	|~~mcurses_cury
  3164 00:0866: 48           	pha
  3165 00:0867: 22 xx xx xx  	jsl	~~mymove
  Tue Jan 26 2021 17:07                                                Page 67


  3166                        ;}
  3167 00:086B: 6B           	rtl
  3168             00000000   L122	equ	0
  3169             00000001   L123	equ	1
  3170                        	ends
  3171                        	efunc
  3172                        	data
  3173                        L121:
  3174 00:003D: 1B 5B 4C 00  	db	$1B,$5B,$4C,$00
  3175 00:0041:              	ends
  3176                        ;
  3177                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3178                        ; * MCURSES: scroll
  3179                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3180                        ; */
  3181                        ;void
  3182                        ;scroll (void)
  3183                        ;{
  3184                        	code
  3185                        	xdef	~~scroll
  3186                        	func
  3187                        ~~scroll:
  3188                        	longa	on
  3189                        	longi	on
  3190                        ;    mysetscrreg (mcurses_scrl_start, mcurses_scrl
                    _end);                         // set scrolling region
  3191 00:086C: AD xx xx     	lda	|~~mcurses_scrl_end
  3192 00:086F: 48           	pha
  3193 00:0870: AD xx xx     	lda	|~~mcurses_scrl_start
  3194 00:0873: 48           	pha
  3195 00:0874: 22 xx xx xx  	jsl	~~mysetscrreg
  3196                        ;    mymove (mcurses_scrl_end, 0);                
                                                   // goto to last line of scrol
                    ling region
  3197 00:0878: F4 00 00     	pea	#<$0
  3198 00:087B: AD xx xx     	lda	|~~mcurses_scrl_end
  3199 00:087E: 48           	pha
  3200 00:087F: 22 xx xx xx  	jsl	~~mymove
  3201                        ;    mcurses_puts_P (SEQ_NEXTLINE);               
                                                   // next line
  3202 00:0883: F4 xx xx     	pea	#^L125
  3203 00:0886: F4 xx xx     	pea	#<L125
  3204 00:0889: 22 xx xx xx  	jsl	~~mcurses_puts_P
  3205                        ;    mysetscrreg (0, 0);                          
                                                   // reset scrolling region
  3206 00:088D: F4 00 00     	pea	#<$0
  3207 00:0890: F4 00 00     	pea	#<$0
  3208 00:0893: 22 xx xx xx  	jsl	~~mysetscrreg
  3209                        ;    mymove (mcurses_cury, mcurses_curx);         
                                                   // restore position
  3210 00:0897: AD xx xx     	lda	|~~mcurses_curx
  3211 00:089A: 48           	pha
  3212 00:089B: AD xx xx     	lda	|~~mcurses_cury
  3213 00:089E: 48           	pha
  Tue Jan 26 2021 17:07                                                Page 68


  3214 00:089F: 22 xx xx xx  	jsl	~~mymove
  3215                        ;}
  3216 00:08A3: 6B           	rtl
  3217             00000000   L126	equ	0
  3218             00000001   L127	equ	1
  3219                        	ends
  3220                        	efunc
  3221                        	data
  3222                        L125:
  3223 00:0041: 1B 45 00     	db	$1B,$45,$00
  3224 00:0044:              	ends
  3225                        ;
  3226                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3227                        ; * MCURSES: clear
  3228                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3229                        ; */
  3230                        ;void
  3231                        ;clear (void)
  3232                        ;{
  3233                        	code
  3234                        	xdef	~~clear
  3235                        	func
  3236                        ~~clear:
  3237                        	longa	on
  3238                        	longi	on
  3239                        ;    mcurses_puts_P (SEQ_CLEAR);
  3240 00:08A4: F4 xx xx     	pea	#^L129
  3241 00:08A7: F4 xx xx     	pea	#<L129
  3242 00:08AA: 22 xx xx xx  	jsl	~~mcurses_puts_P
  3243                        ;}
  3244 00:08AE: 6B           	rtl
  3245             00000000   L130	equ	0
  3246             00000001   L131	equ	1
  3247                        	ends
  3248                        	efunc
  3249                        	data
  3250                        L129:
  3251 00:0044: 1B 5B 32 4A  	db	$1B,$5B,$32,$4A,$00
       00:0048: 00 
  3252 00:0049:              	ends
  3253                        ;
  3254                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3255                        ; * MCURSES: clear to bottom of screen
  3256                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3257                        ; */
  3258                        ;void
  3259                        ;clrtobot (void)
  3260                        ;{
  3261                        	code
  3262                        	xdef	~~clrtobot
  Tue Jan 26 2021 17:07                                                Page 69


  3263                        	func
  3264                        ~~clrtobot:
  3265                        	longa	on
  3266                        	longi	on
  3267                        ;    mcurses_puts_P (SEQ_CLRTOBOT);
  3268 00:08AF: F4 xx xx     	pea	#^L133
  3269 00:08B2: F4 xx xx     	pea	#<L133
  3270 00:08B5: 22 xx xx xx  	jsl	~~mcurses_puts_P
  3271                        ;}
  3272 00:08B9: 6B           	rtl
  3273             00000000   L134	equ	0
  3274             00000001   L135	equ	1
  3275                        	ends
  3276                        	efunc
  3277                        	data
  3278                        L133:
  3279 00:0049: 1B 5B 4A 00  	db	$1B,$5B,$4A,$00
  3280 00:004D:              	ends
  3281                        ;
  3282                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3283                        ; * MCURSES: clear to end of line
  3284                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3285                        ; */
  3286                        ;void
  3287                        ;clrtoeol (void)
  3288                        ;{
  3289                        	code
  3290                        	xdef	~~clrtoeol
  3291                        	func
  3292                        ~~clrtoeol:
  3293                        	longa	on
  3294                        	longi	on
  3295                        ;    mcurses_puts_P (SEQ_CLRTOEOL);
  3296 00:08BA: F4 xx xx     	pea	#^L137
  3297 00:08BD: F4 xx xx     	pea	#<L137
  3298 00:08C0: 22 xx xx xx  	jsl	~~mcurses_puts_P
  3299                        ;}
  3300 00:08C4: 6B           	rtl
  3301             00000000   L138	equ	0
  3302             00000001   L139	equ	1
  3303                        	ends
  3304                        	efunc
  3305                        	data
  3306                        L137:
  3307 00:004D: 1B 5B 4B 00  	db	$1B,$5B,$4B,$00
  3308 00:0051:              	ends
  3309                        ;
  3310                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3311                        ; * MCURSES: delete character at cursor position
  3312                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  Tue Jan 26 2021 17:07                                                Page 70


  3313                        ; */
  3314                        ;void
  3315                        ;delch (void)
  3316                        ;{
  3317                        	code
  3318                        	xdef	~~delch
  3319                        	func
  3320                        ~~delch:
  3321                        	longa	on
  3322                        	longi	on
  3323                        ;    mcurses_puts_P (SEQ_DELCH);
  3324 00:08C5: F4 xx xx     	pea	#^L141
  3325 00:08C8: F4 xx xx     	pea	#<L141
  3326 00:08CB: 22 xx xx xx  	jsl	~~mcurses_puts_P
  3327                        ;}
  3328 00:08CF: 6B           	rtl
  3329             00000000   L142	equ	0
  3330             00000001   L143	equ	1
  3331                        	ends
  3332                        	efunc
  3333                        	data
  3334                        L141:
  3335 00:0051: 1B 5B 50 00  	db	$1B,$5B,$50,$00
  3336 00:0055:              	ends
  3337                        ;
  3338                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3339                        ; * MCURSES: insert character
  3340                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3341                        ; */
  3342                        ;void
  3343                        ;insch (uint_fast8_t ch)
  3344                        ;{
  3345                        	code
  3346                        	xdef	~~insch
  3347                        	func
  3348                        ~~insch:
  3349                        	longa	on
  3350                        	longi	on
  3351 00:08D0: 3B           	tsc
  3352 00:08D1: 38           	sec
  3353 00:08D2: E9 00 00     	sbc	#L146
  3354 00:08D5: 1B           	tcs
  3355 00:08D6: 0B           	phd
  3356 00:08D7: 5B           	tcd
  3357             00000004   ch_0	set	4
  3358                        ;    mcurses_addch_or_insch (ch, TRUE);
  3359 00:08D8: F4 01 00     	pea	#<$1
  3360 00:08DB: D4 04        	pei	<L146+ch_0
  3361 00:08DD: 22 xx xx xx  	jsl	~~mcurses_addch_or_insch
  3362                        ;}
  3363 00:08E1: A5 02        	lda	<L146+2
  3364 00:08E3: 85 04        	sta	<L146+2+2
  3365 00:08E5: A5 01        	lda	<L146+1
  3366 00:08E7: 85 03        	sta	<L146+1+2
  Tue Jan 26 2021 17:07                                                Page 71


  3367 00:08E9: 2B           	pld
  3368 00:08EA: 3B           	tsc
  3369 00:08EB: 18           	clc
  3370 00:08EC: 69 02 00     	adc	#L146+2
  3371 00:08EF: 1B           	tcs
  3372 00:08F0: 6B           	rtl
  3373             00000000   L146	equ	0
  3374             00000001   L147	equ	1
  3375                        	ends
  3376                        	efunc
  3377                        ;
  3378                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3379                        ; * MCURSES: set scrolling region
  3380                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3381                        ; */
  3382                        ;void
  3383                        ;setscrreg (uint_fast8_t t, uint_fast8_t b)
  3384                        ;{
  3385                        	code
  3386                        	xdef	~~setscrreg
  3387                        	func
  3388                        ~~setscrreg:
  3389                        	longa	on
  3390                        	longi	on
  3391 00:08F1: 3B           	tsc
  3392 00:08F2: 38           	sec
  3393 00:08F3: E9 00 00     	sbc	#L149
  3394 00:08F6: 1B           	tcs
  3395 00:08F7: 0B           	phd
  3396 00:08F8: 5B           	tcd
  3397             00000004   t_0	set	4
  3398             00000006   b_0	set	6
  3399                        ;    mcurses_scrl_start = t;
  3400 00:08F9: E2 20        	sep	#$20
  3401                        	longa	off
  3402 00:08FB: A5 04        	lda	<L149+t_0
  3403 00:08FD: 8D xx xx     	sta	|~~mcurses_scrl_start
  3404                        ;    mcurses_scrl_end = b;
  3405 00:0900: A5 06        	lda	<L149+b_0
  3406 00:0902: 8D xx xx     	sta	|~~mcurses_scrl_end
  3407 00:0905: C2 20        	rep	#$20
  3408                        	longa	on
  3409                        ;}
  3410 00:0907: A5 02        	lda	<L149+2
  3411 00:0909: 85 06        	sta	<L149+2+4
  3412 00:090B: A5 01        	lda	<L149+1
  3413 00:090D: 85 05        	sta	<L149+1+4
  3414 00:090F: 2B           	pld
  3415 00:0910: 3B           	tsc
  3416 00:0911: 18           	clc
  3417 00:0912: 69 04 00     	adc	#L149+4
  3418 00:0915: 1B           	tcs
  3419 00:0916: 6B           	rtl
  3420             00000000   L149	equ	0
  Tue Jan 26 2021 17:07                                                Page 72


  3421             00000001   L150	equ	1
  3422                        	ends
  3423                        	efunc
  3424                        ;
  3425                        ;void
  3426                        ;curs_set (uint_fast8_t visibility)
  3427                        ;{
  3428                        	code
  3429                        	xdef	~~curs_set
  3430                        	func
  3431                        ~~curs_set:
  3432                        	longa	on
  3433                        	longi	on
  3434 00:0917: 3B           	tsc
  3435 00:0918: 38           	sec
  3436 00:0919: E9 00 00     	sbc	#L152
  3437 00:091C: 1B           	tcs
  3438 00:091D: 0B           	phd
  3439 00:091E: 5B           	tcd
  3440             00000004   visibility_0	set	4
  3441                        ;    mcurses_puts_P (SEQ_CURSOR_VIS);
  3442 00:091F: F4 xx xx     	pea	#^L145
  3443 00:0922: F4 xx xx     	pea	#<L145
  3444 00:0925: 22 xx xx xx  	jsl	~~mcurses_puts_P
  3445                        ;
  3446                        ;    if (visibility == 0)
  3447                        ;    {
  3448 00:0929: A5 04        	lda	<L152+visibility_0
  3449 00:092B: 29 FF 00     	and	#$ff
  3450 00:092E: D0 05        	bne	L10039
  3451                        ;        mcurses_putc ('l');
  3452 00:0930: F4 6C 00     	pea	#<$6c
  3453 00:0933: 80 03        	bra	L20006
  3454                        ;    }
  3455                        ;    else
  3456                        L10039:
  3457                        ;    {
  3458                        ;        mcurses_putc ('h');
  3459 00:0935: F4 68 00     	pea	#<$68
  3460                        L20006:
  3461 00:0938: 22 xx xx xx  	jsl	~~mcurses_putc
  3462                        ;    }
  3463                        ;}
  3464 00:093C: A5 02        	lda	<L152+2
  3465 00:093E: 85 04        	sta	<L152+2+2
  3466 00:0940: A5 01        	lda	<L152+1
  3467 00:0942: 85 03        	sta	<L152+1+2
  3468 00:0944: 2B           	pld
  3469 00:0945: 3B           	tsc
  3470 00:0946: 18           	clc
  3471 00:0947: 69 02 00     	adc	#L152+2
  3472 00:094A: 1B           	tcs
  3473 00:094B: 6B           	rtl
  3474             00000000   L152	equ	0
  3475             00000001   L153	equ	1
  3476                        	ends
  3477                        	efunc
  3478                        	data
  Tue Jan 26 2021 17:07                                                Page 73


  3479                        L145:
  3480 00:0055: 1B 5B 3F 32  	db	$1B,$5B,$3F,$32,$35,$00
       00:0059: 35 00 
  3481 00:005B:              	ends
  3482                        ;
  3483                        ;
  3484                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3485                        ; * MCURSES: refresh: flush output
  3486                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3487                        ; */
  3488                        ;void
  3489                        ;refresh (void)
  3490                        ;{
  3491                        	code
  3492                        	xdef	~~refresh
  3493                        	func
  3494                        ~~refresh:
  3495                        	longa	on
  3496                        	longi	on
  3497                        ;    mcurses_phyio_flush_output ();
  3498 00:094C: 22 xx xx xx  	jsl	~~mcurses_phyio_flush_output
  3499                        ;}
  3500 00:0950: 6B           	rtl
  3501             00000000   L157	equ	0
  3502             00000001   L158	equ	1
  3503                        	ends
  3504                        	efunc
  3505                        ;
  3506                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3507                        ; * MCURSES: set/reset nodelay
  3508                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3509                        ; */
  3510                        ;void
  3511                        ;nodelay (uint_fast8_t flag)
  3512                        ;{
  3513                        	code
  3514                        	xdef	~~nodelay
  3515                        	func
  3516                        ~~nodelay:
  3517                        	longa	on
  3518                        	longi	on
  3519 00:0951: 3B           	tsc
  3520 00:0952: 38           	sec
  3521 00:0953: E9 00 00     	sbc	#L160
  3522 00:0956: 1B           	tcs
  3523 00:0957: 0B           	phd
  3524 00:0958: 5B           	tcd
  3525             00000004   flag_0	set	4
  3526                        ;    if (mcurses_nodelay != flag)
  3527                        ;    {
  Tue Jan 26 2021 17:07                                                Page 74


  3528 00:0959: E2 20        	sep	#$20
  3529                        	longa	off
  3530 00:095B: AD xx xx     	lda	|~~mcurses_nodelay
  3531 00:095E: C5 04        	cmp	<L160+flag_0
  3532 00:0960: C2 20        	rep	#$20
  3533                        	longa	on
  3534 00:0962: F0 06        	beq	L163
  3535                        ;        mcurses_phyio_nodelay (flag);
  3536 00:0964: D4 04        	pei	<L160+flag_0
  3537 00:0966: 22 xx xx xx  	jsl	~~mcurses_phyio_nodelay
  3538                        ;    }
  3539                        ;}
  3540                        L163:
  3541 00:096A: A5 02        	lda	<L160+2
  3542 00:096C: 85 04        	sta	<L160+2+2
  3543 00:096E: A5 01        	lda	<L160+1
  3544 00:0970: 85 03        	sta	<L160+1+2
  3545 00:0972: 2B           	pld
  3546 00:0973: 3B           	tsc
  3547 00:0974: 18           	clc
  3548 00:0975: 69 02 00     	adc	#L160+2
  3549 00:0978: 1B           	tcs
  3550 00:0979: 6B           	rtl
  3551             00000000   L160	equ	0
  3552             00000001   L161	equ	1
  3553                        	ends
  3554                        	efunc
  3555                        ;
  3556                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3557                        ; * MCURSES: set/reset halfdelay
  3558                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3559                        ; */
  3560                        ;void
  3561                        ;halfdelay (uint_fast8_t tenths)
  3562                        ;{
  3563                        	code
  3564                        	xdef	~~halfdelay
  3565                        	func
  3566                        ~~halfdelay:
  3567                        	longa	on
  3568                        	longi	on
  3569 00:097A: 3B           	tsc
  3570 00:097B: 38           	sec
  3571 00:097C: E9 00 00     	sbc	#L164
  3572 00:097F: 1B           	tcs
  3573 00:0980: 0B           	phd
  3574 00:0981: 5B           	tcd
  3575             00000004   tenths_0	set	4
  3576                        ;    mcurses_phyio_halfdelay (tenths);
  3577 00:0982: D4 04        	pei	<L164+tenths_0
  3578 00:0984: 22 xx xx xx  	jsl	~~mcurses_phyio_halfdelay
  3579                        ;}
  3580 00:0988: A5 02        	lda	<L164+2
  3581 00:098A: 85 04        	sta	<L164+2+2
  Tue Jan 26 2021 17:07                                                Page 75


  3582 00:098C: A5 01        	lda	<L164+1
  3583 00:098E: 85 03        	sta	<L164+1+2
  3584 00:0990: 2B           	pld
  3585 00:0991: 3B           	tsc
  3586 00:0992: 18           	clc
  3587 00:0993: 69 02 00     	adc	#L164+2
  3588 00:0996: 1B           	tcs
  3589 00:0997: 6B           	rtl
  3590             00000000   L164	equ	0
  3591             00000001   L165	equ	1
  3592                        	ends
  3593                        	efunc
  3594                        ;
  3595                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3596                        ; * MCURSES: read key
  3597                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3598                        ; */
  3599                        ;#define MAX_KEYS                ((KEY_F1 + 12) - 
                    0x80)
  3600                        ;
  3601                        ;static const char * function_keys[MAX_KEYS] =
  3602                        	data
  3603                        ~~function_keys:
  3604                        ;{
  3605                        ;    "B",                        // KEY_DOWN      
                               0x80                // Down arrow key
  3606 00:005B: xx xx xx xx  	dl	L156+0
  3607                        ;    "A",                        // KEY_UP        
                               0x81                // Up arrow key
  3608 00:005F: xx xx xx xx  	dl	L156+2
  3609                        ;    "D",                        // KEY_LEFT      
                               0x82                // Left arrow key
  3610 00:0063: xx xx xx xx  	dl	L156+4
  3611                        ;    "C",                        // KEY_RIGHT     
                               0x83                // Right arrow key
  3612 00:0067: xx xx xx xx  	dl	L156+6
  3613                        ;    "1~",                       // KEY_HOME      
                               0x84                // Home key
  3614 00:006B: xx xx xx xx  	dl	L156+8
  3615                        ;    "3~",                       // KEY_DC        
                               0x85                // Delete character key
  3616 00:006F: xx xx xx xx  	dl	L156+11
  3617                        ;    "2~",                       // KEY_IC        
                               0x86                // Ins char/toggle ins mode k
                    ey
  3618 00:0073: xx xx xx xx  	dl	L156+14
  3619                        ;    "6~",                       // KEY_NPAGE     
                               0x87                // Next-page key
  3620 00:0077: xx xx xx xx  	dl	L156+17
  3621                        ;    "5~",                       // KEY_PPAGE     
                               0x88                // Previous-page key
  3622 00:007B: xx xx xx xx  	dl	L156+20
  3623                        ;    "4~",                       // KEY_END       
                               0x89                // End key
  Tue Jan 26 2021 17:07                                                Page 76


  3624 00:007F: xx xx xx xx  	dl	L156+23
  3625                        ;    "Z",                        // KEY_BTAB      
                               0x8A                // Back tab key
  3626 00:0083: xx xx xx xx  	dl	L156+26
  3627                        ;#if 0 // VT400:
  3628                        ;    "11~",                      // KEY_F(1)      
                               0x8B                // Function key F1
  3629                        ;    "12~",                      // KEY_F(2)      
                               0x8C                // Function key F2
  3630                        ;    "13~",                      // KEY_F(3)      
                               0x8D                // Function key F3
  3631                        ;    "14~",                      // KEY_F(4)      
                               0x8E                // Function key F4
  3632                        ;    "15~",                      // KEY_F(5)      
                               0x8F                // Function key F5
  3633                        ;#else // Linux console
  3634                        ;    "[A",                       // KEY_F(1)      
                               0x8B                // Function key F1
  3635 00:0087: xx xx xx xx  	dl	L156+28
  3636                        ;    "[B",                       // KEY_F(2)      
                               0x8C                // Function key F2
  3637 00:008B: xx xx xx xx  	dl	L156+31
  3638                        ;    "[C",                       // KEY_F(3)      
                               0x8D                // Function key F3
  3639 00:008F: xx xx xx xx  	dl	L156+34
  3640                        ;    "[D",                       // KEY_F(4)      
                               0x8E                // Function key F4
  3641 00:0093: xx xx xx xx  	dl	L156+37
  3642                        ;    "[E",                       // KEY_F(5)      
                               0x8F                // Function key F5
  3643 00:0097: xx xx xx xx  	dl	L156+40
  3644                        ;#endif
  3645                        ;    "17~",                      // KEY_F(6)      
                               0x90                // Function key F6
  3646 00:009B: xx xx xx xx  	dl	L156+43
  3647                        ;    "18~",                      // KEY_F(7)      
                               0x91                // Function key F7
  3648 00:009F: xx xx xx xx  	dl	L156+47
  3649                        ;    "19~",                      // KEY_F(8)      
                               0x92                // Function key F8
  3650 00:00A3: xx xx xx xx  	dl	L156+51
  3651                        ;    "20~",                      // KEY_F(9)      
                               0x93                // Function key F9
  3652 00:00A7: xx xx xx xx  	dl	L156+55
  3653                        ;    "21~",                      // KEY_F(10)     
                               0x94                // Function key F10
  3654 00:00AB: xx xx xx xx  	dl	L156+59
  3655                        ;    "23~",                      // KEY_F(11)     
                               0x95                // Function key F11
  3656 00:00AF: xx xx xx xx  	dl	L156+63
  3657                        ;    "24~"                       // KEY_F(12)     
                               0x96                // Function key F12
  3658                        ;};
  3659 00:00B3: xx xx xx xx  	dl	L156+67
  3660 00:00B7:              	ends
  3661                        	data
  3662                        L156:
  3663 00:00B7: 42 00 41 00  	db	$42,$00,$41,$00,$44,$00,$43,$00,$31,$7E,
  Tue Jan 26 2021 17:07                                                Page 77


                    $00,$33,$7E,$00,$32
       00:00BB: 44 00 43 00 
       00:00BF: 31 7E 00 33 
       00:00C3: 7E 00 32 
  3664 00:00C6: 7E 00 36 7E  	db	$7E,$00,$36,$7E,$00,$35,$7E,$00,$34,$7E,
                    $00,$5A,$00,$5B,$41
       00:00CA: 00 35 7E 00 
       00:00CE: 34 7E 00 5A 
       00:00D2: 00 5B 41 
  3665 00:00D5: 00 5B 42 00  	db	$00,$5B,$42,$00,$5B,$43,$00,$5B,$44,$00,
                    $5B,$45,$00,$31,$37
       00:00D9: 5B 43 00 5B 
       00:00DD: 44 00 5B 45 
       00:00E1: 00 31 37 
  3666 00:00E4: 7E 00 31 38  	db	$7E,$00,$31,$38,$7E,$00,$31,$39,$7E,$00,
                    $32,$30,$7E,$00,$32
       00:00E8: 7E 00 31 39 
       00:00EC: 7E 00 32 30 
       00:00F0: 7E 00 32 
  3667 00:00F3: 31 7E 00 32  	db	$31,$7E,$00,$32,$33,$7E,$00,$32,$34,$7E,
                    $00
       00:00F7: 33 7E 00 32 
       00:00FB: 34 7E 00 
  3668 00:00FE:              	ends
  3669                        ;
  3670                        ;uint_fast8_t
  3671                        ;getch (void)
  3672                        ;{
  3673                        	code
  3674                        	xdef	~~getch
  3675                        	func
  3676                        ~~getch:
  3677                        	longa	on
  3678                        	longi	on
  3679 00:0998: 3B           	tsc
  3680 00:0999: 38           	sec
  3681 00:099A: E9 0E 00     	sbc	#L168
  3682 00:099D: 1B           	tcs
  3683 00:099E: 0B           	phd
  3684 00:099F: 5B           	tcd
  3685                        ;    char    buf[4];
  3686                        ;    uint_fast8_t ch;
  3687                        ;    uint_fast8_t idx;
  3688                        ;
  3689                        ;    refresh ();
  3690             00000000   buf_1	set	0
  3691             00000004   ch_1	set	4
  3692             00000005   idx_1	set	5
  3693 00:09A0: 22 xx xx xx  	jsl	~~refresh
  3694                        ;    ch = mcurses_phyio_getc ();
  3695 00:09A4: 22 xx xx xx  	jsl	~~mcurses_phyio_getc
  3696 00:09A8: E2 20        	sep	#$20
  3697                        	longa	off
  3698 00:09AA: 85 0D        	sta	<L169+ch_1
  3699                        ;
  3700                        ;    if (ch == 0x7F)                              
                                                   // BACKSPACE on VT200 sends D
                    EL char
  Tue Jan 26 2021 17:07                                                Page 78


  3701                        ;    {
  3702 00:09AC: C9 7F        	cmp	#<$7f
  3703 00:09AE: C2 20        	rep	#$20
  3704                        	longa	on
  3705 00:09B0: D0 0B        	bne	L10042
  3706                        ;        ch = KEY_BACKSPACE;                      
                                                   // map it to '\b'
  3707 00:09B2: E2 20        	sep	#$20
  3708                        	longa	off
  3709 00:09B4: A9 08        	lda	#$8
  3710 00:09B6: 85 0D        	sta	<L169+ch_1
  3711 00:09B8: C2 20        	rep	#$20
  3712                        	longa	on
  3713                        ;    }
  3714                        ;    else if (ch == '\033')                       
                                                   // ESCAPE
  3715 00:09BA: 82 02 01     	brl	L10043
  3716                        L10042:
  3717                        ;    {
  3718 00:09BD: E2 20        	sep	#$20
  3719                        	longa	off
  3720 00:09BF: A5 0D        	lda	<L169+ch_1
  3721 00:09C1: C9 1B        	cmp	#<$1b
  3722 00:09C3: C2 20        	rep	#$20
  3723                        	longa	on
  3724 00:09C5: F0 03        	beq	*+5
  3725 00:09C7: 82 F5 00     	brl	L10043
  3726                        ;        while ((ch = mcurses_phyio_getc ()) == ER
                    R)
  3727                        L10045:
  3728 00:09CA: 22 xx xx xx  	jsl	~~mcurses_phyio_getc
  3729 00:09CE: E2 20        	sep	#$20
  3730                        	longa	off
  3731 00:09D0: 85 0D        	sta	<L169+ch_1
  3732 00:09D2: C9 FF        	cmp	#<$ff
  3733 00:09D4: C2 20        	rep	#$20
  3734                        	longa	on
  3735 00:09D6: F0 F2        	beq	L10045
  3736                        ;        {
  3737                        ;            ;
  3738                        ;        }
  3739                        ;
  3740                        ;        if (ch == '\033')                        
                                                   // 2 x ESCAPE
  3741                        ;        {
  3742 00:09D8: E2 20        	sep	#$20
  3743                        	longa	off
  3744 00:09DA: A5 0D        	lda	<L169+ch_1
  3745 00:09DC: C9 1B        	cmp	#<$1b
  3746 00:09DE: C2 20        	rep	#$20
  3747                        	longa	on
  3748 00:09E0: D0 0D        	bne	L10047
  3749                        ;            return KEY_ESCAPE;
  3750 00:09E2: A9 1B 00     	lda	#$1b
  3751                        L174:
  3752 00:09E5: A8           	tay
  3753 00:09E6: 2B           	pld
  3754 00:09E7: 3B           	tsc
  Tue Jan 26 2021 17:07                                                Page 79


  3755 00:09E8: 18           	clc
  3756 00:09E9: 69 0E 00     	adc	#L168
  3757 00:09EC: 1B           	tcs
  3758 00:09ED: 98           	tya
  3759 00:09EE: 6B           	rtl
  3760                        ;        }
  3761                        ;        else if (ch == '[')
  3762                        L10047:
  3763                        ;        {
  3764 00:09EF: E2 20        	sep	#$20
  3765                        	longa	off
  3766 00:09F1: A5 0D        	lda	<L169+ch_1
  3767 00:09F3: C9 5B        	cmp	#<$5b
  3768 00:09F5: C2 20        	rep	#$20
  3769                        	longa	on
  3770 00:09F7: F0 03        	beq	*+5
  3771 00:09F9: 82 BB 00     	brl	L10048
  3772                        ;            for (idx = 0; idx < 3; idx++)
  3773 00:09FC: E2 20        	sep	#$20
  3774                        	longa	off
  3775 00:09FE: 64 0E        	stz	<L169+idx_1
  3776 00:0A00: C2 20        	rep	#$20
  3777                        	longa	on
  3778 00:0A02: 80 06        	bra	L10052
  3779                        ;            {
  3780                        ;                while ((ch = mcurses_phyio_getc (
                    )) == ERR)
  3781                        ;                }
  3782                        ;            }
  3783                        L10049:
  3784 00:0A04: E2 20        	sep	#$20
  3785                        	longa	off
  3786 00:0A06: E6 0E        	inc	<L169+idx_1
  3787 00:0A08: C2 20        	rep	#$20
  3788                        	longa	on
  3789                        L10052:
  3790 00:0A0A: E2 20        	sep	#$20
  3791                        	longa	off
  3792 00:0A0C: A5 0E        	lda	<L169+idx_1
  3793 00:0A0E: C9 03        	cmp	#<$3
  3794 00:0A10: C2 20        	rep	#$20
  3795                        	longa	on
  3796 00:0A12: B0 3C        	bcs	L10050
  3797                        L10053:
  3798 00:0A14: 22 xx xx xx  	jsl	~~mcurses_phyio_getc
  3799 00:0A18: E2 20        	sep	#$20
  3800                        	longa	off
  3801 00:0A1A: 85 0D        	sta	<L169+ch_1
  3802 00:0A1C: C9 FF        	cmp	#<$ff
  3803 00:0A1E: C2 20        	rep	#$20
  3804                        	longa	on
  3805 00:0A20: F0 F2        	beq	L10053
  3806                        ;                {
  3807                        ;                    ;
  3808                        ;                }
  3809                        ;
  3810                        ;                buf[idx] = ch;
  3811 00:0A22: A5 0E        	lda	<L169+idx_1
  Tue Jan 26 2021 17:07                                                Page 80


  3812 00:0A24: 29 FF 00     	and	#$ff
  3813 00:0A27: AA           	tax
  3814 00:0A28: E2 20        	sep	#$20
  3815                        	longa	off
  3816 00:0A2A: A5 0D        	lda	<L169+ch_1
  3817 00:0A2C: 95 09        	sta	<L169+buf_1,X
  3818                        ;
  3819                        ;                if ((ch >= 'A' && ch <= 'Z') || c
                    h == '~')
  3820                        ;                {
  3821 00:0A2E: A5 0D        	lda	<L169+ch_1
  3822 00:0A30: C9 41        	cmp	#<$41
  3823 00:0A32: C2 20        	rep	#$20
  3824                        	longa	on
  3825 00:0A34: 90 0A        	bcc	L178
  3826 00:0A36: E2 20        	sep	#$20
  3827                        	longa	off
  3828 00:0A38: A9 5A        	lda	#$5a
  3829 00:0A3A: C5 0D        	cmp	<L169+ch_1
  3830 00:0A3C: C2 20        	rep	#$20
  3831                        	longa	on
  3832 00:0A3E: B0 0A        	bcs	L177
  3833                        L178:
  3834 00:0A40: E2 20        	sep	#$20
  3835                        	longa	off
  3836 00:0A42: A5 0D        	lda	<L169+ch_1
  3837 00:0A44: C9 7E        	cmp	#<$7e
  3838 00:0A46: C2 20        	rep	#$20
  3839                        	longa	on
  3840 00:0A48: D0 BA        	bne	L10049
  3841                        L177:
  3842                        ;                    idx++;
  3843 00:0A4A: E2 20        	sep	#$20
  3844                        	longa	off
  3845 00:0A4C: E6 0E        	inc	<L169+idx_1
  3846 00:0A4E: C2 20        	rep	#$20
  3847                        	longa	on
  3848                        ;                    break;
  3849                        L10050:
  3850                        ;
  3851                        ;            buf[idx] = '\0';
  3852 00:0A50: A5 0E        	lda	<L169+idx_1
  3853 00:0A52: 29 FF 00     	and	#$ff
  3854 00:0A55: AA           	tax
  3855 00:0A56: E2 20        	sep	#$20
  3856                        	longa	off
  3857 00:0A58: A9 00        	lda	#$0
  3858 00:0A5A: 95 09        	sta	<L169+buf_1,X
  3859                        ;
  3860                        ;            for (idx = 0; idx < MAX_KEYS; idx++)
  3861 00:0A5C: 64 0E        	stz	<L169+idx_1
  3862 00:0A5E: C2 20        	rep	#$20
  3863                        	longa	on
  3864 00:0A60: 80 06        	bra	L10059
  3865                        ;                }
  3866                        ;            }
  3867                        L10056:
  3868 00:0A62: E2 20        	sep	#$20
  Tue Jan 26 2021 17:07                                                Page 81


  3869                        	longa	off
  3870 00:0A64: E6 0E        	inc	<L169+idx_1
  3871 00:0A66: C2 20        	rep	#$20
  3872                        	longa	on
  3873                        L10059:
  3874 00:0A68: E2 20        	sep	#$20
  3875                        	longa	off
  3876 00:0A6A: A5 0E        	lda	<L169+idx_1
  3877 00:0A6C: C9 17        	cmp	#<$17
  3878 00:0A6E: C2 20        	rep	#$20
  3879                        	longa	on
  3880 00:0A70: B0 31        	bcs	L10057
  3881                        ;            {
  3882                        ;                if (! strcmp (buf, function_keys[
                    idx]))
  3883                        ;                {
  3884 00:0A72: A5 0E        	lda	<L169+idx_1
  3885 00:0A74: 29 FF 00     	and	#$ff
  3886 00:0A77: 0A           	asl	A
  3887 00:0A78: 0A           	asl	A
  3888 00:0A79: 18           	clc
  3889 00:0A7A: 69 xx xx     	adc	#<~~function_keys
  3890 00:0A7D: 85 05        	sta	<R1
  3891 00:0A7F: A0 02 00     	ldy	#$2
  3892 00:0A82: B1 05        	lda	(<R1),Y
  3893 00:0A84: 48           	pha
  3894 00:0A85: B2 05        	lda	(<R1)
  3895 00:0A87: 48           	pha
  3896 00:0A88: F4 00 00     	pea	#0
  3897 00:0A8B: 18           	clc
  3898 00:0A8C: 7B           	tdc
  3899 00:0A8D: 69 09 00     	adc	#<L169+buf_1
  3900 00:0A90: 48           	pha
  3901 00:0A91: 22 xx xx xx  	jsl	~~strcmp
  3902 00:0A95: AA           	tax
  3903 00:0A96: D0 CA        	bne	L10056
  3904                        ;                    ch = idx + 0x80;
  3905 00:0A98: E2 20        	sep	#$20
  3906                        	longa	off
  3907 00:0A9A: A9 80        	lda	#$80
  3908 00:0A9C: 18           	clc
  3909 00:0A9D: 65 0E        	adc	<L169+idx_1
  3910 00:0A9F: 85 0D        	sta	<L169+ch_1
  3911 00:0AA1: C2 20        	rep	#$20
  3912                        	longa	on
  3913                        ;                    break;
  3914                        L10057:
  3915                        ;
  3916                        ;            if (idx == MAX_KEYS)
  3917                        ;            {
  3918 00:0AA3: E2 20        	sep	#$20
  3919                        	longa	off
  3920 00:0AA5: A5 0E        	lda	<L169+idx_1
  3921 00:0AA7: C9 17        	cmp	#<$17
  3922 00:0AA9: C2 20        	rep	#$20
  3923                        	longa	on
  3924 00:0AAB: D0 12        	bne	L10043
  3925                        ;                ch = ERR;
  Tue Jan 26 2021 17:07                                                Page 82


  3926 00:0AAD: E2 20        	sep	#$20
  3927                        	longa	off
  3928 00:0AAF: A9 FF        	lda	#$ff
  3929 00:0AB1: 85 0D        	sta	<L169+ch_1
  3930 00:0AB3: C2 20        	rep	#$20
  3931                        	longa	on
  3932                        ;            }
  3933                        ;        }
  3934                        ;        else
  3935 00:0AB5: 80 08        	bra	L10043
  3936                        L10048:
  3937                        ;        {
  3938                        ;            ch = ERR;
  3939 00:0AB7: E2 20        	sep	#$20
  3940                        	longa	off
  3941 00:0AB9: A9 FF        	lda	#$ff
  3942 00:0ABB: 85 0D        	sta	<L169+ch_1
  3943 00:0ABD: C2 20        	rep	#$20
  3944                        	longa	on
  3945                        ;        }
  3946                        ;    }
  3947                        ;
  3948                        ;    return ch;
  3949                        L10043:
  3950 00:0ABF: A5 0D        	lda	<L169+ch_1
  3951 00:0AC1: 29 FF 00     	and	#$ff
  3952 00:0AC4: 82 1E FF     	brl	L174
  3953                        ;}
  3954             0000000E   L168	equ	14
  3955             00000009   L169	equ	9
  3956                        	ends
  3957                        	efunc
  3958                        ;
  3959                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3960                        ; * MCURSES: read string (with mini editor built-i
                    n)
  3961                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  3962                        ; */
  3963                        ;void
  3964                        ;getnstr (char * str, uint_fast8_t maxlen)
  3965                        ;{
  3966                        	code
  3967                        	xdef	~~getnstr
  3968                        	func
  3969                        ~~getnstr:
  3970                        	longa	on
  3971                        	longi	on
  3972 00:0AC7: 3B           	tsc
  3973 00:0AC8: 38           	sec
  3974 00:0AC9: E9 12 00     	sbc	#L186
  3975 00:0ACC: 1B           	tcs
  3976 00:0ACD: 0B           	phd
  3977 00:0ACE: 5B           	tcd
  3978             00000004   str_0	set	4
  Tue Jan 26 2021 17:07                                                Page 83


  3979             00000008   maxlen_0	set	8
  3980                        ;    uint_fast8_t ch;
  3981                        ;    uint_fast8_t curlen = 0;
  3982                        ;    uint_fast8_t curpos = 0;
  3983                        ;    uint_fast8_t starty;
  3984                        ;    uint_fast8_t startx;
  3985                        ;    uint_fast8_t i;
  3986                        ;
  3987                        ;    maxlen--;                               // re
                    serve one byte in order to store '\0' in last position
  3988             00000000   ch_1	set	0
  3989             00000001   curlen_1	set	1
  3990             00000002   curpos_1	set	2
  3991             00000003   starty_1	set	3
  3992             00000004   startx_1	set	4
  3993             00000005   i_1	set	5
  3994 00:0ACF: E2 20        	sep	#$20
  3995                        	longa	off
  3996 00:0AD1: 64 0E        	stz	<L187+curlen_1
  3997 00:0AD3: 64 0F        	stz	<L187+curpos_1
  3998 00:0AD5: C6 1A        	dec	<L186+maxlen_0
  3999                        ;    getyx (starty, startx);                 // ge
                    t current cursor position
  4000 00:0AD7: AD xx xx     	lda	|~~mcurses_cury
  4001 00:0ADA: 85 10        	sta	<L187+starty_1
  4002 00:0ADC: AD xx xx     	lda	|~~mcurses_curx
  4003 00:0ADF: 85 11        	sta	<L187+startx_1
  4004 00:0AE1: C2 20        	rep	#$20
  4005                        	longa	on
  4006                        ;
  4007                        ;    while ((ch = getch ()) != KEY_CR)
  4008                        L10063:
  4009 00:0AE3: 22 xx xx xx  	jsl	~~getch
  4010 00:0AE7: E2 20        	sep	#$20
  4011                        	longa	off
  4012 00:0AE9: 85 0D        	sta	<L187+ch_1
  4013 00:0AEB: C9 0D        	cmp	#<$d
  4014 00:0AED: C2 20        	rep	#$20
  4015                        	longa	on
  4016 00:0AEF: D0 03        	bne	*+5
  4017 00:0AF1: 82 A8 01     	brl	L10064
  4018                        ;    {
  4019                        ;        switch (ch)
  4020 00:0AF4: A5 0D        	lda	<L187+ch_1
  4021 00:0AF6: 29 FF 00     	and	#$ff
  4022                        	xref	~~~swt
  4023 00:0AF9: 22 xx xx xx  	jsl	~~~swt
  4024 00:0AFD: 06 00        	dw	6
  4025 00:0AFF: 08 00        	dw	8
  4026 00:0B01: xx xx        	dw	L10073-1
  4027 00:0B03: 82 00        	dw	130
  4028 00:0B05: xx xx        	dw	L10067-1
  4029 00:0B07: 83 00        	dw	131
  4030 00:0B09: xx xx        	dw	L10069-1
  4031 00:0B0B: 84 00        	dw	132
  4032 00:0B0D: xx xx        	dw	L10071-1
  4033 00:0B0F: 85 00        	dw	133
  4034 00:0B11: xx xx        	dw	L10079-1
  Tue Jan 26 2021 17:07                                                Page 84


  4035 00:0B13: 89 00        	dw	137
  4036 00:0B15: xx xx        	dw	L10072-1
  4037 00:0B17: xx xx        	dw	L10085-1
  4038                        ;        {
  4039                        ;            case KEY_LEFT:
  4040                        L10067:
  4041                        ;                if (curpos > 0)
  4042                        ;                {
  4043 00:0B19: E2 20        	sep	#$20
  4044                        	longa	off
  4045 00:0B1B: A9 00        	lda	#$0
  4046 00:0B1D: C5 0F        	cmp	<L187+curpos_1
  4047 00:0B1F: C2 20        	rep	#$20
  4048                        	longa	on
  4049 00:0B21: B0 06        	bcs	L10066
  4050                        ;                    curpos--;
  4051 00:0B23: E2 20        	sep	#$20
  4052                        	longa	off
  4053 00:0B25: C6 0F        	dec	<L187+curpos_1
  4054 00:0B27: C2 20        	rep	#$20
  4055                        	longa	on
  4056                        ;                }
  4057                        ;                break;
  4058                        L10066:
  4059                        ;        move (starty, startx + curpos);
  4060 00:0B29: A5 0F        	lda	<L187+curpos_1
  4061 00:0B2B: 29 FF 00     	and	#$ff
  4062 00:0B2E: 85 01        	sta	<R0
  4063 00:0B30: A5 11        	lda	<L187+startx_1
  4064 00:0B32: 29 FF 00     	and	#$ff
  4065 00:0B35: 18           	clc
  4066 00:0B36: 65 01        	adc	<R0
  4067 00:0B38: 48           	pha
  4068 00:0B39: D4 10        	pei	<L187+starty_1
  4069 00:0B3B: 22 xx xx xx  	jsl	~~move
  4070                        ;    }
  4071 00:0B3F: 80 A2        	bra	L10063
  4072                        ;            case KEY_RIGHT:
  4073                        L10069:
  4074                        ;                if (curpos < curlen)
  4075                        ;                {
  4076 00:0B41: E2 20        	sep	#$20
  4077                        	longa	off
  4078 00:0B43: A5 0F        	lda	<L187+curpos_1
  4079 00:0B45: C5 0E        	cmp	<L187+curlen_1
  4080 00:0B47: C2 20        	rep	#$20
  4081                        	longa	on
  4082 00:0B49: B0 DE        	bcs	L10066
  4083                        ;                    curpos++;
  4084 00:0B4B: E2 20        	sep	#$20
  4085                        	longa	off
  4086 00:0B4D: E6 0F        	inc	<L187+curpos_1
  4087 00:0B4F: C2 20        	rep	#$20
  4088                        	longa	on
  4089                        ;                }
  4090                        ;                break;
  4091 00:0B51: 80 D6        	bra	L10066
  4092                        ;            case KEY_HOME:
  Tue Jan 26 2021 17:07                                                Page 85


  4093                        L10071:
  4094                        ;                curpos = 0;
  4095 00:0B53: E2 20        	sep	#$20
  4096                        	longa	off
  4097 00:0B55: 64 0F        	stz	<L187+curpos_1
  4098 00:0B57: C2 20        	rep	#$20
  4099                        	longa	on
  4100                        ;                break;
  4101 00:0B59: 80 CE        	bra	L10066
  4102                        ;            case KEY_END:
  4103                        L10072:
  4104                        ;                curpos = curlen;
  4105 00:0B5B: E2 20        	sep	#$20
  4106                        	longa	off
  4107 00:0B5D: A5 0E        	lda	<L187+curlen_1
  4108 00:0B5F: 85 0F        	sta	<L187+curpos_1
  4109 00:0B61: C2 20        	rep	#$20
  4110                        	longa	on
  4111                        ;                break;
  4112 00:0B63: 80 C4        	bra	L10066
  4113                        ;            case KEY_BACKSPACE:
  4114                        L10073:
  4115                        ;                if (curpos > 0)
  4116                        ;                {
  4117 00:0B65: E2 20        	sep	#$20
  4118                        	longa	off
  4119 00:0B67: A9 00        	lda	#$0
  4120 00:0B69: C5 0F        	cmp	<L187+curpos_1
  4121 00:0B6B: C2 20        	rep	#$20
  4122                        	longa	on
  4123 00:0B6D: B0 BA        	bcs	L10066
  4124                        ;                    curpos--;
  4125 00:0B6F: E2 20        	sep	#$20
  4126                        	longa	off
  4127 00:0B71: C6 0F        	dec	<L187+curpos_1
  4128                        ;                    curlen--;
  4129 00:0B73: C6 0E        	dec	<L187+curlen_1
  4130 00:0B75: C2 20        	rep	#$20
  4131                        	longa	on
  4132                        ;                    move (starty, startx + curpos
                    );
  4133 00:0B77: A5 0F        	lda	<L187+curpos_1
  4134 00:0B79: 29 FF 00     	and	#$ff
  4135 00:0B7C: 85 01        	sta	<R0
  4136 00:0B7E: A5 11        	lda	<L187+startx_1
  4137 00:0B80: 29 FF 00     	and	#$ff
  4138 00:0B83: 18           	clc
  4139 00:0B84: 65 01        	adc	<R0
  4140 00:0B86: 48           	pha
  4141 00:0B87: D4 10        	pei	<L187+starty_1
  4142 00:0B89: 22 xx xx xx  	jsl	~~move
  4143                        ;
  4144                        ;                    for (i = curpos; i < curlen; 
                    i++)
  4145 00:0B8D: E2 20        	sep	#$20
  4146                        	longa	off
  4147 00:0B8F: A5 0F        	lda	<L187+curpos_1
  4148 00:0B91: 85 12        	sta	<L187+i_1
  Tue Jan 26 2021 17:07                                                Page 86


  4149 00:0B93: C2 20        	rep	#$20
  4150                        	longa	on
  4151 00:0B95: 80 1A        	bra	L10078
  4152                        L10077:
  4153                        ;                    {
  4154                        ;                        str[i] = str[i + 1];
  4155 00:0B97: A5 12        	lda	<L187+i_1
  4156 00:0B99: 29 FF 00     	and	#$ff
  4157 00:0B9C: 85 01        	sta	<R0
  4158 00:0B9E: A5 12        	lda	<L187+i_1
  4159 00:0BA0: 29 FF 00     	and	#$ff
  4160 00:0BA3: 1A           	ina
  4161 00:0BA4: A8           	tay
  4162 00:0BA5: E2 20        	sep	#$20
  4163                        	longa	off
  4164 00:0BA7: B7 16        	lda	[<L186+str_0],Y
  4165 00:0BA9: A4 01        	ldy	<R0
  4166 00:0BAB: 97 16        	sta	[<L186+str_0],Y
  4167                        ;                    }
  4168 00:0BAD: E6 12        	inc	<L187+i_1
  4169 00:0BAF: C2 20        	rep	#$20
  4170                        	longa	on
  4171                        L10078:
  4172 00:0BB1: E2 20        	sep	#$20
  4173                        	longa	off
  4174 00:0BB3: A5 12        	lda	<L187+i_1
  4175 00:0BB5: C5 0E        	cmp	<L187+curlen_1
  4176 00:0BB7: C2 20        	rep	#$20
  4177                        	longa	on
  4178 00:0BB9: 90 DC        	bcc	L10077
  4179                        ;                    str[i] = '\0';
  4180 00:0BBB: A5 12        	lda	<L187+i_1
  4181 00:0BBD: 29 FF 00     	and	#$ff
  4182 00:0BC0: A8           	tay
  4183 00:0BC1: E2 20        	sep	#$20
  4184                        	longa	off
  4185 00:0BC3: A9 00        	lda	#$0
  4186 00:0BC5: 97 16        	sta	[<L186+str_0],Y
  4187 00:0BC7: C2 20        	rep	#$20
  4188                        	longa	on
  4189                        ;                    delch();
  4190                        L20007:
  4191 00:0BC9: 22 xx xx xx  	jsl	~~delch
  4192                        ;                }
  4193                        ;                break;
  4194 00:0BCD: 82 59 FF     	brl	L10066
  4195                        ;
  4196                        ;            case KEY_DC:
  4197                        L10079:
  4198                        ;                if (curlen > 0)
  4199                        ;                {
  4200 00:0BD0: E2 20        	sep	#$20
  4201                        	longa	off
  4202 00:0BD2: A9 00        	lda	#$0
  4203 00:0BD4: C5 0E        	cmp	<L187+curlen_1
  4204 00:0BD6: C2 20        	rep	#$20
  4205                        	longa	on
  4206 00:0BD8: 90 03        	bcc	*+5
  Tue Jan 26 2021 17:07                                                Page 87


  4207 00:0BDA: 82 4C FF     	brl	L10066
  4208                        ;                    curlen--;
  4209 00:0BDD: E2 20        	sep	#$20
  4210                        	longa	off
  4211 00:0BDF: C6 0E        	dec	<L187+curlen_1
  4212                        ;                    for (i = curpos; i < curlen; 
                    i++)
  4213 00:0BE1: A5 0F        	lda	<L187+curpos_1
  4214 00:0BE3: 85 12        	sta	<L187+i_1
  4215 00:0BE5: C2 20        	rep	#$20
  4216                        	longa	on
  4217 00:0BE7: 80 1A        	bra	L10084
  4218                        L10083:
  4219                        ;                    {
  4220                        ;                        str[i] = str[i + 1];
  4221 00:0BE9: A5 12        	lda	<L187+i_1
  4222 00:0BEB: 29 FF 00     	and	#$ff
  4223 00:0BEE: 85 01        	sta	<R0
  4224 00:0BF0: A5 12        	lda	<L187+i_1
  4225 00:0BF2: 29 FF 00     	and	#$ff
  4226 00:0BF5: 1A           	ina
  4227 00:0BF6: A8           	tay
  4228 00:0BF7: E2 20        	sep	#$20
  4229                        	longa	off
  4230 00:0BF9: B7 16        	lda	[<L186+str_0],Y
  4231 00:0BFB: A4 01        	ldy	<R0
  4232 00:0BFD: 97 16        	sta	[<L186+str_0],Y
  4233                        ;                    }
  4234 00:0BFF: E6 12        	inc	<L187+i_1
  4235 00:0C01: C2 20        	rep	#$20
  4236                        	longa	on
  4237                        L10084:
  4238 00:0C03: E2 20        	sep	#$20
  4239                        	longa	off
  4240 00:0C05: A5 12        	lda	<L187+i_1
  4241 00:0C07: C5 0E        	cmp	<L187+curlen_1
  4242 00:0C09: C2 20        	rep	#$20
  4243                        	longa	on
  4244 00:0C0B: 90 DC        	bcc	L10083
  4245                        ;                    str[i] = '\0';
  4246 00:0C0D: A5 12        	lda	<L187+i_1
  4247 00:0C0F: 29 FF 00     	and	#$ff
  4248 00:0C12: A8           	tay
  4249 00:0C13: E2 20        	sep	#$20
  4250                        	longa	off
  4251 00:0C15: A9 00        	lda	#$0
  4252 00:0C17: 97 16        	sta	[<L186+str_0],Y
  4253 00:0C19: C2 20        	rep	#$20
  4254                        	longa	on
  4255                        ;                    delch();
  4256                        ;                }
  4257                        ;                break;
  4258 00:0C1B: 80 AC        	bra	L20007
  4259                        ;
  4260                        ;            default:
  4261                        L10085:
  4262                        ;                if (curlen < maxlen && (ch & 0x7F
                    ) >= 32 && (ch & 0x7F) < 127)      // printable ascii 7bit o
  Tue Jan 26 2021 17:07                                                Page 88


                    r printable 8bit ISO8859
  4263                        ;                {
  4264 00:0C1D: E2 20        	sep	#$20
  4265                        	longa	off
  4266 00:0C1F: A5 0E        	lda	<L187+curlen_1
  4267 00:0C21: C5 1A        	cmp	<L186+maxlen_0
  4268 00:0C23: C2 20        	rep	#$20
  4269                        	longa	on
  4270 00:0C25: 90 03        	bcc	*+5
  4271 00:0C27: 82 FF FE     	brl	L10066
  4272 00:0C2A: A5 0D        	lda	<L187+ch_1
  4273 00:0C2C: 29 7F 00     	and	#<$7f
  4274 00:0C2F: 38           	sec
  4275 00:0C30: E9 20 00     	sbc	#<$20
  4276 00:0C33: 70 03        	bvs	L196
  4277 00:0C35: 49 00 80     	eor	#$8000
  4278                        L196:
  4279 00:0C38: 30 03        	bmi	*+5
  4280 00:0C3A: 82 EC FE     	brl	L10066
  4281 00:0C3D: A5 0D        	lda	<L187+ch_1
  4282 00:0C3F: 29 7F 00     	and	#<$7f
  4283 00:0C42: 38           	sec
  4284 00:0C43: E9 7F 00     	sbc	#<$7f
  4285 00:0C46: 70 03        	bvs	L198
  4286 00:0C48: 49 00 80     	eor	#$8000
  4287                        L198:
  4288 00:0C4B: 10 03        	bpl	*+5
  4289 00:0C4D: 82 D9 FE     	brl	L10066
  4290                        ;                    for (i = curlen; i > curpos; 
                    i--)
  4291 00:0C50: E2 20        	sep	#$20
  4292                        	longa	off
  4293 00:0C52: A5 0E        	lda	<L187+curlen_1
  4294 00:0C54: 85 12        	sta	<L187+i_1
  4295 00:0C56: C2 20        	rep	#$20
  4296                        	longa	on
  4297 00:0C58: 80 1D        	bra	L10090
  4298                        L10089:
  4299                        ;                    {
  4300                        ;                        str[i] = str[i - 1];
  4301 00:0C5A: A5 12        	lda	<L187+i_1
  4302 00:0C5C: 29 FF 00     	and	#$ff
  4303 00:0C5F: 85 01        	sta	<R0
  4304 00:0C61: A5 12        	lda	<L187+i_1
  4305 00:0C63: 29 FF 00     	and	#$ff
  4306 00:0C66: 18           	clc
  4307 00:0C67: 69 FF FF     	adc	#$ffff
  4308 00:0C6A: A8           	tay
  4309 00:0C6B: E2 20        	sep	#$20
  4310                        	longa	off
  4311 00:0C6D: B7 16        	lda	[<L186+str_0],Y
  4312 00:0C6F: A4 01        	ldy	<R0
  4313 00:0C71: 97 16        	sta	[<L186+str_0],Y
  4314                        ;                    }
  4315 00:0C73: C6 12        	dec	<L187+i_1
  4316 00:0C75: C2 20        	rep	#$20
  4317                        	longa	on
  4318                        L10090:
  Tue Jan 26 2021 17:07                                                Page 89


  4319 00:0C77: E2 20        	sep	#$20
  4320                        	longa	off
  4321 00:0C79: A5 0F        	lda	<L187+curpos_1
  4322 00:0C7B: C5 12        	cmp	<L187+i_1
  4323 00:0C7D: C2 20        	rep	#$20
  4324                        	longa	on
  4325 00:0C7F: 90 D9        	bcc	L10089
  4326                        ;                    insch (ch);
  4327 00:0C81: D4 0D        	pei	<L187+ch_1
  4328 00:0C83: 22 xx xx xx  	jsl	~~insch
  4329                        ;                    str[curpos] = ch;
  4330 00:0C87: A5 0F        	lda	<L187+curpos_1
  4331 00:0C89: 29 FF 00     	and	#$ff
  4332 00:0C8C: A8           	tay
  4333 00:0C8D: E2 20        	sep	#$20
  4334                        	longa	off
  4335 00:0C8F: A5 0D        	lda	<L187+ch_1
  4336 00:0C91: 97 16        	sta	[<L186+str_0],Y
  4337                        ;                    curpos++;
  4338 00:0C93: E6 0F        	inc	<L187+curpos_1
  4339                        ;                    curlen++;
  4340 00:0C95: E6 0E        	inc	<L187+curlen_1
  4341 00:0C97: C2 20        	rep	#$20
  4342                        	longa	on
  4343                        ;                }
  4344                        ;        }
  4345 00:0C99: 82 8D FE     	brl	L10066
  4346                        L10064:
  4347                        ;    str[curlen] = '\0';
  4348 00:0C9C: A5 0E        	lda	<L187+curlen_1
  4349 00:0C9E: 29 FF 00     	and	#$ff
  4350 00:0CA1: A8           	tay
  4351 00:0CA2: E2 20        	sep	#$20
  4352                        	longa	off
  4353 00:0CA4: A9 00        	lda	#$0
  4354 00:0CA6: 97 16        	sta	[<L186+str_0],Y
  4355 00:0CA8: C2 20        	rep	#$20
  4356                        	longa	on
  4357                        ;}
  4358 00:0CAA: A5 14        	lda	<L186+2
  4359 00:0CAC: 85 1A        	sta	<L186+2+6
  4360 00:0CAE: A5 13        	lda	<L186+1
  4361 00:0CB0: 85 19        	sta	<L186+1+6
  4362 00:0CB2: 2B           	pld
  4363 00:0CB3: 3B           	tsc
  4364 00:0CB4: 18           	clc
  4365 00:0CB5: 69 18 00     	adc	#L186+6
  4366 00:0CB8: 1B           	tcs
  4367 00:0CB9: 6B           	rtl
  4368             00000012   L186	equ	18
  4369             0000000D   L187	equ	13
  4370                        	ends
  4371                        	efunc
  4372                        ;
  4373                        ;/*-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  4374                        ; * MCURSES: endwin
  Tue Jan 26 2021 17:07                                                Page 90


  4375                        ; *-----------------------------------------------
                    ------------------------------------------------------------
                    ----------------------------------------
  4376                        ; */
  4377                        ;void
  4378                        ;endwin (void)
  4379                        ;{
  4380                        	code
  4381                        	xdef	~~endwin
  4382                        	func
  4383                        ~~endwin:
  4384                        	longa	on
  4385                        	longi	on
  4386                        ;    move (LINES - 1, 0);                         
                                                   // move cursor to last line
  4387 00:0CBA: F4 00 00     	pea	#<$0
  4388 00:0CBD: F4 18 00     	pea	#<$18
  4389 00:0CC0: 22 xx xx xx  	jsl	~~move
  4390                        ;    clrtoeol ();                                 
                                                   // clear this line
  4391 00:0CC4: 22 xx xx xx  	jsl	~~clrtoeol
  4392                        ;    mcurses_putc ('\017');                       
                                                   // switch to G0 set
  4393 00:0CC8: F4 0F 00     	pea	#<$f
  4394 00:0CCB: 22 xx xx xx  	jsl	~~mcurses_putc
  4395                        ;    curs_set (TRUE);                             
                                                   // show cursor
  4396 00:0CCF: F4 01 00     	pea	#<$1
  4397 00:0CD2: 22 xx xx xx  	jsl	~~curs_set
  4398                        ;    mcurses_puts_P(SEQ_REPLACE_MODE);            
                                                   // reset insert mode
  4399 00:0CD6: F4 xx xx     	pea	#^L167
  4400 00:0CD9: F4 xx xx     	pea	#<L167
  4401 00:0CDC: 22 xx xx xx  	jsl	~~mcurses_puts_P
  4402                        ;    refresh ();                                  
                                                   // flush output
  4403 00:0CE0: 22 xx xx xx  	jsl	~~refresh
  4404                        ;    mcurses_phyio_done ();                       
                                                   // end of physical I/O
  4405 00:0CE4: 22 xx xx xx  	jsl	~~mcurses_phyio_done
  4406                        ;    mcurses_is_up = 0;
  4407 00:0CE8: E2 20        	sep	#$20
  4408                        	longa	off
  4409 00:0CEA: 9C xx xx     	stz	|~~mcurses_is_up
  4410 00:0CED: C2 20        	rep	#$20
  4411                        	longa	on
  4412                        ;}
  4413 00:0CEF: 6B           	rtl
  4414             00000000   L202	equ	0
  4415             00000001   L203	equ	1
  4416                        	ends
  4417                        	efunc
  4418                        	data
  4419                        L167:
  4420 00:00FE: 1B 5B 34 6C  	db	$1B,$5B,$34,$6C,$00
       00:0102: 00 
  4421 00:0103:              	ends
  4422                        ;
  Tue Jan 26 2021 17:07                                                Page 91


  4423                        	xref	~~fcntl
  4424                        	xref	~~ioctl
  4425                        	xref	~~strcmp
  4426                        	xref	~~fileno
  4427                        	xref	~~fflush
  4428                        	xref	~~fputc
  4429                        	xref	~~fgetc
  4430                        	xref	~~vsprintf
  4431                        	udata
  4432                        ~~mcurses_newmode
  4433 00:0100:              	ds	17
  4434 00:0111:              	ends
  4435                        	udata
  4436                        ~~mcurses_oldmode
  4437 00:0111:              	ds	17
  4438 00:0122:              	ends
  4439                        	udata
  4440                        ~~mcurses_halfdelay
  4441 00:0122:              	ds	1
  4442 00:0123:              	ends
  4443                        	udata
  4444                        ~~mcurses_nodelay
  4445 00:0123:              	ds	1
  4446 00:0124:              	ends
  4447                        	xref	~~stdout
  4448                        	xref	~~stdin


      Lines assembled: 4448
      Errors: 0
