ca65 V2.17 - Git 59ab140
Main file   : ..\src\test.a65
Current file: ..\src\test.a65

000000r 1               		.include "homebrew.inc"
000000r 2               ;
000000r 2               ; PLATFORM = 0 : Homebrew - FPGA
000000r 2               ; PLATFORM = 1 : Homebrew - Hardware
000000r 2               ; PLATFORM = 2 : Atari XL/XE
000000r 2               ;
000000r 2               IO		= $FFFF00
000000r 2               ROMSTART	= $E000		;$8000 = Test, $E000 = Prod
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; Kernel jumptable
000000r 2               ;--------------------------------------------------------------
000000r 2               jkernel		= ROMSTART
000000r 2               jchrin		= ROMSTART + $3
000000r 2               jchrout		= ROMSTART + $6
000000r 2               jprint		= ROMSTART + $9
000000r 2               jprinthex	= ROMSTART + $C
000000r 2               jgetupper	= ROMSTART + $F
000000r 2               jgethex		= ROMSTART + $12
000000r 2               jgetadr		= ROMSTART + $15
000000r 2               jnewline	= ROMSTART + $18
000000r 2               jspace		= ROMSTART + $1B
000000r 2               jhexdownload	= ROMSTART + $1E
000000r 2               jmemdump	= ROMSTART + $21
000000r 2               jinputhex	= ROMSTART + $24
000000r 2               jchangemem	= ROMSTART + $27
000000r 2               jfillmem	= ROMSTART + $2A
000000r 2               jfill		= ROMSTART + $2D
000000r 2               jnmin		= ROMSTART + $30
000000r 2               jirqn		= ROMSTART + $33
000000r 2               jbrk		= ROMSTART + $36
000000r 2               jtime		= ROMSTART + $39
000000r 2               jmenu		= ROMSTART + $3C
000000r 2               jdisass		= ROMSTART + $3F
000000r 2               jdisone		= ROMSTART + $42
000000r 2               jrs232v		= ROMSTART + $45
000000r 2               jsetaddress	= ROMSTART + $48
000000r 2               jmemdump16	= ROMSTART + $4B
000000r 2               jkgbirq		= ROMSTART + $4E	;(4-bytes !!)
000000r 2               jdisass24	= ROMSTART + $52
000000r 2               jcopn		= ROMSTART + $55
000000r 2               
000000r 2               ;
000000r 2               ; Dummy vectors
000000r 2               ;
000000r 2               jcope		= ROMSTART + $30
000000r 2               jaborte		= ROMSTART + $30
000000r 2               jabortn		= ROMSTART + $30
000000r 2               jirqe		= ROMSTART + $30
000000r 2               jnmie		= ROMSTART + $30
000000r 2               
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; SD CARD constants
000000r 2               ;--------------------------------------------------------------
000000r 2               CMD0		= $40 +  0	;GO_IDLE_STATE	0x40, 64
000000r 2               CMD1		= $40 +  1	;reset
000000r 2               CMD8		= $40 +  8	;SEND_IF_COND	0x48, 72
000000r 2               CMD9		= $40 +  9	;SEND_CSD	0x49, 73
000000r 2               CMD13		= $40 + 13	;get_status	0x4D, 77
000000r 2               CMD17		= $40 + 17	;read  sector 	0x51, 81
000000r 2               CMD24		= $40 + 24	;write sector 	0x58, 88
000000r 2               CMD41		= $40 + 41	;SEND_OP_COND	0x69, 105 (leave idle state)
000000r 2               CMD55		= $40 + 55	;ACMD 		0x77, 119
000000r 2               CMD58		= $40 + 58	;READ_OCR	0x7A, 122
000000r 2               
000000r 2               DATA_START_BLOCK	= $FE
000000r 2               DATA_RES_MASK		= $1F
000000r 2               DATA_RES_ACCEPTED	= $05
000000r 2               
000000r 2               CMD0CHK		= $95
000000r 2               CMD1CHK		= $F9
000000r 2               CMD8CHK		= $87
000000r 2               
000000r 2               R1_IDLE_STATE	= 1
000000r 2               R1_ILLEGAL_COMMAND = 4
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; MISC constants
000000r 2               ;--------------------------------------------------------------
000000r 2               
000000r 2               NEGATIVE	= $80
000000r 2               OVERFLOW	= $40		;
000000r 2               M		= $20		; Accu 8/16-bit
000000r 2               IX		= $10		; Index 8/16-bit
000000r 2               DECIMAL_FLAG	= $08		; Decimal Flag
000000r 2               ID		= $04		; IRQ disable
000000r 2               ZERO		= $02		; zero flag
000000r 2               CARRY		= $01		; Carry
000000r 2               
000000r 2               CHARS40		= 40
000000r 2               CHARS80		= 80
000000r 2               NUMROWS		= 25
000000r 2               
000000r 2               ;	special key scan-codes
000000r 2               ALTGR		= $11	;extended!
000000r 2               ALR		= $11
000000r 2               CLSHIFT		= $12
000000r 2               CLSTRG		= $14
000000r 2               CRSHIFT		= $59
000000r 2               CCAPS		= $58
000000r 2               
000000r 2               CCHARLINE	= 80	;80 chars per line
000000r 2               
000000r 2               	.if PLATFORM = 0
000000r 2               SCRSTRT		= $F000
000000r 2               SCRBANK		= $7F
000000r 2               	.else
000000r 2               SCRSTRT		= $C000
000000r 2               	.endif
000000r 2               charset		= $F800
000000r 2               
000000r 2               jusermenu	= $0400
000000r 2               juserkeys	= $0403
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; ATARI constants
000000r 2               ;--------------------------------------------------------------
000000r 2               LEDGE	= 	0	;left edge
000000r 2               
000000r 2               MAXDEV	=	33	;offset to last possible entry of HATABS
000000r 2               
000000r 2               IOCBSZ	=	16	;length of IOCB
000000r 2               IOCFRE	=	$FF	;IOCB free indicator
000000r 2               
000000r 2               SEIOCB	=	0*IOCBSZ	;screen editor IOCB index
000000r 2               MAXIOC	=	8*IOCBSZ	;first invalid IOCB index
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ;	Device Code equates
000000r 2               ;--------------------------------------------------------------
000000r 2               CASSET	=	'C'	;cassette
000000r 2               DISK	=	'D'	;disk
000000r 2               SCREDT	=	'E'	;screen editor
000000r 2               KBD	=	'K'	;keyboard
000000r 2               PRINTR	=	'P'	;printer
000000r 2               DISPLY	=	'S'	;screen display
000000r 2               RS232D	=	'R'	;RS232 serial interface
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ;	IOCB Command Code equates
000000r 2               ;--------------------------------------------------------------
000000r 2               OPEN	=	$03	;open
000000r 2               GETREC	=	$05	;get record
000000r 2               GETCHR	=	$07	;get character(s) (binary)
000000r 2               PUTREC	=	$09	;put record
000000r 2               PUTCHR	=	$0B	;put character(s)
000000r 2               CLOSE	=	$0C	;close
000000r 2               STATUS	=	$0D	;status
000000r 2               SPECIL	=	$0E	;special
000000r 2               
000000r 2               CXIO36	= 	36
000000r 2               CXIO38	=	38
000000r 2               CXIO40	=	40
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ;	Character and Key Code equates
000000r 2               ;--------------------------------------------------------------
000000r 2               			;SUPERF <>  0
000000r 2               
000000r 2               CCHM	=	$1C	;move cursor home
000000r 2               CCBT	=	$1D	;move cursor to bottom
000000r 2               CCLM	=	$1E	;move cursor to left margin
000000r 2               CCRM	=	$1F	;move cursor to right margin
000000r 2               
000000r 2               			;SUPERF = 0
000000r 2               
000000r 2               CLS	=	$01	;clear screen
000000r 2               BACK	=	$08	;backspace
000000r 2               EOL	=	$0A	;$9B	;end of line (RETURN)
000000r 2               ESC	=	$1B	;escape key
000000r 2               CCUP	=	$1C	;cursor up
000000r 2               CCDN	=	$1D	;cursor down
000000r 2               CCLF	=	$1E	;cursor left
000000r 2               CCRT	=	$1F	;cursor right
000000r 2               CSPACE	=	$20	;space
000000r 2               TABU	=	$7F	;tabulator
000000r 2               CILN	=	$9D	;insert line
000000r 2               CDCH	=	$FE	;delete character
000000r 2               CICH	=	$FF	;insert character
000000r 2               
000000r 2               HELP	=	$11	;key code for HELP
000000r 2               CNTLF1	=	$83	;key code for CTRL-F1
000000r 2               CNTLF2	=	$84	;key code for CTRL-F2
000000r 2               CNTLF3	=	$93	;key code for CTRL-F3
000000r 2               CNTLF4	=	$94	;key code for CTRL-F4
000000r 2               CNTL1	=	$9F	;key code for CTRL-1
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ;	Status Code equates
000000r 2               ;--------------------------------------------------------------
000000r 2               SUCCES	=	1	;successful operation
000000r 2               
000000r 2               BRKABT	=	128	;BREAK key abort
000000r 2               PRVOPN	=	129	;IOCB already open error
000000r 2               NONDEV	=	130	;nonexistent device error
000000r 2               WRONLY	=	131	;IOCB opened for write only error
000000r 2               NVALID	=	132	;invalid command error
000000r 2               NOTOPN	=	133	;device/file not open error
000000r 2               BADIOC	=	134	;invalid IOCB index error
000000r 2               RDONLY	=	135	;IOCB opened for read only error
000000r 2               EOFERR	=	136	;end of file error
000000r 2               TRNRCD	=	137	;truncated record error
000000r 2               TIMOUT	=	138	;peripheral device timeout error
000000r 2               DNACK	=	139	;device does not acknowledge command error
000000r 2               FRMERR	=	140	;serial bus framing error
000000r 2               CRSROR	=	141	;cursor overrange error
000000r 2               OVRRUN	=	142	;serial bus data overrun error
000000r 2               CHKERR	=	143	;serial bus checksum error
000000r 2               DERROR	=	144	;device done (operation incomplete) error
000000r 2               BADMOD	=	145	;bad screen mode number error
000000r 2               FNCNOT	=	146	;function not implemented in handler error
000000r 2               SCRMEM	=	147	;insufficient memory for screen mode error
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; Homebrew variables Zero page
000000r 2               ;--------------------------------------------------------------
000000r 2               ptr		= $00	;2-byte misc. pointer
000000r 2               memptr		= $02	;3-byte pointer
000000r 2               
000000r 2               PCREG		= $02   ;3-byte redefine for disassembler
000000r 2               PCREGH		= PCREG+1
000000r 2               PCREGB		= PCREGH+1
000000r 2               
000000r 2               chksum		= $05	;1-byte checksum
000000r 2               
000000r 2               FATPTRS_	= $06	;2-byte FAT source pointer
000000r 2               FATPTRD_	= $08	;2-byte FAT destination pointer
000000r 2               PTRDUP		= $0A	;2-byte misc. pointer DUP
000000r 2               SECPTR		= $0C	;2-byte sector pointer
000000r 2               CHRPTR		= $0E	;2-byte sector pointer hi-res char handling
000000r 2               DEVICNO		= $10	;1-byte stdout device (0=RS232, 1=CRT)
000000r 2               TEMP		= $11	;3-byte pointer for debug16
000000r 2               TEMPH		= $12
000000r 2               TEMPB		= $13
000000r 2               PREG		= $14	;1-byte P STATUS REGISTER
000000r 2               gethex_A	= $15	;1-byte save accu
000000r 2               
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; ATARI zeropage
000000r 2               ;--------------------------------------------------------------
000000r 2               ZIOCB	=	$0020	;address of page zero IOCB
000000r 2               IOCBAS	=	$0020	;16-byte page zero IOCB
000000r 2               ICHIDZ	=	$0020	;1-byte handler ID ($FF = IOCB free)
000000r 2               ICDNOZ	=	$0021	;1-byte device number
000000r 2               ICCOMZ	=	$0022	;1-byte command code
000000r 2               ICSTAZ	=	$0023	;1-byte status of last action
000000r 2               ICBALZ	=	$0024	;1-byte buffer address low
000000r 2               ICBAHZ	=	$0025	;1-byte buffer address high
000000r 2               ICBABZ	=	$0026	;1-byte buffer address bank
000000r 2               ICBLLZ	=	$0027	;1-byte buffer length low
000000r 2               ICBLHZ	=	$0028	;1-byte buffer length high
000000r 2               ICBLBZ	=	$0029	;1-byte buffer length bank
000000r 2               ICAX1Z	=	$002A	;1-byte first auxiliary information
000000r 2               ICAX2Z	=	$002B	;1-byte second auxiliary information
000000r 2               ICSPRZ	=	$002C	;4-byte spares
000000r 2               ;ENTVEC	=	$002C	;2-byte (not used)
000000r 2               ICIDNO	=	$002E	;1-byte IOCB index (IOCB number times IOCBSZ)
000000r 2               CIOCHR	=	$002F	;1-byte character for current CIO operation
000000r 2               ;ICPTLZ	=	$0026	;1-byte low PUT-BYTE routine address-1
000000r 2               ;ICPTHZ	=	$0027	;1-byte high PUT-BYTE routine address-1
000000r 2               
000000r 2               BRKKEY	=	$0030	;1-byte BREAK key flag (0 = no BREAK)
000000r 2               ICCOMT	=	$0031	;1-byte CIO command table index
000000r 2               DSTAT	=	$0032	;1-byte display status
000000r 2               TMPCHR	=	$0033	;1-byte	temporary character
000000r 2               HOLD1	=	$0034	;1-byte	temporary
000000r 2               LMARGN	=	$0035	;1-byte text column left margin
000000r 2               RMARGN	=	$0036	;1-byte text column right margin
000000r 2               ROWCRS	=	$0037	;1-byte cursor row
000000r 2               COLCRS	=	$0038	;2-byte cursor column
000000r 2               ALTACT	=	$003A	;1-byte ALRGR active --display mode
000000r 2               SAVMSC	=	$003B	;2-byte saved memory scan counter
000000r 2               OLDROW	=	$003D	;1-byte prior row
000000r 2               OLDCOL	=	$003E	;2-byte prior column
000000r 2               OLDCHR	=	$0040	;1-byte saved character under cursor
000000r 2               OLDADR	=	$0041	;3-byte saved cursor memory address
000000r 2               
000000r 2               LOGCOL	=	$0044	;1-byte logical line cursor column
000000r 2               
000000r 2               ;DUMMY	=	$0044	;2-byte temporary address
000000r 2               
000000r 2               ;MLTTMP	=	$0046	;1-byte temporary
000000r 2               ;OPNTMP	=	$0046	;1-byte open temporary
000000r 2               TOADR	=	$0045	;3-byte destination address
000000r 2               
000000r 2               SAVADR	=	$0048	;3-byte saved address
000000r 2               FRMADR	=	$0048	;3-byte source address
000000r 2               
000000r 2               RAMTOP	=	$004B	;1-byte RAM size
000000r 2               BUFCNT	=	$004C	;1-byte buffer count (logical line size)
000000r 2               BUFSTR	=	$004D	;2-byte buffer start pointer
000000r 2               BITMSK	=	$004F	;1-byte bit mask for bit map operation
000000r 2               ;SHFAMT	=	$004F	;1-byte shift amount for pixel justification
000000r 2               ROWAC	=	$0050	;2-byte draw working row
000000r 2               COLAC	=	$0052	;2-byte draw working column
000000r 2               ENDPT	=	$0054	;2-byte end point
000000r 2               DELTAR	=	$0056	;1-byte row difference
000000r 2               DELTAC	=	$0057	;2-byte column difference
000000r 2               SWPFLG	=	$0059	;1-byte split screen swap flag (0 = not swapped)
000000r 2               INSDAT	=	$005A	;1-byte temporary
000000r 2               COUNTR	=	$005B	;2-byte draw iteration count
000000r 2               ADRESS	=	$005D	;3-byte temporary address
000000r 2               
000000r 2               
000000r 2               
000000r 2               XREG	= ADRESS+3       ; X REGISTER
000000r 2               XREGH 	= XREG+1
000000r 2               
000000r 2               YREG	= XREGH+1        ; Y REGISTER
000000r 2               YREGH	= YREG+1
000000r 2               
000000r 2               AREG	= YREGH+1        ; ACCUMULATOR
000000r 2               AREGH	= AREG+1
000000r 2               
000000r 2               STACK	= AREGH+1        ; STACK POINTER
000000r 2               STACKH	= STACK+1
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; page 2
000000r 2               ;--------------------------------------------------------------
000000r 2               TXTROW	=	$0200	;1-byte split screen text cursor row
000000r 2               TXTCOL	=	$0201	;2-byte split screen text cursor column
000000r 2               TINDEX	=	$0203	;1-byte split scree text mode
000000r 2               TXTMSC	=	$0204	;2-byte split screen memory scan counter
000000r 2               TXTOLD	=	$0206	;6-byte OLDROW, OLDCOL, OLDCHR, OLDADR for text
000000r 2               HOLD3	=	$020C	;1-byte temporary
000000r 2               SUBTMP	=	$020D	;1-byte temporary
000000r 2               HOLD2	=	$020E	;1-byte (not used)
000000r 2               ;DMASK	=	$020F	;1-byte display (pixel location) mask
000000r 2               ;TMPLBT	=	$0210	;1-byte (not used)
000000r 2               RASVEC	=	$020F	;raster interrupt vector
000000r 2               ESCFLG	=	$0211	;1-byte escape flag ($80 = ESC detected)
000000r 2               TABMAP	=	$0212	;15-byte (120-bit) tab stop bit map
000000r 2               LOGMAP	=	$0221	;8-byte (32-bit) logical line bit map
000000r 2               CLSFLG	=	$0229	;1-byte clear screen flag
000000r 2               FILFLG	=	$022A	;1-byte right fill flag (0 = no fill)
000000r 2               TMPROW	=	$022B	;1-byte temporary row
000000r 2               TMPCOL	=	$022C	;2-byte temporary column
000000r 2               SCRFLG	=	$022E	;1-byte scroll occurence flag (0 = not occurred)
000000r 2               HOLD4	=	$022F	;1-byte temporary
000000r 2               DRETRY	=	$0230	;1-byte number of device retries
000000r 2               SHFLOK	=	$0231	;1-byte shift/control lock flags
000000r 2               BOTSCR	=	$0232	;1-byte screen bottom (24 = normal, 4 = split)
000000r 2               
000000r 2               DVSTAT	=	$0233	;4-byte device status buffer
000000r 2               CRSINH	=	$0237	;1-byte cursor inhibit (0 = cursor on)
000000r 2               DUMMY00	=	$0238	;1-byte key debounce delay timer
000000r 2               CH1	=	$0239	;1-byte prior keyboard character
000000r 2               
000000r 2               NEWROW	=	$023A	;1-byte draw destination row
000000r 2               NEWCOL	=	$023B	;2-byte draw destination column
000000r 2               ROWINC	=	$023D	;1-byte draw row increment
000000r 2               COLINC	=	$023E	;1-byte	draw column increment
000000r 2               
000000r 2               CHAR	=	$023F	;1-byte internal character
000000r 2               ATACHR	=	$0240	;1-byte ATASCII character or plot point
000000r 2               FILDAT	=	$0241	;1-byte right fill data
000000r 2               DSPFLG	=	$0242	;1-byte control character display flag (0 = no)
000000r 2               SSFLAG	=	$0243	;1-byte start/stop flag (0 = not stopped)
000000r 2               
000000r 2               SUPERF	=	$0244	;1-byte editor super function flag :
000000r 2               ;DERRF	=	$0245	;1-byte screen OPEN error flag (0 = not)
000000r 2               
000000r 2               skipone	=	$0246	;1-byte
000000r 2               extended=	$0247	;1-byte
000000r 2               ADRCNT	=	$0248	;1-byte counter for setaddress
000000r 2               
000000r 2               IRQVEC	=	$0249	;2-byte
000000r 2               NMIVEC	=	$024B	;2-byte
000000r 2               jmpind	=	$024D	;1-byte $4C = JMP
000000r 2               jmpptr	=	$024E	;2-byte
000000r 2               DBUFLO	=	$0250	;2-byte ;2-byte adr of 512-byte buffer for SD CARD read/Write
000000r 2               sdcmd	=	$0252	;1-byte SD card command
000000r 2               sdadr	=	$0253	;4-byte SD card address
000000r 2               sdchk	=	$0257	;1-byte SD card checksum
000000r 2               sdres	=	$0258	;1-byte SD card R1 result
000000r 2               sddebug =	$0259	;1-byte SD card debug flag
000000r 2               FVEC	=	$025A	;2-byte executable file start vector
000000r 2               FINIT	=	$025C	;2-byte executable file init vector
000000r 2               JSLOP	=	$025E	;1-byte JSL-opcode
000000r 2               JSLADR	=	$025F	;3-byte JSL address
000000r 2               JSLRTS	=	$0262	;1-byte RTS-opcode
000000r 2               JMLOP	=	$0263	;1-byte JML-opcode
000000r 2               JMLADR	=	$0264	;3-byte JML address
000000r 2               DEVSTAT	=	$0269	;4-byte device status
000000r 2               SERCNT0	= 	$026D	;1-byte RS232 0 control bits
000000r 2               SERCNT1	= 	$026E	;1-byte RS232 1 control bits
000000r 2               CONST5MS=	$026F	;2-byte timer const
000000r 2               ;FSTART	=	$0271	;2-byte file load start vector save
000000r 2               ;FEND	=	$0273	;2-byte file load end vector save
000000r 2               ;FSTARTS=	$0275	;2-byte file load start vector save
000000r 2               ;FENDS	=	$0277	;2-byte file load end vector save
000000r 2               ;FDIFF	=	$0279	;2-byte into difference save
000000r 2               MONACT	=	$027B	;4-byte break-monitor active flags
000000r 2               
000000r 2               IOCBSTRT=	$0280		;start of IOCB
000000r 2               IOCB	=	IOCBSTRT + $0	;128-byte I/O control blocks area
000000r 2               ICHID	=	IOCBSTRT + $0	;1-byte handler ID ($FF = free)
000000r 2               ICDNO	=	IOCBSTRT + $1	;1-byte device number
000000r 2               ICCOM	=	IOCBSTRT + $2	;1-byte command code
000000r 2               ICSTA	=	IOCBSTRT + $3	;1-byte status of last action
000000r 2               ICBAL	=	IOCBSTRT + $4	;1-byte low buffer address
000000r 2               ICBAH	=	IOCBSTRT + $5	;1-byte high buffer address
000000r 2               ICBAB	=	IOCBSTRT + $6	;1-byte bank buffer address
000000r 2               ICBLL	=	IOCBSTRT + $7	;1-byte low buffer length
000000r 2               ICBLH	=	IOCBSTRT + $8	;1-byte high buffer length
000000r 2               ICBLB	=	IOCBSTRT + $9	;1-byte bank buffer length
000000r 2               ICAX1	=	IOCBSTRT + $A	;1-byte first auxiliary information
000000r 2               ICAX2	=	IOCBSTRT + $B	;1-byte second auxiliary information
000000r 2               ICSPR	=	IOCBSTRT + $C	;4-byte work area
000000r 2               ;ICPTL	=	IOCBSTRT + $6	;1-byte low PUT-BYTE routine address-1
000000r 2               ;ICPTH	=	IOCBSTRT + $7	;1-byte high PUT-BYTE routine address-1
000000r 2               ;--------------------------------------------------------------
000000r 2               ; page 3
000000r 2               ;--------------------------------------------------------------
000000r 2               HATABS	=	$0300	;12 * 3-byte entries for HATABS
000000r 2               ;MONTAB	=	$0324	;8-byte break-monitor pointer
000000r 2               flags	=	$032C	;1-byte processor flags during IRQ
000000r 2               IRQPS2S	=	$032D	;1-byte PS2-status from IRQ
000000r 2               IRQPS2D =	$032E	;1-byte PS2-data from IRQ
000000r 2               DEVICS	=	$032F	;1-byte DEVICENO SAVE
000000r 2               BRKBRA	=	$0330	;1-byte branch opcode
000000r 2               BRKOFF	=	$0331	;1-byte branch offset (always 3)
000000r 2               BRKNOT	=	$0332	;1-byte jmp branch not taken (always $4c)
000000r 2               BRKJMP0	=	$0333	;2-byte jmp address branch not taken
000000r 2               BRKTAK	=	$0335	;1-byte jmp branch taken (always $4c)
000000r 2               BRKJMP1	=	$0336	;2-byte jmp address branch taken
000000r 2               BRKVEC	=	$0338	;2-byte BRK vector (65816)
000000r 2               WARMFLAG=	$033A	;1-byte Warmstart = $CA
000000r 2               ARGC	=	$033B	;2-byte number of args
000000r 2               ARGV	=	$033D	;8*2-bytes pointer to arg strings
000000r 2               NCODE	= 	$034D	;1-byte NEXT CODE TO BE TRACED
000000r 2               OPCREG	=	$034E	;3-byte OLD PROGRAM COUNTER VALUE
000000r 2               OPCREGH	=	$034F
000000r 2               OPCREGB	=	$0350
000000r 2               CODE	=	$0351	;1-byte CURRENT CODE TO BE TRACED
000000r 2               OPRNDL	=	$0352	;3-byte OPERANDS OF CURRENT INSTRUCTION
000000r 2               OPRNDH	=	$0353
000000r 2               OPRNDB	=	$0354
000000r 2               ADDRMODE=	$0355	; ADDRESS MODE OF CURRENT OPCODE
000000r 2               
000000r 2               MNX	=	$0356 	;2-byte MNEMONIC INDEX
000000r 2                                       ; FROM ATTRIBUTE TABLE
000000r 2               OPLEN 	=	$0358   ;1-byte LENGTH OF OPERATION,
000000r 2                                       ; INCLUDING INSTRUCTION
000000r 2               MOVENEG	=	$0359	;4-byte MVP + operands + RTS
000000r 2               MOVEBNK	=	$035A
000000r 2               MOVERTS	=	$035C	;RTS
000000r 2               
000000r 2               MODBASE	=	$035D	;2-byte base for next module to be loaded
000000r 2               
000000r 2               MONTAB	=	$0360	;4*4-byte break-monitor pointer
000000r 2               
000000r 2               COLCNT	=	$0370	;
000000r 2               COPVEC	=	$0371	;2-byte COP vector
000000r 2               
000000r 2               MOUSEX	=	$0373	;2-byte Mouse-X
000000r 2               MOUSEY	=	$0375	;2-byte Mouse-Y
000000r 2               MOUBUT	=	$0377	;Mouse-Button Bit7:links, Bit6:rechts
000000r 2               
000000r 2               NEXTFRE	=	$0378	;
000000r 2               
000000r 2               FNAME	= 	$0380	;128-byte buffer for line
000000r 2               ;--------------------------------------------------------------
000000r 2               ; page 4
000000r 2               ;--------------------------------------------------------------
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; Homebrew MC6845 graphics
000000r 2               ;--------------------------------------------------------------
000000r 2               crtadr		= $B800
000000r 2               crtdata		= $B801
000000r 2               
000000r 2               crtcol0		= $B880
000000r 2               crtcol1		= $B881
000000r 2               crtcol2		= $B882
000000r 2               crtcol3		= $B883
000000r 2               crtcolb		= crtcol3
000000r 2               
000000r 2               crtcntl		= $B8C0
000000r 2               crtirq		= $B8C1
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; Homebrew MOS6551 serial card
000000r 2               ;--------------------------------------------------------------
000000r 2               ;data6551	= $DB00
000000r 2               ;status6551	= $DB01
000000r 2               ;command6551	= $DB02
000000r 2               ;control6551	= $DB03
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; Homebrew YM2612 registers
000000r 2               ;--------------------------------------------------------------
000000r 2               YMADR0		= $BFB0
000000r 2               YMDAT0		= $BFB1
000000r 2               YMADR1		= $BFB2
000000r 2               YMDAT1		= $BFB3
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; Homebrew	Memory Control
000000r 2               ;--------------------------------------------------------------
000000r 2               MEMCNTL		= $BFC0
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; Homebrew PS2-keyboard and SD-Card
000000r 2               ;--------------------------------------------------------------
000000r 2               PS2		= IO + $D0
000000r 2               PS2DATA		= PS2 + 0	; keyboard scancode
000000r 2               PS2STATUS	= PS2 + 1	; read: Bit0 = 0 scancode available
000000r 2               SPIDATA		= PS2 + 2	; read: Bit0 serial data in, write: Bit7 serial data out
000000r 2               SPIMOSI		= PS2 + 3	; write: Bit0: 1 = Mosi always 1, Bit1: write: CS of SDCard
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; Homebrew Centronics 8-bit latch
000000r 2               ;--------------------------------------------------------------
000000r 2               CENTRONICS	= $BFE0
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; Homebrew MC68681 double serial card
000000r 2               ;--------------------------------------------------------------
000000r 2               SB		= $BFF0
000000r 2               
000000r 2               MODEA		= 0
000000r 2               STATA		= 1
000000r 2               CLOCKA		= 1
000000r 2               COMMA		= 2
000000r 2               RECA		= 3
000000r 2               TRANSA		= 3
000000r 2               IPCHANGE	= 4
000000r 2               AUXCTRL		= 4
000000r 2               ISR		= 5
000000r 2               IMR		= 5
000000r 2               CNTMSB		= 6
000000r 2               CNTLSB		= 7
000000r 2               MODEB		= 8
000000r 2               STATB		= 9
000000r 2               CLOCKB		= 9
000000r 2               COMMB		= 10
000000r 2               RECB		= 11
000000r 2               TRANSB		= 11
000000r 2               IVR		= 12
000000r 2               INPORT		= 13
000000r 2               OPCTRL		= 13
000000r 2               STRTCNT		= 14
000000r 2               OPSET		= 14
000000r 2               STOPCNT		= 15
000000r 2               OPRES		= 15
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; 6502 CPU vectors
000000r 2               ;--------------------------------------------------------------
000000r 2               NMI		= $FFFA
000000r 2               RESET		= $FFFC
000000r 2               IRQ		= $FFFE
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; FPGA misc. stuff
000000r 2               ;--------------------------------------------------------------
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; RESET, TIMER, HARDWARE MULT.
000000r 2               ;--------------------------------------------------------------
000000r 2               SOFTRESET	= IO + $80
000000r 2               TIMERLO 	= IO + $81
000000r 2               TIMERHI		= IO + $82
000000r 2               TIMERST		= IO + $83
000000r 2               WORDLO		= IO + $84
000000r 2               WORDHI		= IO + $85
000000r 2               DOTS		= IO + $86
000000r 2               
000000r 2               CCONST5MS	= 62400-1
000000r 2               ;--------------------------------------------------------------
000000r 2               ; SPI SD-card interface
000000r 2               ;--------------------------------------------------------------
000000r 2               SPI		= IO + $90
000000r 2               SPICNTL		= SPI
000000r 2               SPISS		= SPI + 1
000000r 2               SPIDAT		= SPI + 2
000000r 2               SPISTAT		= SPI + 3
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; 16450 ACIA registers (Uart1, Mouse)
000000r 2               ;--------------------------------------------------------------
000000r 2               ACIA1		= IO + $A0
000000r 2               RBR1		= ACIA1
000000r 2               THR1		= ACIA1
000000r 2               IER1		= ACIA1 + 1
000000r 2               IIR1		= ACIA1 + 2
000000r 2               LCR1		= ACIA1 + 3
000000r 2               MCR1		= ACIA1 + 4
000000r 2               LSR1		= ACIA1 + 5
000000r 2               MSR1		= ACIA1 + 6
000000r 2               SCR1		= ACIA1 + 7
000000r 2               DLL1		= ACIA1
000000r 2               DLM1		= ACIA1 + 1
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; graphics system
000000r 2               ;--------------------------------------------------------------
000000r 2               DISP			= $FFFE00
000000r 2               colorBorderLo		= DISP + 0
000000r 2               colorBorderHi		= DISP + 1
000000r 2               colorBackgroundLo	= DISP + 2
000000r 2               colorBackgroundHi	= DISP + 3
000000r 2               color00Lo		= DISP + 4
000000r 2               color00Hi		= DISP + 5
000000r 2               screenBaseLo		= DISP + 6
000000r 2               screenBaseHi		= DISP + 7
000000r 2               screenBaseBank		= DISP + 8
000000r 2               control			= DISP + 9
000000r 2               cursorLo		= DISP + 10
000000r 2               cursorHi		= DISP + 11
000000r 2               rasterLo		= DISP + 12
000000r 2               rasterHi		= DISP + 13
000000r 2               dispStatus		= DISP + 14
000000r 2               vcountLo		= DISP + 15
000000r 2               vcountHi		= DISP + 16
000000r 2               ;spriteBaseLo		= DISP + 17
000000r 2               ;spriteBaseHi		= DISP + 18
000000r 2               spriteBaseBank		= DISP + 19
000000r 2               spriteCntl		= DISP + 20
000000r 2               sprite0addr		= DISP + 21
000000r 2               sprite1addr             = DISP + 22
000000r 2               sprite2addr             = DISP + 23
000000r 2               sprite3addr             = DISP + 24
000000r 2               sprite4addr             = DISP + 25
000000r 2               sprite5addr             = DISP + 26
000000r 2               sprite6addr             = DISP + 27
000000r 2               sprite7addr             = DISP + 28
000000r 2               xpos0			= DISP + 32
000000r 2               xpos1			= DISP + 33
000000r 2               xpos2			= DISP + 34
000000r 2               xpos3			= DISP + 35
000000r 2               xpos4			= DISP + 36
000000r 2               xpos5			= DISP + 37
000000r 2               xpos6			= DISP + 38
000000r 2               xpos7			= DISP + 39
000000r 2               xposHi			= DISP + 40
000000r 2               
000000r 2               palette 		= $FFFC00
000000r 2               spritePalette		= $FFFE40
000000r 2               sprite0			= $7E0000
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; 16450 ACIA registers (Uart0)
000000r 2               ;--------------------------------------------------------------
000000r 2               ACIA0		= IO + $E0
000000r 2               RBR0		= ACIA0
000000r 2               THR0		= ACIA0
000000r 2               IER0		= ACIA0 + 1
000000r 2               IIR0		= ACIA0 + 2
000000r 2               LCR0		= ACIA0 + 3
000000r 2               MCR0		= ACIA0 + 4
000000r 2               LSR0		= ACIA0 + 5
000000r 2               MSR0		= ACIA0 + 6
000000r 2               SCR0		= ACIA0 + 7
000000r 2               DLL0		= ACIA0
000000r 2               DLM0		= ACIA0 + 1
000000r 2               
000000r 2               SECPTRLO	= ACIA0 + 8
000000r 2               SECPTRHI	= ACIA0 + 9
000000r 2               READWRITE	= ACIA0 + 10
000000r 2               BUFPTRLO	= ACIA0 + 11
000000r 2               BUFPTRHI	= ACIA0 + 12
000000r 2               
000000r 2               
000000r 1               ;		.include "myos.inc"
000000r 1               
000000r 1               		.org $0A00
000A00  1               		.a8
000A00  1               		.i8
000A00  1               		.smart
000A00  1               
000A00  1               DPAGE		=	$3333
000A00  1               L19		=	0
000A00  1               xp_1		=	$1
000A00  1               plte_1		=	$3
000A00  1               palette_1	=	$7
000A00  1               R0		=	$11
000A00  1               R1		=	$15
000A00  1               
000A00  1               mouseloop:
000A00  1  9C 73 0A     		stz	lbutton
000A03  1  9C 74 0A     		stz	rbutton
000A06  1               
000A06  1  20 64 0A     		jsr	mousein
000A09  1  89 40        		bit	#$40		;this bit must be one
000A0B  1  F0 F3        		beq	mouseloop
000A0D  1  A8           		tay
000A0E  1               
000A0E  1  20 64 0A     		jsr	mousein
000A11  1  29 7F        		and	#$7f
000A13  1  8D 71 0A     		sta	dx
000A16  1  20 64 0A     		jsr	mousein
000A19  1  29 7F        		and	#$7f
000A1B  1  8D 72 0A     		sta	dy
000A1E  1               
000A1E  1  98           		tya
000A1F  1  0A           		asl
000A20  1  0A           		asl
000A21  1  0A           		asl
000A22  1  2E 73 0A     		rol	lbutton
000A25  1  0A           		asl
000A26  1  2E 74 0A     		rol	rbutton
000A29  1               
000A29  1  A8           		tay
000A2A  1  29 C0        		and	#%11000000
000A2C  1  0D 72 0A     		ora	dy
000A2F  1  8D 72 0A     		sta	dy
000A32  1  98           		tya
000A33  1  0A           		asl
000A34  1  0A           		asl
000A35  1  0D 71 0A     		ora	dx
000A38  1  8D 71 0A     		sta	dx
000A3B  1               
000A3B  1  AD 73 0A     		lda	lbutton
000A3E  1  20 0C E0     		jsr	jprinthex
000A41  1  20 1B E0     		jsr	jspace
000A44  1  AD 74 0A     		lda	rbutton
000A47  1  20 0C E0     		jsr	jprinthex
000A4A  1  20 1B E0     		jsr	jspace
000A4D  1  AD 71 0A     		lda	dx
000A50  1  20 0C E0     		jsr	jprinthex
000A53  1  20 1B E0     		jsr	jspace
000A56  1  AD 72 0A     		lda	dy
000A59  1  20 0C E0     		jsr	jprinthex
000A5C  1  20 1B E0     		jsr	jspace
000A5F  1               
000A5F  1  20 18 E0     		jsr	jnewline
000A62  1  80 9C        		bra	mouseloop
000A64  1               
000A64  1  AF A5 FF FF  mousein:	lda	LSR1
000A68  1  29 01        		and	#1
000A6A  1  F0 F8        		beq	mousein
000A6C  1  AF A0 FF FF  		lda	RBR1
000A70  1  60           		rts
000A71  1               
000A71  1  00           dx:		.byte 0
000A72  1  00           dy:		.byte 0
000A73  1  00           lbutton:	.byte 0
000A74  1  00           rbutton:	.byte 0
000A75  1               
000A75  1               
000A75  1               
000A75  1               
000A75  1  78           		sei
000A76  1               ;		wdm 7
000A76  1  F4 33 33     		pea	DPAGE
000A79  1  2B           		pld
000A7A  1               
000A7A  1  C2 20        		rep	#M
000A7C  1               		.A16
000A7C  1               ;				for(x = 0, xp = 0; x < y; x++, xp++) {
000A7C  1  64 01        		stz	<L19+xp_1
000A7E  1               L10030:
000A7E  1               ;					palette[xp] = *plte >> 5;
000A7E  1  A9 CB 0A     		lda	#data
000A81  1  85 03        		sta	L19+plte_1
000A83  1  A9 00 00     		lda	#0
000A86  1  85 05        		sta	L19+plte_1+2
000A88  1               
000A88  1  A9 00 FC     		lda	#$FC00
000A8B  1  85 07        		sta	palette_1
000A8D  1  A9 FF 00     		lda	#$00FF
000A90  1  85 09        		sta	palette_1+2
000A92  1               
000A92  1  E2 20        		sep	#$20
000A94  1               		.A8
000A94  1  A7 03        		lda	[<L19+plte_1]
000A96  1  4A           		lsr	A
000A97  1  4A           		lsr	A
000A98  1  4A           		lsr	A
000A99  1  4A           		lsr	A
000A9A  1  4A           		lsr	A
000A9B  1  A4 01        		ldy	<L19+xp_1
000A9D  1  97 07        		sta	[<L19+palette_1],Y
000A9F  1  C2 20        		rep	#$20
000AA1  1               		.A16
000AA1  1               ;					plte++;
000AA1  1  E6 03        		inc	<L19+plte_1
000AA3  1  D0 02        		bne	L33
000AA5  1  E6 05        		inc	<L19+plte_1+2
000AA7  1               L33:
000AA7  1               ;					palette[xp] |= ((*plte >> 2) & 0x38);
000AA7  1  A5 01        		lda	<L19+xp_1
000AA9  1  85 11        		sta	<R0
000AAB  1  64 13        		stz	<R0+2
000AAD  1  A5 07        		lda	<L19+palette_1
000AAF  1  18           		clc
000AB0  1  65 11        		adc	<R0
000AB2  1  85 15        		sta	<R1
000AB4  1  A5 09        		lda	<L19+palette_1+2
000AB6  1  65 13        		adc	<R0+2
000AB8  1  85 17        		sta	<R1+2
000ABA  1  E2 20        		sep	#$20
000ABC  1               		.A8
000ABC  1  A7 03        		lda	[<L19+plte_1]
000ABE  1  4A           		lsr	A
000ABF  1  4A           		lsr	A
000AC0  1  29 38        		and	#<$38
000AC2  1  07 15        		ora	[<R1]
000AC4  1  87 15        		sta	[<R1]
000AC6  1               
000AC6  1  F4 00 00     		pea	0
000AC9  1  2B           		pld
000ACA  1  6B           		rtl
000ACB  1               
000ACB  1  80 08 10 20  data:		.byte	128, 8, 16, 32
000ACF  1               
000ACF  1               
000ACF  1  F4 02 00     		pea	$2
000AD2  1  2B           		pld
000AD3  1               
000AD3  1  A9 CA        		lda	#$CA
000AD5  1  8F FE CA 02  		sta	$02CAFE
000AD9  1               
000AD9  1  A9 FE        		lda	#$FE
000ADB  1  85 5E        		sta	$60-2
000ADD  1  A9 CA        		lda	#$CA
000ADF  1  85 5F        		sta	$61-2
000AE1  1  A9 02        		lda	#$02
000AE3  1  85 60        		sta	$62-2
000AE5  1  85 62        		sta	$64-2
000AE7  1  64 62        		stz	$64-2
000AE9  1  E6 62        		inc	$64-2
000AEB  1  E6 62        		inc	$64-2
000AED  1               
000AED  1  A9 AC        		lda	#$AC
000AEF  1  A0 02        		ldy	#2
000AF1  1  97 5E        		sta	[$60-2],y
000AF3  1               
000AF3  1  C2 20        		rep	#M
000AF5  1  18           		clc
000AF6  1  A5 5E        		lda	$60-2
000AF8  1  65 62        		adc	$64-2
000AFA  1  85 5E        		sta	$60-2
000AFC  1  A5 60        		lda	$62-2
000AFE  1  69 00 00     		adc	#0
000B01  1  85 60        		sta	$62-2
000B03  1  E2 20        		sep	#M
000B05  1               
000B05  1  F4 00 00     		pea 	0
000B08  1  2B           		pld
000B09  1  A5 62        		lda	$62
000B0B  1  20 0C E0     		jsr	jprinthex
000B0E  1  A5 61        		lda	$61
000B10  1  20 0C E0     		jsr	jprinthex
000B13  1  A5 60        		lda	$60
000B15  1  20 0C E0     		jsr	jprinthex
000B18  1               
000B18  1               ;		sei
000B18  1               
000B18  1  F4 02 00     		pea	$2
000B1B  1  2B           		pld
000B1C  1  A9 00        		lda	#0
000B1E  1  A0 00        		ldy	#0
000B20  1  A9 11        		lda	#$11
000B22  1  07 5E        		ora	[$5E]
000B24  1  F4 00 00     		pea	$0
000B27  1  2B           		pld
000B28  1  20 0C E0     		jsr	jprinthex
000B2B  1  B7 60        		lda	[$60],y
000B2D  1  20 0C E0     		jsr	jprinthex
000B30  1  A7 60        		lda	[$60]
000B32  1  20 0C E0     		jsr	jprinthex
000B35  1  F4 00 00     		pea	$0
000B38  1  2B           		pld
000B39  1               ;		cli
000B39  1  6B           		rtl
000B3A  1               
000B3A  1  42 07        		wdm	7
000B3C  1  A9 6B        		lda	#$6B
000B3E  1  8F 00 00 01  		sta	$010000
000B42  1  22 00 00 01  		JSL	$010000
000B46  1  42 06        		WDM	6
000B48  1  6B           		RTL
000B49  1               
000B49  1  A9 75        		lda	#<copproc	;register IRQ-procedure
000B4B  1  8D 71 03     		sta	COPVEC
000B4E  1  A9 0B        		lda	#>copproc	;register IRQ-procedure
000B50  1  8D 72 03     		sta	COPVEC+1
000B53  1  78           		sei
000B54  1  42 07        		wdm	7
000B56  1  A9 CA        		lda	#$CA
000B58  1  EB           		xba
000B59  1  A9 FE        		lda	#$FE
000B5B  1  C2 30        		rep	#M+IX
000B5D  1  AA           		tax
000B5E  1  A8           		tay
000B5F  1  E2 30        		sep	#M+IX
000B61  1  42 06        		wdm	6
000B63  1  58           		cli
000B64  1               
000B64  1  48           		pha
000B65  1  A9 AA        		lda	#$AA
000B67  1  83 01        		sta	1,s
000B69  1               
000B69  1  3B           		tsc
000B6A  1  0B           		phd
000B6B  1  5B           		tcd
000B6C  1  A5 01        		lda	$1
000B6E  1  2B           		pld
000B6F  1  FA           		plx
000B70  1  20 0C E0     		jsr	jprinthex
000B73  1  58           		cli
000B74  1  6B           		rtl
000B75  1               
000B75  1               
000B75  1               
000B75  1               
000B75  1               ;STACK: DIRECT L 	1	$1f0
000B75  1               ;	DIRECT H	2	$1f1
000B75  1               ;	DATA BANK	3
000B75  1               ;	Y L		4
000B75  1               ;	Y H		5
000B75  1               ;	X L		6
000B75  1               ;	X H		7
000B75  1               ;	A L		8
000B75  1               ;	A H		9
000B75  1               ;	PREGS		10	pushed by BRK intruction
000B75  1               ;	PC L		11	pushed by BRK intruction
000B75  1               ;	PC H		12	pushed by BRK intruction
000B75  1               ;	PROGRAM BANK	13	pushed by BRK intruction
000B75  1               ;	RETURN-1 L 	14	e.g. pushed by JSR
000B75  1               ;	RETURN-H H 	15
000B75  1               
000B75  1               copproc:
000B75  1  C2 30        		rep	#M+IX
000B77  1  48           		pha
000B78  1  DA           		phx
000B79  1  5A           		phy
000B7A  1  8B           		phb
000B7B  1  0B           		phd
000B7C  1               
000B7C  1  F4 00 00     		pea	0
000B7F  1  2B           		pld
000B80  1  4B           		phk
000B81  1  AB           		plb
000B82  1               
000B82  1  E2 20        		sep	#M
000B84  1  64 10        		stz	DEVICNO
000B86  1               
000B86  1  A9 41        		lda	#'A'
000B88  1  20 21 0C     		jsr	printChar
000B8B  1  A3 09        		lda	9,s
000B8D  1  20 0C E0     		jsr	jprinthex
000B90  1  A3 08        		lda	8,s
000B92  1  20 0C E0     		jsr	jprinthex
000B95  1               
000B95  1  A9 58        		lda	#'X'
000B97  1  20 21 0C     		jsr	printChar
000B9A  1  A3 07        		lda	7,s
000B9C  1  20 0C E0     		jsr	jprinthex
000B9F  1  A3 06        		lda	6,s
000BA1  1  20 0C E0     		jsr	jprinthex
000BA4  1               
000BA4  1  A9 59        		lda	#'Y'
000BA6  1  20 21 0C     		jsr	printChar
000BA9  1  A3 05        		lda	5,s
000BAB  1  20 0C E0     		jsr	jprinthex
000BAE  1  A3 04        		lda	4,s
000BB0  1  20 0C E0     		jsr	jprinthex
000BB3  1               
000BB3  1  A9 53        		lda	#'S'
000BB5  1  20 21 0C     		jsr	printChar
000BB8  1  A9 3D        		lda	#'='
000BBA  1  C2 20        		rep	#M
000BBC  1  3B           		tsc
000BBD  1  18           		clc
000BBE  1  69 0D 00     		adc	#13
000BC1  1  E2 20        		sep	#M
000BC3  1  EB           		xba
000BC4  1  20 0C E0     		jsr	jprinthex
000BC7  1  EB           		xba
000BC8  1  20 0C E0     		jsr	jprinthex
000BCB  1               
000BCB  1  A9 44        		lda	#'D'
000BCD  1  20 21 0C     		jsr	printChar
000BD0  1  A3 02        		lda	2,s
000BD2  1  20 0C E0     		jsr	jprinthex
000BD5  1  A3 01        		lda	1,s
000BD7  1  20 0C E0     		jsr	jprinthex
000BDA  1               
000BDA  1  A9 42        		lda	#'B'
000BDC  1  20 21 0C     		jsr	printChar
000BDF  1  A3 03        		lda	3,s
000BE1  1  20 0C E0     		jsr	jprinthex
000BE4  1               
000BE4  1  A9 50        		lda	#'P'
000BE6  1  20 21 0C     		jsr	printChar
000BE9  1  A3 0A        		lda	10,s
000BEB  1  20 0C E0     		jsr	jprinthex
000BEE  1               
000BEE  1  20 1B E0     		jsr	jspace
000BF1  1  A3 0D        		lda	13,s
000BF3  1  20 0C E0     		jsr	jprinthex
000BF6  1  A9 2F        		lda	#'/'
000BF8  1  20 06 E0     		jsr	jchrout
000BFB  1  A3 0C        		lda	12,s
000BFD  1  20 0C E0     		jsr	jprinthex
000C00  1  A3 0B        		lda	11,s
000C02  1  20 0C E0     		jsr	jprinthex
000C05  1               
000C05  1  20 1B E0     		jsr	jspace
000C08  1               
000C08  1  A0 00 00     		ldy	#0
000C0B  1  A3 0D        		lda	13,s
000C0D  1  48           		pha
000C0E  1  AB           		plb
000C0F  1  B3 0B        		lda	(11,s),y
000C11  1               
000C11  1  20 0C E0     		jsr	jprinthex
000C14  1               
000C14  1  20 18 E0     		jsr	jnewline
000C17  1               
000C17  1  E6 10        		inc	DEVICNO
000C19  1  C2 30        		rep	#M+IX
000C1B  1  2B           		pld
000C1C  1  AB           		plb
000C1D  1  7A           		ply
000C1E  1  FA           		plx
000C1F  1  68           		pla
000C20  1  40           		rti
000C21  1               
000C21  1               printChar:	.A8
000C21  1  20 1B E0     		jsr	jspace
000C24  1  20 06 E0     		jsr	jchrout
000C27  1  A9 3D        		lda	#'='
000C29  1  4C 06 E0     		jmp	jchrout
000C2C  1               
000C2C  1               	.IF 0=1
000C2C  1               
000C2C  1               test_nop:
000C2C  1               		lda #$ff
000C2C  1               		nop
000C2C  1               		nop
000C2C  1               		wdm 1
000C2C  1               		rtl
000C2C  1               
000C2C  1               test_v16:
000C2C  1               		clc
000C2C  1               		rep 	#M
000C2C  1               		lda	#$8000
000C2C  1               		adc	#$1
000C2C  1               		php
000C2C  1               test_v16a:	xba
000C2C  1               		sep	#M
000C2C  1               		jsr	jprinthex
000C2C  1               		xba
000C2C  1               		jsr	jprinthex
000C2C  1               		pla
000C2C  1               		and	#$40
000C2C  1               		jsr	jprinthex
000C2C  1               
000C2C  1               		rtl
000C2C  1               
000C2C  1               test_pei:	rep	#M
000C2C  1               		lda	#$CAFE
000C2C  1               		sta	$80
000C2C  1               		pei	($80)
000C2C  1               		pla
000C2C  1               		sep	#M
000C2C  1               		xba
000C2C  1               		jsr	jprinthex
000C2C  1               		xba
000C2C  1               		jsr	jprinthex
000C2C  1               		rtl
000C2C  1               
000C2C  1               		lda	#$03
000C2C  1               sbc_loop:
000C2C  1               		sec
000C2C  1               		sbc	#$01
000C2C  1               		pha
000C2C  1               		php
000C2C  1               		jsr	jprinthex
000C2C  1               		pla
000C2C  1               		and	#1
000C2C  1               		jsr	jprinthex
000C2C  1               		jsr	jnewline
000C2C  1               		pla
000C2C  1               		cmp	#$fe
000C2C  1               		bne	sbc_loop
000C2C  1               		jsr	jnewline
000C2C  1               ;		jsr	jchrin
000C2C  1               
000C2C  1               
000C2C  1               		ldx 	#15
000C2C  1               		stz	bin
000C2C  1               		lda	#$10
000C2C  1               		sta	bin+1
000C2C  1               		stz	bcd
000C2C  1               		stz	bcd+1
000C2C  1               dec_loop:
000C2C  1               		sed
000C2C  1               		asl 	bin
000C2C  1               		rol 	bin+1
000C2C  1               
000C2C  1               		lda 	bcd
000C2C  1               		adc 	bcd
000C2C  1               		sta 	bcd
000C2C  1               		lda 	bcd+1
000C2C  1               		adc 	bcd+1
000C2C  1               		sta 	bcd+1
000C2C  1               
000C2C  1               		cld
000C2C  1               
000C2C  1               		lda bcd+1
000C2C  1               		jsr jprinthex
000C2C  1               		lda bcd
000C2C  1               		jsr jprinthex
000C2C  1               		jsr jnewline
000C2C  1               
000C2C  1               		dex
000C2C  1               		bpl dec_loop
000C2C  1               
000C2C  1               		cld
000C2C  1               		jsr jnewline
000C2C  1               ;		jsr	jchrin
000C2C  1               
000C2C  1               
000C2C  1               		rep #M
000C2C  1               		sed
000C2C  1               		lda #1234
000C2C  1               		sta bin
000C2C  1               		stz bcd
000C2C  1               
000C2C  1               		ldx #15
000C2C  1               dec_loop_16:
000C2C  1               		asl bin
000C2C  1               		php
000C2C  1               		php
000C2C  1               		sep #M
000C2C  1               		cld
000C2C  1               		pla
000C2C  1               		and #1
000C2C  1               		jsr jprinthex
000C2C  1               		rep #M
000C2C  1               		plp
000C2C  1               
000C2C  1               
000C2C  1               		lda bcd
000C2C  1               		adc bcd
000C2C  1               		sta bcd
000C2C  1               		php
000C2C  1               
000C2C  1               		sep #M
000C2C  1               		cld
000C2C  1               		lda bcd+1
000C2C  1               		jsr jprinthex
000C2C  1               		lda bcd
000C2C  1               		jsr jprinthex
000C2C  1               		pla
000C2C  1               		and #1
000C2C  1               		jsr jprinthex
000C2C  1               		jsr jnewline
000C2C  1               		rep #M
000C2C  1               		sed
000C2C  1               
000C2C  1               		dex
000C2C  1               		bpl dec_loop_16
000C2C  1               
000C2C  1               		cld
000C2C  1               		sep #M
000C2C  1               		jsr jnewline
000C2C  1               ;		jsr	jchrin
000C2C  1               
000C2C  1               addbcd16:
000C2C  1               		rep #M
000C2C  1               		lda #$0002
000C2C  1               		sta bin
000C2C  1               
000C2C  1               addbcd16a:
000C2C  1               		rep #M
000C2C  1               		sed
000C2C  1               		sec
000C2C  1               		lda bin
000C2C  1               		sbc #1
000C2C  1               		sta bin
000C2C  1               		php
000C2C  1               		cmp #$9995
000C2C  1               		beq addbcd16end
000C2C  1               
000C2C  1               		cld
000C2C  1               		sep #M
000C2C  1               		xba
000C2C  1               		jsr jprinthex
000C2C  1               		xba
000C2C  1               		jsr jprinthex
000C2C  1               		pla
000C2C  1               		and #1
000C2C  1               		jsr jprinthex
000C2C  1               		jsr jnewline
000C2C  1               		bra addbcd16a
000C2C  1               
000C2C  1               addbcd16end:
000C2C  1               		cld
000C2C  1               		sep #M
000C2C  1               		pla
000C2C  1               		rtl
000C2C  1               
000C2C  1               
000C2C  1               
000C2C  1               
000C2C  1               bin:		.byte 0, 0
000C2C  1               bcd:		.byte 0, 0
000C2C  1               
000C2C  1               test_implied:
000C2C  1               	tsc
000C2C  1               	jsr	printWord
000C2C  1               
000C2C  1               	ldx	#0
000C2C  1               	sec
000C2C  1               	sei
000C2C  1               	cld
000C2C  1               	clv
000C2C  1               	lda 	#0	;NVMXDIZC
000C2C  1               	php		;00110111
000C2C  1               	pla
000C2C  1               	cmp	#$37
000C2C  1               	beq	test_implied_1
000C2C  1               	brk
000C2C  1               test_implied_1:
000C2C  1               	tsc
000C2C  1               	jsr	printWord
000C2C  1               
000C2C  1               	lda	#$CA
000C2C  1               	pha
000C2C  1               	plb
000C2C  1               	phb
000C2C  1               	tsc
000C2C  1               	jsr	printWord
000C2C  1               
000C2C  1               	pla
000C2C  1               	cmp	#$CA
000C2C  1               	beq	test_implied_2
000C2C  1               	brk
000C2C  1               test_implied_2:
000C2C  1               	tsc
000C2C  1               	jsr	printWord
000C2C  1               	jsr	jnewline
000C2C  1               	phk
000C2C  1               	plb
000C2C  1               
000C2C  1               
000C2C  1               test_immediate:
000C2C  1               	inx
000C2C  1               	sec
000C2C  1               	lda	#0
000C2C  1               	sbc	#1
000C2C  1               	bcc	test_immediate_1
000C2C  1               	brk
000C2C  1               test_immediate_1:
000C2C  1               	cmp 	#$ff
000C2C  1               	beq	test_immediate_2
000C2C  1               	brk
000C2C  1               test_immediate_2:
000C2C  1               	tsc
000C2C  1               	jsr	printWord
000C2C  1               	pea	$CAFE
000C2C  1               	tsc
000C2C  1               	jsr	printWord
000C2C  1               	rep	#M
000C2C  1               	pla
000C2C  1               	cmp	#$CAFE
000C2C  1               	sep	#M
000C2C  1               	beq	test_immediate_3
000C2C  1               	brk
000C2C  1               test_immediate_3:
000C2C  1               	tsc
000C2C  1               	jsr	printWord
000C2C  1               	jsr	jnewline
000C2C  1               
000C2C  1               test_branch:
000C2C  1               	clc
000C2C  1               	bcc	test_branch_1
000C2C  1               	lda	#2
000C2C  1               	jsr	jprinthex
000C2C  1               	jsr	jnewline
000C2C  1               	bra	test_rti
000C2C  1               test_branch_1:
000C2C  1               	lda	#1
000C2C  1               	jsr	jprinthex
000C2C  1               	sec
000C2C  1               	bcs	test_branch+1
000C2C  1               	brk
000C2C  1               
000C2C  1               test_rti:
000C2C  1               	lda	#0
000C2C  1               	pha
000C2C  1               	lda	#>test_rti_1
000C2C  1               	pha
000C2C  1               	lda	#<test_rti_1
000C2C  1               	pha
000C2C  1               	lda	#$37
000C2C  1               	pha
000C2C  1               	rti
000C2C  1               	brk
000C2C  1               test_rti_1:
000C2C  1               	php
000C2C  1               	;brk
000C2C  1               	pla
000C2C  1               	jsr	jprinthex
000C2C  1               	jsr	jnewline
000C2C  1               	rtl
000C2C  1               
000C2C  1               
000C2C  1               printWord:
000C2C  1               	xba
000C2C  1               	jsr	jprinthex
000C2C  1               	xba
000C2C  1               	jsr	jprinthex
000C2C  1               	jmp	jspace
000C2C  1               ;CLC
000C2C  1               ;SEC
000C2C  1               ;CLI
000C2C  1               ;SEI
000C2C  1               ;CLV
000C2C  1               ;CLD
000C2C  1               ;SED
000C2C  1               ;PHP	NVMXDIZC
000C2C  1               ;ASL
000C2C  1               ;PHD
000C2C  1               ;INC
000C2C  1               ;TCS
000C2C  1               ;PLP
000C2C  1               ;ROL
000C2C  1               ;PLD
000C2C  1               ;DEC
000C2C  1               ;TSC
000C2C  1               ;RTI
000C2C  1               ;PHA
000C2C  1               ;LSR
000C2C  1               ;PHK
000C2C  1               ;PHY
000C2C  1               ;TCD
000C2C  1               ;RTS
000C2C  1               ;PLA
000C2C  1               ;ROR
000C2C  1               ;RTL
000C2C  1               ;PLY
000C2C  1               ;TDC
000C2C  1               ;DEY
000C2C  1               ;TXA
000C2C  1               ;PHB
000C2C  1               ;TYA
000C2C  1               ;TXS
000C2C  1               ;TXY
000C2C  1               ;TAY
000C2C  1               ;TAX
000C2C  1               ;PLB
000C2C  1               ;TSX
000C2C  1               ;TYX
000C2C  1               ;INY
000C2C  1               ;DEX
000C2C  1               ;WAI
000C2C  1               ;PHX
000C2C  1               ;STP
000C2C  1               ;INX
000C2C  1               ;NOP
000C2C  1               ;XBA
000C2C  1               ;PLX
000C2C  1               ;XCE
000C2C  1               
000C2C  1               
000C2C  1               loop:
000C2C  1               		sei
000C2C  1               		lda	#<irqproc	;register IRQ-procedure
000C2C  1               		sta	IRQVEC
000C2C  1               		lda	#>irqproc	;register IRQ-procedure
000C2C  1               		sta	IRQVEC+1
000C2C  1               		lda	#1
000C2C  1               		sta	TIMERST
000C2C  1               		stz 	skipone
000C2C  1               		stz 	extended
000C2C  1               		stz	ALTACT
000C2C  1               
000C2C  1               		inc	CLSFLG
000C2C  1               		inc	SHFLOK
000C2C  1               
000C2C  1               		lda	#<200
000C2C  1               		sta	cnt
000C2C  1               		lda	#>200
000C2C  1               		sta	cnt+1
000C2C  1               		sta	WORDLO
000C2C  1               		sta	WORDHI
000C2C  1               		cli
000C2C  1               		bra	loop2
000C2C  1               
000C2C  1               loop1:
000C2C  1               		lda	value
000C2C  1               		inc	value
000C2C  1               		sta	$010000
000C2C  1               		phb
000C2C  1               		rep	#M+IX
000C2C  1               		lda	#$FE
000C2C  1               		ldx	#$0
000C2C  1               		ldy	#$1
000C2C  1               		mvn	#$1,#$1
000C2C  1               		sep	#M+IX
000C2C  1               		plb
000C2C  1               ;		lda	value
000C2C  1               ;		jsr	jprinthex
000C2C  1               
000C2C  1               loop2:
000C2C  1               		lda	IRQPS2S		;key available?
000C2C  1               ;		bne	loop1		;Bit 0 = 0?, no =>
000C2C  1               		inc	IRQPS2S
000C2C  1               ;		lda	IRQPS2D
000C2C  1               ;		jsr	jchrout
000C2C  1               ;		cmp	#'x'
000C2C  1               ;		bne	loop1
000C2C  1               		rtl
000C2C  1               
000C2C  1               					;STACK: DIRECT L 	1	$1f0
000C2C  1               					;	DIRECT H	2	$1f1
000C2C  1               					;	DATA BANK	3
000C2C  1               					;	Y L		4
000C2C  1               					;	Y H		5
000C2C  1               					;	X L		6
000C2C  1               					;	X H		7
000C2C  1               					;	A L		8
000C2C  1               					;	A H		9
000C2C  1               					;	PREGS		10	pushed by BRK intruction
000C2C  1               					;	PC L		11	pushed by BRK intruction
000C2C  1               					;	PC H		12	pushed by BRK intruction
000C2C  1               					;	PROGRAM BANK	13	pushed by BRK intruction
000C2C  1               					;	RETURN-1 L 	14	e.g. pushed by JSR
000C2C  1               					;	RETURN-H H 	15
000C2C  1               
000C2C  1               irqproc:
000C2C  1               		rep	#M+IX
000C2C  1               		pha
000C2C  1               		phx
000C2C  1               		phy
000C2C  1               
000C2C  1               		phb
000C2C  1               ;		phd
000C2C  1               
000C2C  1               ;		pea	0
000C2C  1               ;		pld
000C2C  1               ;		phk
000C2C  1               ;		plb
000C2C  1               
000C2C  1               		sep	#M+IX
000C2C  1               ;		lda	#$CA
000C2C  1               ;		pha
000C2C  1               		lda	TIMERST
000C2C  1               ;		lda	#0
000C2C  1               ;		sta	TIMERST
000C2C  1               
000C2C  1               ;		lda	PS2STATUS	;key available?
000C2C  1               ;		bne	irqproc1	;Bit 0 = 0?, no =>
000C2C  1               ;		jsr	KGBIRQ
000C2C  1               
000C2C  1               irqproc1:
000C2C  1               		rep	#M+IX
000C2C  1               
000C2C  1               
000C2C  1               		lda	WORDLO
000C2C  1               		ina
000C2C  1               		sta	WORDLO
000C2C  1               
000C2C  1               		dec	cnt
000C2C  1               		bne	irqex
000C2C  1               
000C2C  1               		lda	#200
000C2C  1               		sta	cnt
000C2C  1               
000C2C  1               		sep	#M+IX
000C2C  1               		lda	DOTS
000C2C  1               		ina
000C2C  1               		sta	DOTS
000C2C  1               ;		lda	#'A'
000C2C  1               ;		sta	THR0
000C2C  1               
000C2C  1               irqex:
000C2C  1               		rep	#$30		;M=I=0=16bit
000C2C  1               
000C2C  1               ;		pld
000C2C  1               
000C2C  1               ;		sep	#M
000C2C  1               ;		lda	#1
000C2C  1               ;		sta	SOFTRESET
000C2C  1               ;		rep	#M
000C2C  1               
000C2C  1               		plb
000C2C  1               
000C2C  1               ;		sep	#M
000C2C  1               ;		lda	#0
000C2C  1               ;		sta	SOFTRESET
000C2C  1               ;		rep	#M
000C2C  1               
000C2C  1               		ply
000C2C  1               		plx
000C2C  1               		pla
000C2C  1               		rti
000C2C  1               
000C2C  1               
000C2C  1               KGBIRQ:
000C2C  1               		.A8
000C2C  1               		.I8
000C2C  1               
000C2C  1               ;		tya
000C2C  1               ;		pha
000C2C  1               
000C2C  1               ;		ldx	#40
000C2C  1               ;KGB6:		dex		;wait some time for parity and stop bit to arrive
000C2C  1               ;		bne	KGB6
000C2C  1               
000C2C  1               ;		lda	skipone
000C2C  1               ;		jsr	printhex
000C2C  1               ;		lda	SHFLOK
000C2C  1               ;		jsr	printhex
000C2C  1               ;		lda	extended
000C2C  1               ;		jsr	printhex
000C2C  1               ;		lda	ALTACT
000C2C  1               ;		jsr	printhex
000C2C  1               
000C2C  1               		ldx	#0
000C2C  1               		lda	PS2DATA
000C2C  1               ;		sta	PS2DATA		;reset PS2
000C2C  1               ;		cmp	#$E1		;pause/break?
000C2C  1               ;		bne	KGBIRQ1		;no
000C2C  1               ;
000C2C  1               ;		tsx
000C2C  1               ;		clc
000C2C  1               ;		lda 	$105,X
000C2C  1               ;		sta 	memptr
000C2C  1               ;		adc	#2
000C2C  1               ;		sta	$105,x
000C2C  1               ;		lda 	$106,X
000C2C  1               ;		sta	memptr+1
000C2C  1               ;		adc	#0
000C2C  1               ;		sta	$106,x
000C2C  1               ;
000C2C  1               ;		ldy	#0
000C2C  1               ;		lda	(memptr),y
000C2C  1               ;		sta	opcode
000C2C  1               ;		jmp	BRKENTRY1
000C2C  1               
000C2C  1               KGBIRQ1:	ldy	skipone
000C2C  1               		stx	SUPERF	;X = 0
000C2C  1               
000C2C  1               		cmp	#$E1	;Pause key?
000C2C  1               		bne  	KGB0
000C2C  1               ;		jmp	reset
000C2C  1               
000C2C  1               KGB0:		cmp	#$F0	;break scancode?
000C2C  1               		bne	KGB5	;no
000C2C  1               		sta	skipone	;skipone <> 0 denotes
000C2C  1               		jmp	KGBEX	;ignore next key
000C2C  1               
000C2C  1               KGB5:		cmp	#CLSHIFT	;process left-shift
000C2C  1               		beq	KGB9		;yes =>
000C2C  1               		cmp	#CRSHIFT	;process right-shift
000C2C  1               		bne	KGB8		;no =>
000C2C  1               KGB9:		sty	SHFLOK		;Y=skipone, shift = 0 denotes shift pressed!
000C2C  1               
000C2C  1               KGB8:		cmp	#CLSTRG
000C2C  1               		bne	KGB2
000C2C  1               		sty	CLSFLG		;Y=skipone, CLSFLG = 0 denotes CLS pressed!
000C2C  1               
000C2C  1               KGB2:		cmp	#$e0		;extended scancode
000C2C  1               		bne	KGB7		;no =>
000C2C  1               		sta	extended
000C2C  1               		beq	KGBEX
000C2C  1               
000C2C  1               KGB7:		ldy	skipone		;make-key?
000C2C  1               		beq	KGB3		;yes =>
000C2C  1               
000C2C  1               ;		ldx #0			;hence break-key, clear break
000C2C  1               		stx	skipone		;X already 0
000C2C  1               		stx	extended
000C2C  1               		stx	ALTACT
000C2C  1               		bne	KGBEX		;read next key
000C2C  1               
000C2C  1               KGB3:		cmp	#CCAPS		;CAPS-LOCK?
000C2C  1               		beq	KGBCAPS		;yes =>
000C2C  1               
000C2C  1               ;
000C2C  1               ; special keys have been processed, now tranform scancode into ASCII
000C2C  1               ;
000C2C  1               		ldy	extended
000C2C  1               		bne	KGBEXTEND
000C2C  1               
000C2C  1               		ldy	SHFLOK		;shift = 0, upper case
000C2C  1               		beq	KGBUPPER
000C2C  1               
000C2C  1               		ldy	ALTACT		;ALTGR active?
000C2C  1               		bne	KGBALTGR	;yes, handle ALTGR-keys
000C2C  1               
000C2C  1               		tay			;read ASCII-char lower-case
000C2C  1               		lda	CHARTABLE_NOSHIFT,y
000C2C  1               KGB4:		beq	KGBEX		;if undefined, read next key
000C2C  1               		ldx	CLSFLG		;STRG-pressed?
000C2C  1               		bne	KGBKEYEX	;no, exit
000C2C  1               		sec
000C2C  1               		sbc 	#('a'-1)
000C2C  1               		bcs	KGBKEYEX
000C2C  1               
000C2C  1               KGBUPPER:	tay			;read ASCII-char upper-case
000C2C  1               		lda	CHARTABLE_SHIFT,y
000C2C  1               		jmp	KGB4
000C2C  1               
000C2C  1               KGBCAPS:	lda	SHFLOK		;shift = 0?
000C2C  1               		beq	KGBCAPS1
000C2C  1               		stx	SHFLOK		;X = 0
000C2C  1               		bne	KGBEX		;read next key
000C2C  1               
000C2C  1               KGBCAPS1:	inc	SHFLOK		;shift := 1
000C2C  1               		bne	KGBEX		;read next key
000C2C  1               
000C2C  1               KGBEXTEND:	cmp	#ALTGR
000C2C  1               		bne	KGBEXTEND2
000C2C  1               		sta	ALTACT
000C2C  1               		stx	extended	;X = 0
000C2C  1               		beq	KGBEX
000C2C  1               KGBEXTEND2:	ldy	#(EXT_TABLE - EXT_TABLE_IND - 1)
000C2C  1               KGBEXTEND1:	cmp	EXT_TABLE_IND,y
000C2C  1               		beq	KGBEXTFND
000C2C  1               		dey
000C2C  1               		bpl	KGBEXTEND1
000C2C  1               		bmi	KGBEX
000C2C  1               
000C2C  1               KGBEXTFND:	lda	EXT_TABLE,y
000C2C  1               		cmp	#CCHM		;cursor home?
000C2C  1               		bne	KGBEXTFND1	;no
000C2C  1               		ldx	CLSFLG		;STRG pressed?
000C2C  1               		bne	KGBEXTFND1	;no
000C2C  1               		lda	#CLS		;clear screen
000C2C  1               		bne	KGBKEYEX
000C2C  1               
000C2C  1               KGBEXTFND1:	ldx	EXT_TABLE_SUPERF,y
000C2C  1               		stx	SUPERF
000C2C  1               
000C2C  1               KGBKEYEX:	sta	IRQPS2D
000C2C  1               		lda	#0
000C2C  1               		sta	IRQPS2S
000C2C  1               KGBEX:		rts
000C2C  1               
000C2C  1               KGBALTGR:	ldx	#(ALTGR_TABLE - ALTGR_TABLE_IND - 1)
000C2C  1               KGBALTGR1:	cmp	ALTGR_TABLE_IND,x
000C2C  1               		bne	KGBALTGR2
000C2C  1               		lda	ALTGR_TABLE,x
000C2C  1               		bne	KGBKEYEX	;never 0
000C2C  1               KGBALTGR2:	dex
000C2C  1               		bpl	KGBALTGR1
000C2C  1               		bmi	KGBEX
000C2C  1               
000C2C  1               CHARTABLE_NOSHIFT:
000C2C  1               ;		 	 00   01   02   03   04   05   06   07   08   09   0A   0B   0C   0D   0E   0F
000C2C  1               		.byte	  0,   9,   0,   5,   3,   1,   2,  12,   0,  10,   8,   6,   4,TABU, '^',   0	; 00
000C2C  1               		.byte     0,   0,   0,   0,   0, 'q', '1',   0,   0,   0, 'y', 's', 'a', 'w', '2',   0	; 10
000C2C  1               		.byte	  0, 'c', 'x', 'd', 'e', '4', '3',   0,   0, ' ', 'v', 'f', 't', 'r', '5',   0	; 20
000C2C  1               		.byte	  0, 'n', 'b', 'h', 'g', 'z', '6',   0,   0,   0, 'm', 'j', 'u', '7', '8',   0	; 30
000C2C  1               		.byte	  0, ',', 'k', 'i', 'o', '0', '9',   0,   0, '.', '-', 'l', $94, 'p', '\',   0	; 40
000C2C  1               		.byte	  0,   0, $84,  'X',$81, '`',   0,   0,   0,   0, EOL, '+',   0, '#',   0,   0	; 50
000C2C  1               		.byte	  0, '<',   0,   0,   0,   0,BACK,   0,   0, '1',   0, '4', '7',   0,   0,   0	; 60
000C2C  1               		.byte	 '0', '.', '2', '5', '6', '8', 27,   0,  11, '+', '3', '-', '*', '9', CLS,   0	; 70
000C2C  1               		.byte	  0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0	; 80
000C2C  1               
000C2C  1               CHARTABLE_SHIFT:
000C2C  1               ;		 	 00   01   02   03   04   05   06   07   08   09   0A   0B   0C   0D   0E   0F
000C2C  1               		.byte	  0,   9,   0,   5,   3,   1,   2,  12,   0,  10,   8,   6,   4,TABU, $F8,   0	; 00
000C2C  1               		.byte     0,   0,   0,   0,   0, 'Q', '!',   0,   0,   0, 'Y', 'S', 'A', 'W', '"',   0	; 10
000C2C  1               		.byte	  0, 'C', 'X', 'D', 'E', '$', $15,   0,   0, ' ', 'V', 'F', 'T', 'R', '%',   0	; 20
000C2C  1               		.byte	  0, 'N', 'B', 'H', 'G', 'Z', '&',   0,   0,   0, 'M', 'J', 'U', '/', '(',   0	; 30
000C2C  1               		.byte	  0, ';', 'K', 'I', 'O', '=', ')',   0,   0, ':', '_', 'L', $99, 'P', '?',   0	; 40
000C2C  1               		.byte	  0,   0, $8E,   0, $9A, '?',   0,   0,   0,   0,  EOL, '*', 0,  $27,   0,   0	; 50
000C2C  1               		.byte	  0, '>',   0,   0,   0,   0,CDCH,   0,   0, '1',   0, CCLF, '7',   0,  0,   0	; 60
000C2C  1               		.byte	'0', '.', CCDN, '5', CCRT, CCUP,  0,   0,  11, '+', '3', '-', '*', '9', 0,   0  ; 70
000C2C  1               		.byte	  0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,    0,   0	; 80
000C2C  1               
000C2C  1               ALTGR_TABLE_IND:
000C2C  1               		.byte	$15	; q = @
000C2C  1               		.byte	$61	; <> = |
000C2C  1               		.byte	$5B	; *+ = ~
000C2C  1               		.byte	$4E	; ?ß = \
000C2C  1               
000C2C  1               ALTGR_TABLE:	.byte	'@'
000C2C  1               		.byte	'|'
000C2C  1               		.byte	'~'
000C2C  1               		.byte	'\'
000C2C  1               
000C2C  1               EXT_TABLE_IND:	.byte	$4A	; /
000C2C  1               		.byte	$5A	; ENTER
000C2C  1               		.byte	$69	; END
000C2C  1               		.byte	$6B	; LEFT
000C2C  1               		.byte	$6C	; HOME
000C2C  1               		.byte	$70	; INS
000C2C  1               		.byte	$71	; DEL
000C2C  1               		.byte	$72	; DOWN
000C2C  1               		.byte	$74	; RIGHT
000C2C  1               		.byte	$75	; Up
000C2C  1               		.byte	$7A	; PAGE DOWN
000C2C  1               		.byte	$7D	; PAGE UP
000C2C  1               
000C2C  1               EXT_TABLE:	.byte	'/'	; NumPad division symbol
000C2C  1               		.byte	EOL
000C2C  1               		.byte	CCBT	; with SuperFlag
000C2C  1               		.byte	CCLF
000C2C  1               		.byte	CCHM	; with SuperFLag
000C2C  1               		.byte	CICH
000C2C  1               		.byte	CDCH
000C2C  1               		.byte	CCDN
000C2C  1               		.byte	CCRT
000C2C  1               		.byte	CCUP
000C2C  1               		.byte	CCLM	; with SuperFLag
000C2C  1               		.byte	CCRM	; with SuperFLag
000C2C  1               
000C2C  1               EXT_TABLE_SUPERF:
000C2C  1               		.byte	0
000C2C  1               		.byte	0
000C2C  1               		.byte	1
000C2C  1               		.byte	0
000C2C  1               		.byte	1
000C2C  1               		.byte	0
000C2C  1               		.byte	0
000C2C  1               		.byte	0
000C2C  1               		.byte	0
000C2C  1               		.byte	0
000C2C  1               		.byte	1
000C2C  1               		.byte	1
000C2C  1               
000C2C  1               value:		.byte 0
000C2C  1               
000C2C  1               cnt:		.word $103
000C2C  1               
000C2C  1               		jmp test2
000C2C  1               		brk
000C2C  1               test4:		brl test5
000C2C  1               		brk
000C2C  1               test1:		per test3-1
000C2C  1               		rts
000C2C  1               test2:		per test1-1
000C2C  1               		rts
000C2C  1               
000C2C  1               test3:		brl test4
000C2C  1               		nop
000C2C  1               		nop
000C2C  1               		brk
000C2C  1               
000C2C  1               test5:		rep #M+IX
000C2C  1               		tsx
000C2C  1               		txa
000C2C  1               		sep #M+IX
000C2C  1               		xba
000C2C  1               		jsr jprinthex
000C2C  1               		xba
000C2C  1               		jsr jprinthex
000C2C  1               		jsr jnewline
000C2C  1               
000C2C  1               		rep #M
000C2C  1               		clc
000C2C  1               		sed
000C2C  1               		lda #$9999
000C2C  1               		adc #1
000C2C  1               		sep #M
000C2C  1               		cld
000C2C  1               		php
000C2C  1               		xba
000C2C  1               		jsr jprinthex
000C2C  1               		xba
000C2C  1               		jsr jprinthex
000C2C  1               
000C2C  1               		pla
000C2C  1               		and #1
000C2C  1               		jsr jprinthex
000C2C  1               
000C2C  1               		jsr jnewline
000C2C  1               
000C2C  1               		clc
000C2C  1               		;sed
000C2C  1               		lda #$01
000C2C  1               		sbc #1
000C2C  1               		cld
000C2C  1               		php
000C2C  1               		jsr jprinthex
000C2C  1               		pla
000C2C  1               		and #1
000C2C  1               		jsr jprinthex
000C2C  1               
000C2C  1               		lda #'*'
000C2C  1               		pha
000C2C  1               		lda 1,s
000C2C  1               		jsr jchrout
000C2C  1               		pla
000C2C  1               
000C2C  1               		lda #$CC
000C2C  1               		sta $500
000C2C  1               		rep #M+IX
000C2C  1               		ldx #$500
000C2C  1               		txy
000C2C  1               		iny
000C2C  1               		lda #$180-2
000C2C  1               		mvn $0,$0
000C2C  1               		sep #M+IX
000C2C  1               		rtl
000C2C  1               
000C2C  1               
000C2C  1               		lda #0
000C2C  1               		sta screenBaseLo
000C2C  1               		lda #$80
000C2C  1               		sta screenBaseHi
000C2C  1               		lda #$3f
000C2C  1               		sta screenBaseBank
000C2C  1               
000C2C  1               		lda #$01
000C2C  1               		sta control
000C2C  1               		rtl
000C2C  1               
000C2C  1               		jmp manta
000C2C  1               loop:		rep #M+IX
000C2C  1               		lda CLOCKTICKS
000C2C  1               		sta clock
000C2C  1               		lda CLOCKTICKS+2
000C2C  1               		sta clock+2
000C2C  1               		lda CPUTICKS
000C2C  1               		sta cpu
000C2C  1               		lda CLOCKTICKS+2
000C2C  1               		sta cpu+2
000C2C  1               
000C2C  1               		sep #M+IX
000C2C  1               
000C2C  1               		lda clock+3
000C2C  1               		jsr jprinthex
000C2C  1               		lda clock+2
000C2C  1               		jsr jprinthex
000C2C  1               		lda clock+1
000C2C  1               		jsr jprinthex
000C2C  1               		lda clock+0
000C2C  1               		jsr jprinthex
000C2C  1               		jsr jspace
000C2C  1               
000C2C  1               		lda cpu+3
000C2C  1               		jsr jprinthex
000C2C  1               		lda cpu+2
000C2C  1               		jsr jprinthex
000C2C  1               		lda cpu+1
000C2C  1               		jsr jprinthex
000C2C  1               		lda cpu+0
000C2C  1               		jsr jprinthex
000C2C  1               		jsr jnewline
000C2C  1               		jsr jchrin
000C2C  1               		jmp loop
000C2C  1               
000C2C  1               clock:		.word 0,0
000C2C  1               cpu:		.word 0,0
000C2C  1               
000C2C  1               manta:		lda #2
000C2C  1               		sta control		;320x200
000C2C  1               		lda #1
000C2C  1               		sta spriteCntl		;first sprite on
000C2C  1               
000C2C  1               		ldx #6
000C2C  1               		lda #0
000C2C  1               clearXpos:
000C2C  1               		sta xpos6,x
000C2C  1               		dex
000C2C  1               		dex
000C2C  1               		bpl clearXpos
000C2C  1               
000C2C  1               		sta xpos7
000C2C  1               
000C2C  1               		lda screenBaseLo
000C2C  1               		sta save
000C2C  1               		lda screenBaseHi
000C2C  1               		sta save+1
000C2C  1               		lda screenBaseBank
000C2C  1               		sta save+2
000C2C  1               
000C2C  1               		lda #0
000C2C  1               		sta screenBaseLo
000C2C  1               		lda #$80
000C2C  1               		sta screenBaseHi
000C2C  1               		lda #$3f
000C2C  1               		sta screenBaseBank
000C2C  1               
000C2C  1               		stz memptr
000C2C  1               		stz memptr+1
000C2C  1               		lda #$7C
000C2C  1               		sta memptr+2
000C2C  1               
000C2C  1               		rep #M+IX
000C2C  1               		lda #raster
000C2C  1               		sta RASVEC
000C2C  1               		lda #200
000C2C  1               		sta rasterLo
000C2C  1               
000C2C  1               		ldx #30
000C2C  1               fillSprPal:	lda spritePal,x
000C2C  1               		sta spritePalette,x
000C2C  1               		dex
000C2C  1               		dex
000C2C  1               		bpl fillSprPal
000C2C  1               
000C2C  1               ;		lda $7C0040
000C2C  1               ;		bne ende
000C2C  1               
000C2C  1               		ldx #0
000C2C  1               		txa
000C2C  1               clear:		sta $7F0000,x
000C2C  1               		sta $7E0000,x
000C2C  1               		sta $7C0000,x
000C2C  1               		inx
000C2C  1               		inx
000C2C  1               		bne clear
000C2C  1               
000C2C  1               		sep #M
000C2C  1               
000C2C  1               copySprites:	lda #$4d
000C2C  1               		sta cnt
000C2C  1               		ldx #0
000C2C  1               		txy
000C2C  1               copySprites1:	jsr copySprite
000C2C  1               		dec cnt
000C2C  1               		bne copySprites1
000C2C  1               		jmp ende
000C2C  1               
000C2C  1               copySprite:	lda #64
000C2C  1               		sta cnt+1
000C2C  1               copySprite2:	jsr copy8bits
000C2C  1               		inx
000C2C  1               		dec cnt+1
000C2C  1               		bne copySprite2
000C2C  1               		rts
000C2C  1               
000C2C  1               copy8bits:	lda mantaShipSprites,x
000C2C  1               		pha
000C2C  1               		jsr copy2bits
000C2C  1               		jsr copy2bits
000C2C  1               		jsr copy2bits
000C2C  1               		jsr copy2bits
000C2C  1               		pla
000C2C  1               		sta mantaShipSprites,x
000C2C  1               		rts
000C2C  1               
000C2C  1               copy2bits:	lda #0
000C2C  1               		asl mantaShipSprites,x
000C2C  1               		rol
000C2C  1               		asl mantaShipSprites,x
000C2C  1               		rol
000C2C  1               		sta bits
000C2C  1               		asl
000C2C  1               		asl
000C2C  1               		asl
000C2C  1               		asl
000C2C  1               		ora bits
000C2C  1               		sta [memptr],y
000C2C  1               		iny
000C2C  1               		rts
000C2C  1               
000C2C  1               ende:
000C2C  1               		.a8
000C2C  1               		.i8
000C2C  1               		sep #M+IX
000C2C  1               
000C2C  1               		lda #$12
000C2C  1               		sta control
000C2C  1               		stz TEMP
000C2C  1               		stz TEMP+1
000C2C  1               		lda #$7E
000C2C  1               		sta TEMP+2
000C2C  1               		rtl
000C2C  1               
000C2C  1               
000C2C  1               
000C2C  1               ; receives control M+IX 16-Bit
000C2C  1               raster:
000C2C  1               		.a16
000C2C  1               		.i16
000C2C  1               
000C2C  1               		lda vcountLo
000C2C  1               		sta colorBorderLo
000C2C  1               		cmp #250
000C2C  1               		bcs rasterDoit
000C2C  1               		lda #268
000C2C  1               		sta rasterLo
000C2C  1               		rts
000C2C  1               
000C2C  1               rasterDoit:	lda #0
000C2C  1               		sta rasterLo
000C2C  1               
000C2C  1               		dec velocity
000C2C  1               		bne rasterXpos
000C2C  1               		lda #3
000C2C  1               		sta velocity
000C2C  1               
000C2C  1               		lda #21
000C2C  1               		sta cnt
000C2C  1               
000C2C  1               		ldx shipcnt
000C2C  1               		ldy ypos
000C2C  1               
000C2C  1               rCopyLine1:
000C2C  1               		phb
000C2C  1               		lda #11
000C2C  1               		mvn #$7C,#$7E
000C2C  1               		plb
000C2C  1               		tya
000C2C  1               		clc
000C2C  1               		adc #4
000C2C  1               		tay
000C2C  1               		dec cnt
000C2C  1               		bne rCopyLine1
000C2C  1               
000C2C  1               		inx
000C2C  1               		inx
000C2C  1               		inx
000C2C  1               		inx
000C2C  1               		cpx #256*$0f
000C2C  1               		bcc raster2
000C2C  1               		ldx #0
000C2C  1               raster2:	stx shipcnt
000C2C  1               		lda ypos
000C2C  1               		clc
000C2C  1               		adc #16
000C2C  1               		cmp #16*200
000C2C  1               		bcc raster3
000C2C  1               		lda #0
000C2C  1               raster3:	sta ypos
000C2C  1               
000C2C  1               rasterXpos:
000C2C  1               		sep #M
000C2C  1               		lda xposHi
000C2C  1               		lsr
000C2C  1               		bcc rasterXinc
000C2C  1               		lda xpos0
000C2C  1               		cmp #190
000C2C  1               		bcc rasterXinc
000C2C  1               		lda #100
000C2C  1               		sta xpos0
000C2C  1               		lda #0
000C2C  1               		sta xposHi
000C2C  1               		bra rasterXend
000C2C  1               rasterXinc:	lda xpos0
000C2C  1               		ina
000C2C  1               		sta xpos0
000C2C  1               		bne rasterXend
000C2C  1               		ina
000C2C  1               		sta xposHi
000C2C  1               rasterXend:	rep #M
000C2C  1               		lda #%000111111
000C2C  1               		sta colorBorderLo
000C2C  1               		rts
000C2C  1               
000C2C  1               
000C2C  1               
000C2C  1               spritePal:	.word %000000000	;, %000000000, %000000000, %000000000
000C2C  1               		.word %111000000	;, %000000111, %000000111, %000000111
000C2C  1               		.word %001000000	;, %000111000, %000111000, %000111000
000C2C  1               		.word %111111111	;, %111000000, %111000000, %111000000
000C2C  1               		.word %000111111	;, %000111111, %000111111, %000111111
000C2C  1               		.word %111000111	;, %111000111, %111000111, %111000111
000C2C  1               		.word %111111000	;, %111111000, %111111000, %111111000
000C2C  1               		.word %111111111	;, %111111111, %111111111, %111111111
000C2C  1               		.word %000000000
000C2C  1               		.word %000000111
000C2C  1               		.word %000111000
000C2C  1               		.word %111000000
000C2C  1               		.word %000111111
000C2C  1               		.word %111000111
000C2C  1               		.word %111111000
000C2C  1               		.word %111111111
000C2C  1               
000C2C  1               
000C2C  1               		.include "manta.a65"
000C2C  1               		.include "enemy.a65"
000C2C  1               
000C2C  1               save:		.byte 0,0,0
000C2C  1               cnt:		.byte 0,0
000C2C  1               cnt1:		.byte 0,0
000C2C  1               shipcnt:	.word 0
000C2C  1               velocity:	.word 5
000C2C  1               ypos:		.word 0
000C2C  1               bits:		.byte 0
000C2C  1               
000C2C  1               	.ENDIF
000C2C  1               
