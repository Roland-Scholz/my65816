<html><head><link type='text/css' href='style.css' rel='stylesheet'></head><body class='pgBgnd'>
<h3 align='center'>Equations</h3>
<table width='90%' align='center' border='1' cellpadding='0' cellspacing='0'>
<tr><td>
</td></tr><tr><td>
********** Mapped Logic **********
</td></tr><tr><td>
</td></tr><tr><td>
CSSER <= NOT ((PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND A(5) AND NOT A(14)));
</td></tr><tr><td>
</td></tr><tr><td>
D(0)_BUFR <= ((N0.EXP)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT A(15) AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT A(12) AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT RW AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (A(14) AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (AL(1) AND AL(0) AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (PS2Data(0).EXP)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT A(9) AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT A(8) AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT A(13) AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT A(7) AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (A(5) AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT PHI2 AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT A(11) AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT A(10) AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT A(6) AND SPIData1)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT A(4) AND SPIData1));
</td></tr><tr><td>
</td></tr><tr><td>
D_I(0) <= D(0)_BUFR;
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D(0) <= D_I(0) when D_OE(0) = '1' else 'Z';
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D_OE(0) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT A(5) AND RW AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT A(14));
</td></tr><tr><td>
</td></tr><tr><td>
D_I(1) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	PS2Data(6) AND RW AND NOT A(14) AND NOT AL(0));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D(1) <= D_I(1) when D_OE(1) = '1' else 'Z';
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D_OE(1) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT A(5) AND RW AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT A(14));
</td></tr><tr><td>
</td></tr><tr><td>
D_I(2) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	PS2Data(5) AND RW AND NOT A(14) AND NOT AL(0));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D(2) <= D_I(2) when D_OE(2) = '1' else 'Z';
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D_OE(2) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT A(5) AND RW AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT A(14));
</td></tr><tr><td>
</td></tr><tr><td>
D_I(3) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	PS2Data(4) AND RW AND NOT A(14) AND NOT AL(0));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D(3) <= D_I(3) when D_OE(3) = '1' else 'Z';
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D_OE(3) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT A(5) AND RW AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT A(14));
</td></tr><tr><td>
</td></tr><tr><td>
D_I(4) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	PS2Data(3) AND RW AND NOT A(14) AND NOT AL(0));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D(4) <= D_I(4) when D_OE(4) = '1' else 'Z';
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D_OE(4) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT A(5) AND RW AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT A(14));
</td></tr><tr><td>
</td></tr><tr><td>
D_I(5) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	PS2Data(2) AND RW AND NOT A(14) AND NOT AL(0));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D(5) <= D_I(5) when D_OE(5) = '1' else 'Z';
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D_OE(5) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT A(5) AND RW AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT A(14));
</td></tr><tr><td>
</td></tr><tr><td>
D_I(6) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	PS2Data(1) AND RW AND NOT A(14) AND NOT AL(0));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D(6) <= D_I(6) when D_OE(6) = '1' else 'Z';
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D_OE(6) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT A(5) AND RW AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT A(14));
</td></tr><tr><td>
</td></tr><tr><td>
D_I(7) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	PS2Data(0) AND RW AND NOT A(14) AND NOT AL(0));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D(7) <= D_I(7) when D_OE(7) = '1' else 'Z';
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D_OE(7) <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT A(5) AND RW AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT A(14));
</td></tr><tr><td>
</td></tr><tr><td>
</td></tr><tr><td>
</td></tr><tr><td>
</td></tr><tr><td>
</td></tr><tr><td>
IRQ_I <= '0';
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IRQ <= IRQ_I when IRQ_OE = '1' else 'Z';
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IRQ_OE <= NOT PS2Data(8);
</td></tr><tr><td>
</td></tr><tr><td>
LATCH <= (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND NOT A(4) AND A(5) AND NOT RW AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT A(14));
</td></tr><tr><td>
</td></tr><tr><td>
MOSI <= NOT (FC_0_.OUT);
</td></tr><tr><td>
FDCPE_PHI2L0: FDCPE port map (PHI2L(0),PHI2L_D(0),NOT PHI2,SPIAccess,NOT RES);
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PHI2L_D(0) <= (PHI2L(0) AND NOT PHI2L(1));
</td></tr><tr><td>
FDCPE_PHI2L1: FDCPE port map (PHI2L(1),PHI2L_D(1),NOT PHI2,SPIAccess,NOT RES);
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PHI2L_D(1) <= (NOT PHI2L(0) AND NOT PHI2L(1));
</td></tr><tr><td>
FDCPE_PS2CLKIN0: FDCPE port map (PS2CLKIN(0),PS2CLK,NOT PHI2,'0',NOT PS2Data(8)/PS2Data(8)_SETF__$INT);
</td></tr><tr><td>
FDCPE_PS2CLKIN1: FDCPE port map (PS2CLKIN(1),PS2CLKIN(0),NOT PHI2,'0',NOT PS2Data(8)/PS2Data(8)_SETF__$INT);
</td></tr><tr><td>
FDCPE_PS2Data0: FDCPE port map (PS2Data(0),PS2Data_D(0),PS2EdgeL,'0',NOT PS2Data(8)/PS2Data(8)_SETF__$INT);
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PS2Data_D(0) <= ((PS2Data(8) AND PS2DAT)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT PS2Data(8) AND PS2Data(0)));
</td></tr><tr><td>
FDCPE_PS2Data1: FDCPE port map (PS2Data(1),PS2Data_D(1),PS2EdgeL,'0',NOT PS2Data(8)/PS2Data(8)_SETF__$INT);
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PS2Data_D(1) <= ((PS2Data(8) AND PS2Data(0))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT PS2Data(8) AND PS2Data(1)));
</td></tr><tr><td>
FDCPE_PS2Data2: FDCPE port map (PS2Data(2),PS2Data_D(2),PS2EdgeL,'0',NOT PS2Data(8)/PS2Data(8)_SETF__$INT);
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PS2Data_D(2) <= ((PS2Data(8) AND PS2Data(1))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT PS2Data(8) AND PS2Data(2)));
</td></tr><tr><td>
FDCPE_PS2Data3: FDCPE port map (PS2Data(3),PS2Data_D(3),PS2EdgeL,'0',NOT PS2Data(8)/PS2Data(8)_SETF__$INT);
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PS2Data_D(3) <= ((PS2Data(8) AND PS2Data(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT PS2Data(8) AND PS2Data(3)));
</td></tr><tr><td>
FDCPE_PS2Data4: FDCPE port map (PS2Data(4),PS2Data_D(4),PS2EdgeL,'0',NOT PS2Data(8)/PS2Data(8)_SETF__$INT);
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PS2Data_D(4) <= ((PS2Data(8) AND PS2Data(3))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT PS2Data(8) AND PS2Data(4)));
</td></tr><tr><td>
FDCPE_PS2Data5: FDCPE port map (PS2Data(5),PS2Data_D(5),PS2EdgeL,'0',NOT PS2Data(8)/PS2Data(8)_SETF__$INT);
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PS2Data_D(5) <= ((PS2Data(8) AND PS2Data(4))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT PS2Data(8) AND PS2Data(5)));
</td></tr><tr><td>
FDCPE_PS2Data6: FDCPE port map (PS2Data(6),PS2Data_D(6),PS2EdgeL,'0',NOT PS2Data(8)/PS2Data(8)_SETF__$INT);
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PS2Data_D(6) <= ((PS2Data(8) AND PS2Data(5))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT PS2Data(8) AND PS2Data(6)));
</td></tr><tr><td>
FDCPE_PS2Data7: FDCPE port map (PS2Data(7),PS2Data_D(7),PS2EdgeL,'0',NOT PS2Data(8)/PS2Data(8)_SETF__$INT);
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PS2Data_D(7) <= ((PS2Data(8) AND PS2Data(6))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT PS2Data(8) AND PS2Data(7)));
</td></tr><tr><td>
FDCPE_PS2Data8: FDCPE port map (PS2Data(8),PS2Data_D(8),PS2EdgeL,'0',NOT PS2Data(8)/PS2Data(8)_SETF__$INT);
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PS2Data_D(8) <= (PS2Data(8) AND PS2Data(7));
</td></tr><tr><td>
</td></tr><tr><td>
PS2Data(8)/PS2Data(8)_SETF__$INT <= (RES AND NOT PS2Read);
</td></tr><tr><td>
FDCPE_PS2EdgeL: FDCPE port map (PS2EdgeL,'1',PS2EdgeL_C,PS2EdgeL_CLR,'0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PS2EdgeL_C <= (NOT PS2CLKIN(0) AND NOT PS2CLKIN(1));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PS2EdgeL_CLR <= (PS2CLKIN(0) AND PS2CLKIN(1) AND PS2EdgeL);
</td></tr><tr><td>
FDCPE_PS2Read: FDCPE port map (PS2Read,PS2Read_D,NOT PHI2,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PS2Read_D <= ((PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT A(5) AND NOT A(14) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	PS2Read)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT RW AND NOT A(14) AND NOT AL(0)));
</td></tr><tr><td>
FDCPE_SCLK: FDCPE port map (SCLK,SCLK_D,NOT PHI2,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SCLK_D <= ((NOT RES AND NOT SCLK.PIN)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (SPIAccess AND NOT SCLK.PIN)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (RES AND PHI2L(0) AND PHI2L(1) AND NOT SPIAccess));
</td></tr><tr><td>
FDCPE_SPIAccess: FDCPE port map (SPIAccess,SPIAccess_D,NOT PHI2,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SPIAccess_D <= ((PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND NOT A(5) AND NOT A(14) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	SPIAccess)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT A(14) AND NOT AL(0)));
</td></tr><tr><td>
FTCPE_SPICS: FTCPE port map (SPICS,SPICS_T,NOT PHI2,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SPICS_T <= ((PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT RW AND NOT A(14) AND AL(0) AND D(1).PIN AND NOT SPICS.PIN)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT RW AND NOT A(14) AND AL(0) AND NOT D(1).PIN AND SPICS.PIN));
</td></tr><tr><td>
FTCPE_SPIData: FTCPE port map (SPIData,SPIData_T,NOT PHI2,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SPIData_T <= ((PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT RW AND NOT A(14) AND NOT AL(0) AND SPIData AND NOT D(7).PIN)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT RW AND NOT A(14) AND NOT AL(0) AND NOT SPIData AND D(7).PIN));
</td></tr><tr><td>
FTCPE_SPIData1: FTCPE port map (SPIData1,SPIData1_T,NOT PHI2,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SPIData1_T <= ((PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT RW AND NOT A(14) AND AL(0) AND SPIData1 AND NOT D(0).PIN)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (PHI2 AND A(9) AND A(8) AND A(15) AND A(13) AND A(12) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	A(11) AND A(10) AND A(7) AND A(6) AND A(4) AND AL(1) AND NOT A(5) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT RW AND NOT A(14) AND AL(0) AND NOT SPIData1 AND D(0).PIN));
</td></tr><tr><td>
Register Legend:
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FDCPE (Q,D,C,CLR,PRE); 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FTCPE (Q,D,C,CLR,PRE); 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LDCP  (Q,D,G,CLR,PRE); 
</td></tr><tr><td>
</td></tr>
</table>
<form><span class="pgRef"><table width="90%" align="center"><tr>
<td align="left"><input type="button" onclick="javascript:parent.leftnav.showTop()" onmouseover="window.status='goto top of page'; return true;" onmouseout="window.status=''" value="back to top"></td>
<td align="right"><input type="button" onclick="window.print()" onmouseover="window.status='print page'; return true;" onmouseout="window.status=''" value="print page"></td>
</tr></table></span></form>
</body></html>
